<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://car-ffenien.github.io/</id>
    <title>CAR-FFEINE Blog</title>
    <updated>2023-07-07T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://car-ffenien.github.io/"/>
    <subtitle>CAR-FFEINE Blog</subtitle>
    <entry>
        <title type="html"><![CDATA[스프링에서 발생한 에러 로그를 슬랙으로 모니터링하는 방법]]></title>
        <id>https://car-ffenien.github.io/8</id>
        <link href="https://car-ffenien.github.io/8"/>
        <updated>2023-07-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요 카페인팀 nunu입니다.]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요 카페인팀 nunu입니다.</p><p>오늘은 스프링에서 발생한 에러 로그를 슬랙으로 모니터링하는 방법에 대해서 알아보려고 합니다.</p><p>목차는 다음과 같습니다.</p><ol><li>스프링에서 로그를 남기는 방법</li><li>Slf4 j의 동작원리</li><li>Logback의 동작원리</li><li>Logback을 사용해서 슬랙으로 에러 로그를 모니터링하는 방법</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="스프링에서-로그는-어떻게-찍을까">스프링에서 로그는 어떻게 찍을까?<a href="#스프링에서-로그는-어떻게-찍을까" class="hash-link" aria-label="Direct link to 스프링에서 로그는 어떻게 찍을까?" title="Direct link to 스프링에서 로그는 어떻게 찍을까?">​</a></h2><p>스프링에서 로그를 찍는 방법은 여러 가지가 있지만, 가장 간단한 방법은 <code>System.out.println()</code>을 사용하는 것입니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token annotation punctuation" style="color:#393A34">@RestController</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">TestController</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@GetMapping</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>당연하지만, 성능이 안 좋아서 실제 서비스에서는 사용하지 않습니다.</p><p>스프링에서는 Slf4 j를 통해서 로그를 남길 수 있습니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token annotation punctuation" style="color:#393A34">@Slf4j</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// private final Logger log = LoggerFactory.getLogger(this.getClass()); 와 같다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token annotation punctuation" style="color:#393A34">@RestController</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">TestController</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@GetMapping</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이 코드를 통해서 로그를 남길 수 있는데, 자동으로 콘솔에 출력이 됩니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="스프링에서-로깅은-어떻게-작동하는-거지">스프링에서 로깅은 어떻게 작동하는 거지?<a href="#스프링에서-로깅은-어떻게-작동하는-거지" class="hash-link" aria-label="Direct link to 스프링에서 로깅은 어떻게 작동하는 거지?" title="Direct link to 스프링에서 로깅은 어떻게 작동하는 거지?">​</a></h2><p>스프링 4까지는 <code>Commons Logging</code>을 사용했었습니다.</p><p><code>Commons Logging</code>은 <code>JCL</code>이라고도 불리며, <code>JDK Logging</code>, <code>Log4 j,</code> <code>Logback</code> 등 다양한 로깅 프레임워크를 지원합니다.</p><p>JCL 은 런타임에 어떤 로깅 프레임워크를 사용할지 결정할 수 있습니다.</p><p>런타임에 어떤 로깅 프레임워크를 사용할지 결정하는 방식으로 클래스 로더에게 질의를 하는 방식으로 작동하게 되는데</p><p>클래스 로더에게 질의를 했을 경우에 몇 가지 문제점이 생깁니다</p><ol><li>클래스 로더에 명확한 표준이 없고, 부모 자식 모델이 있어서, 클래스 로더에 따라서 다른 결과가 나올 수 있습니다. <a href="http://articles.qos.ch/classloader.html" target="_blank" rel="noopener noreferrer">참고</a></li><li>클래스로더는 gc의 동작에 방해를 일으켜서 메모리 누수를 발생시킬 수 있습니다. <a href="https://cwiki.apache.org/confluence/display/COMMONS/Logging+UndeployMemoryLeak" target="_blank" rel="noopener noreferrer">참고</a></li></ol><p><code>@Slf4j</code> 어노테이션을 붙이면, 컴파일 시점에 <code>private final Logger log = LoggerFactory.getLogger(this.getClass());</code> 와 같은 코드로 변환됩니다.</p><p>스프링 5에서는 Slf4j 가 사용하는 것처럼, 컴파일 타임에 어떤 로깅 프레임워크를 사용할지 결정하는 기능을 작성했고, <code>Commons Logging</code>을 사용하지 않게 되었습니다.</p><p><a href="https://docs.spring.io/spring-framework/docs/5.0.0.RC3/spring-framework-reference/overview.html#overview-logging" target="_blank" rel="noopener noreferrer">spring 5에서 변경되었다는 링크</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="slf4-j에-대해서-알아보자">Slf4 j에 대해서 알아보자<a href="#slf4-j에-대해서-알아보자" class="hash-link" aria-label="Direct link to Slf4 j에 대해서 알아보자" title="Direct link to Slf4 j에 대해서 알아보자">​</a></h2><p>Slf4 j는 로깅을 위한 인터페이스를 제공하는 프레임워크입니다.(Simple Logging Facade for Java)</p><p>컴파일 타임에, 어떤 로그 라이브러리를 사용할지 결정하는 기능을 제공합니다.</p><p>로그 라이브러리를 바꾸려고 했을 때, 기존 코드는 하나도 건드리지 않고, 로그 라이브러리만 바꿔주면 되도록 해줍니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="조금-더-자세한-동작-원리를-알아보자">조금 더 자세한 동작 원리를 알아보자<a href="#조금-더-자세한-동작-원리를-알아보자" class="hash-link" aria-label="Direct link to 조금 더 자세한 동작 원리를 알아보자" title="Direct link to 조금 더 자세한 동작 원리를 알아보자">​</a></h3><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/lCcTc/btsmBw3OEJz/1njLV283KdUWc9qyppEdak/img.png" alt="only slf4j" class="img_ev3q"></p><p>Slf4 j 만을 사용했을 경우 위 사진 같은 형태로 요청이 처리가 됩니다.</p><p>Slf4 j 라는 인터페이스를 통해서 로그를 남기고, 어떤 로그 라이브러리를 사용할지는 <code>Slf4j binding</code>이라는 것을 통해서 결정합니다.</p><p><code>Slf4j binding</code> 은 <code>Slf4j</code>의 인터페이스를 구현하고 있지 않은 라이브러리의 구현체를 연결해 주는 역할을 합니다.</p><p>그 구현체로 <code>Slf4j-log4 j12-{version}. jar</code> 같은 것이 있다.</p><p>이와는 다르게 Logback 은 Slf4 j 를 구현하고 있기에, <code>Slf4j binding</code> 을 사용하지 않아도 됩니다.</p><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/IYC3k/btsmy0einLF/F0aiMnteJeGB00fkGdBjRK/img.png" alt="logback example" class="img_ev3q"></p><p>위 사진처럼 <code>Slf4j binding</code> 을 사용하지 않고, <code>Logback</code> 바로 사용하는 것도 가능합니다.</p><p>그렇다면 Slf4 j를 바로 사용하지 않은 코드에서 <code>Slf4j</code> 를 사용하려면 어떻게 해야 할까요?</p><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/msTPw/btsmziy04VE/sXSOKYvi9yXSoiRmg6mIGk/img.png" alt="slf4j working principle" class="img_ev3q"></p><p>위 사진처럼 <code>Slf4j bridge</code> 를 통해서 외부 라이브러리를 사용하는 것처럼 갈아 끼울 수 있습니다.</p><p><code>Log4j2</code> 를 사용하는 코드를 전혀 바꾸지 않아도, <code>Bridge</code> 가 <code>Slf4j</code> 를 통해 <code>Logback</code>으로 자연스럽게 로그를 남길 수 있도록 해줍니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="logback에-대해서-알아보자">Logback에 대해서 알아보자<a href="#logback에-대해서-알아보자" class="hash-link" aria-label="Direct link to Logback에 대해서 알아보자" title="Direct link to Logback에 대해서 알아보자">​</a></h2><p>Logback 은 스프링에서 기본으로 사용될 만큼 인기 있는 로그 라이브러리입니다.</p><p><img loading="lazy" src="https://logback.qos.ch/manual/images/chapters/architecture/underTheHoodSequence2_small.gif" alt="logback 동작 과정" class="img_ev3q"></p><p>공식문서에서 아주 핵심적인 동작원리를 설명해주고 있는 사진이라서 가져왔습니다.</p><p>너무 어려워 보여서, 조금 자세하게 각각의 구성요소에 대해서 알아보도록 하겠습니다</p><p>이에 대해 알아보도록 하겠습니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="로그백의-구성요소">로그백의 구성요소<a href="#로그백의-구성요소" class="hash-link" aria-label="Direct link to 로그백의 구성요소" title="Direct link to 로그백의 구성요소">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="appender">Appender<a href="#appender" class="hash-link" aria-label="Direct link to Appender" title="Direct link to Appender">​</a></h3><p>Appender는 로그를 어디에 출력할지를 결정하는 역할을 합니다.</p><p>외부로부터 어떤 데이터를 받아서, 어떤 방식으로 처리할지에 대해서 전체적으로 설정할 수 있습니다.</p><p>기본적으로 수많은 Appender 가 제공되고 있습니다.</p><ul><li>ConsoleAppender</li><li>FileAppender</li><li>RollingFileAppender</li><li>AsyncAppender</li><li>DBAppender</li><li>SMTPAppender</li><li>SocketAppender</li><li>SyslogAppender</li></ul><p>저희는 Slack에 알림을 주는 것이 목적이기 때문에, SlackAppender를 사용하면 될 것 같습니다.</p><p>하지만 SlackAppender는 제공되고 있지 않기에 직접 구현을 해야 하는데요</p><p>이를 구현했을 때, Slack API 가 끝날 때까지, 계속 기다리고 있을 필요가 없기에, AsyncAppender를 사용하는 것이 좋을 것 같습니다.</p><p>사용 방법은 다음과 같습니다. xml 기반으로 가능한데요</p><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">FILE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ch.qos.logback.core.FileAppender</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">file</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">myapp.log</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">file</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">encoder</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">pattern</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">%logger{35} -%kvp -%msg%n</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">pattern</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">encoder</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ASYNC</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ch.qos.logback.classic.AsyncAppender</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">FILE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">root</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">level</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">DEBUG</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ASYNC</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">root</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>만약 여기에 있는 기능들로 부족하다면, 직접 Appender 를 구현해서 사용할 수도 있습니다.</p><p>직접 구현하려면 AppenderBase를 상속받아서 구현하면 됩니다.</p><p>이 클래스는 필요한 부분이 대부분 구현되어 있고, appender 만 구현하면 바로 사용할 수 있습니다. 당연하지만 필요하다면 override 도 가능하죠</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="layout">Layout<a href="#layout" class="hash-link" aria-label="Direct link to Layout" title="Direct link to Layout">​</a></h3><p>Layout 은 로그를 어떤 형식으로 출력할지를 결정하는 역할을 합니다.</p><p>Appender는 로그를 어디에 출력할지를 결정하는 역할을 하고, Layout 은 로그를 어떤 형식으로 출력할지를 결정하는 역할을 하도록 하는 것이 이상적이지만</p><p>Logback 은 Appender에서 Layout 을 직접 지정할 수 있도록 해주고 있습니다.</p><p>따라서, 직접 Layout 을 만들지 않고, Appender 에서 기존에 이미 있는 패턴만 사용하려고 합니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="encoder">Encoder<a href="#encoder" class="hash-link" aria-label="Direct link to Encoder" title="Direct link to Encoder">​</a></h3><p>Encoder는 Layout 과 비슷한 역할을 합니다.</p><p>Layout 은 로그를 어떤 형식으로 출력할지를 결정하는 역할을 하고, Encoder 는 실제 byte 형태로 변환하는 역할을 합니다.</p><p>Slack의 webhook을 사용할 것이지만, AppenderBase를 사용하기에, 이번에는 사용할 수 없습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="filter">Filter<a href="#filter" class="hash-link" aria-label="Direct link to Filter" title="Direct link to Filter">​</a></h3><p>Filter는 로그를 어떤 조건에 따라서 출력할지를 결정하는 역할을 합니다.</p><p>Filter 는 Appender를 등록하며 같이 등록할 수 있는데요</p><p>이번 프로젝트에서는 Level 이 ERROR 이상인 것만 출력하도록 하고 싶기에, LevelFilter를 사용하면 좋을 것 같습니다.</p><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">CONSOLE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ch.qos.logback.core.ConsoleAppender</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">filter</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ch.qos.logback.classic.filter.LevelFilter</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">level</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">INFO</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">level</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">onMatch</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">ACCEPT</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">onMatch</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">onMismatch</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">DENY</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">onMismatch</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">filter</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">encoder</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">pattern</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        %-4relative [%thread] %-5level %logger{30} -%kvp -%msg%n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">pattern</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">encoder</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">root</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">level</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">DEBUG</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">CONSOLE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">root</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>와 비슷하게 사용할 수 있어 보입니다.</p><p>그러면 실제로 프로젝트에서 error 발생 시 slack으로 알림을 주는 것을 구현해 보도록 하겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="슬랙에-추가하는-방법">슬랙에 추가하는 방법<a href="#슬랙에-추가하는-방법" class="hash-link" aria-label="Direct link to 슬랙에 추가하는 방법" title="Direct link to 슬랙에 추가하는 방법">​</a></h2><p><a href="https://velog.io/@king/slack-incoming-webhook" target="_blank" rel="noopener noreferrer">이 블로그</a>를 보고서 작성했습니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="실제-구현">실제 구현<a href="#실제-구현" class="hash-link" aria-label="Direct link to 실제 구현" title="Direct link to 실제 구현">​</a></h2><p>구현된 결과물은 아래와 같습니다</p><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/d3z7QG/btsmQCCV69f/NwiyNhQGZOBnKBP2hT8kf0/img.png" alt="slack appender" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="slackappender-구현하기">SlackAppender 구현하기<a href="#slackappender-구현하기" class="hash-link" aria-label="Direct link to SlackAppender 구현하기" title="Direct link to SlackAppender 구현하기">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">SlackAppender</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">AppenderBase</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">ILoggingEvent</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">protected</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">ILoggingEvent</span><span class="token plain"> eventObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> restTemplate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">RestTemplate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> url </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"https://hooks.slack.com/services/"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">Map</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">String</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics class-name">Object</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> body </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createSlackErrorBody</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eventObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        restTemplate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">postForEntity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> body</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">class</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">Map</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">String</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics class-name">Object</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createSlackErrorBody</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">ILoggingEvent</span><span class="token plain"> eventObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> message </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createMessage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eventObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">Map</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">"attachments"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">List</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token class-name">Map</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"fallback"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"요청을 실패했어요 :cry:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"color"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"#2eb886"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"pretext"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"에러가 발생했어요 확인해주세요 :cry:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"author_name"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"car-ffeine"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"text"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> message</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"fields"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">List</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                        </span><span class="token class-name">Map</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"title"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"우선순위"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"value"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"High"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"short"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                        </span><span class="token class-name">Map</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"title"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"서버 환경"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"value"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"local"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"short"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"ts"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getTimeStamp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createMessage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">ILoggingEvent</span><span class="token plain"> eventObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> baseMessage </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"에러가 발생했습니다.\n"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> pattern </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> baseMessage </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"```%s %s %s [%s] - %s```"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">SimpleDateFormat</span><span class="token plain"> simpleDateFormat </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"yyyy-MM-dd HH:mm:ss.SSS"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pattern</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                simpleDateFormat</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getTimeStamp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getLevel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getThreadName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getLoggerName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getFormattedMessage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이 과정에서 url을 직접 입력하시면 됩니다.</p><p>그리고, 이렇게 만든 SlackAppender를 logback-spring.xml 에 등록하면 됩니다.</p><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token prolog" style="color:#999988;font-style:italic">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">scan</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">true</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">scanPeriod</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">60 seconds</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">include</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">resource</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">org/springframework/boot/logging/logback/defaults.xml</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">property</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">LOG_FILE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">value</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">include</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">resource</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">org/springframework/boot/logging/logback/console-appender.xml</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">include</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">resource</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">org/springframework/boot/logging/logback/file-appender.xml</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">root</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">level</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">INFO</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">FILE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">CONSOLE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">root</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">SLACK_APPENDER</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">racingcar.SlackAppender</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ASYNC_SLACK_APPENDER</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ch.qos.logback.classic.AsyncAppender</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">SLACK_APPENDER</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">logger</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">racingcar</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">level</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ERROR</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">additivity</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">true</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ASYNC_SLACK_APPENDER</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">logger</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이렇게 하면, racingcar 패키지에서 에러가 발생할 때만 slack으로 알림을 받을 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="결론">결론<a href="#결론" class="hash-link" aria-label="Direct link to 결론" title="Direct link to 결론">​</a></h2><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/d3z7QG/btsmQCCV69f/NwiyNhQGZOBnKBP2hT8kf0/img.png" alt="slack appender" class="img_ev3q"></p><p>이번 글에서는 log 레벨에 따라 slack 으로 알림을 받는 방법을 알아보았습니다.</p><p>긴 글을 읽어주셔서 감사합니다</p>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="spring" term="spring"/>
        <category label="slack" term="slack"/>
        <category label="error" term="error"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[깃 커밋 메시지에 이슈 번호를 자동으로 입력할 순 없을까?]]></title>
        <id>https://car-ffenien.github.io/7</id>
        <link href="https://car-ffenien.github.io/7"/>
        <updated>2023-07-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[프로젝트 브랜치명 컨벤션이 feat/이슈번호여서, 브랜치명에서 이슈번호만 가져온 다음 커밋할 때마다 커밋 메시지 아래단(footer)에 이슈 번호를 자동으로 입력해주고 싶었다. 자동으로 입력된다면 깜빡하고 이슈 번호를 안 적는 일도 없고, 시간도 단축할 수 있기 때문이다.]]></summary>
        <content type="html"><![CDATA[<p>프로젝트 브랜치명 컨벤션이 feat/이슈번호여서, 브랜치명에서 이슈번호만 가져온 다음 커밋할 때마다 커밋 메시지 아래단(footer)에 이슈 번호를 자동으로 입력해주고 싶었다. 자동으로 입력된다면 깜빡하고 이슈 번호를 안 적는 일도 없고, 시간도 단축할 수 있기 때문이다.</p><p>아래 순서대로 진행한다면 이슈 번호 POSTFIX 자동화를 할 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-프로젝트-폴더에-githooks-폴더-생성">1) 프로젝트 폴더에 .githooks 폴더 생성<a href="#1-프로젝트-폴더에-githooks-폴더-생성" class="hash-link" aria-label="Direct link to 1) 프로젝트 폴더에 .githooks 폴더 생성" title="Direct link to 1) 프로젝트 폴더에 .githooks 폴더 생성">​</a></h3><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-githooks-폴더에-commit-msg-파일-생성">2) .githooks 폴더에 commit-msg 파일 생성<a href="#2-githooks-폴더에-commit-msg-파일-생성" class="hash-link" aria-label="Direct link to 2) .githooks 폴더에 commit-msg 파일 생성" title="Direct link to 2) .githooks 폴더에 commit-msg 파일 생성">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">#!/bin/bash</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COMMIT_MESSAGE_FILE_PATH=$1</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">MESSAGE=$(cat "$COMMIT_MESSAGE_FILE_PATH")</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 커밋 메시지가 없을 때, 커밋 방지</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ $(head -1 "$COMMIT_MESSAGE_FILE_PATH") == '' ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  exit 0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># 브랜치명에서 이슈 번호만 추출 ('/' 뒤에 있는 문자만 추출)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">POSTFIX=$(git branch | grep '\*' | sed 's/* //' | sed 's/^.*\///' | sed 's/^\([^-]*-[^-]*\).*/\1/')</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COMMIT_SOURCE=$2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">CURRENT_BRANCH=$(git branch --show-current)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># [[ "$CURRENT_BRANCH" != "$POSTFIX" ]] 👉🏻 현재 브랜치명과 POSTFIX가 똑같으면 POSTFIX 입력 방지</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># [ "$COMMIT_SOURCE" != "merge" ] 👉🏻 merge할 때, POSTFIX 입력 방지</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"># [[ "$MESSAGE" != *"[#$POSTFIX]"* ]] 👉🏻 이미 POSTFIX가 존재할 때, POSTFIX 중복 입력 방지</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">if [[ "$CURRENT_BRANCH" != "$POSTFIX" ]] &amp;&amp; [ "$COMMIT_SOURCE" != "merge" ] &amp;&amp; [[ "$MESSAGE" != *"[#$POSTFIX]"* ]]; then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  printf "%s\n\n[#%s]" "$MESSAGE" "$POSTFIX" &gt; "$COMMIT_MESSAGE_FILE_PATH"</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">fi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>🧐 이슈 번호 추출에 사용된 명령어 설명</p><ul><li>grep '<!-- -->*<!-- -->' 👉 <code>*</code> 표시된 브랜치(현재 위치의 브랜치)를 가져온다.</li><li>sed 's/_ //' 👉 <code>*</code> 제거</li><li>sed 's/<!-- -->(<sup id="fnref-/-33a37a"><a href="#fn-/-33a37a" class="footnote-ref">/</a></sup><em>)<!-- -->.</em>/\1/' 👉 <code>/</code> 이후의 문자만 추출</li><li>sed 's/^<!-- -->(<sup id="fnref---33a37a"><a href="#fn---33a37a" class="footnote-ref">-</a></sup><em>-<sup id="fnref---33a37a"><a href="#fn---33a37a" class="footnote-ref">-</a></sup></em>)<!-- -->.<!-- -->_<!-- -->/\1/' 👉 하나의 이슈에 여러 브랜치를 만들면서 feat/10-1 이런 형태로 브랜치를 만들 경우, 첫 번째 '-' 앞 뒤만 추출 (ex. 10-1)</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-프로젝트-폴더에-makefile-파일-생성">3) 프로젝트 폴더에 Makefile 파일 생성<a href="#3-프로젝트-폴더에-makefile-파일-생성" class="hash-link" aria-label="Direct link to 3) 프로젝트 폴더에 Makefile 파일 생성" title="Direct link to 3) 프로젝트 폴더에 Makefile 파일 생성">​</a></h3><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">init:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git config core.hooksPath .githooks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  chmod +x .githooks/commit-msg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  git update-index --chmod=+x .githooks/commit-msg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> # chmod +x .githooks/commit-msg 👉🏻 macOS, 리눅스에서 스크립트 권한 부여</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> # git update-index --chmod=+x .githooks/commit-msg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> # 👉 macOS, 리눅스에서 브랜치가 바뀔 때마다 스크립트 실행시켜줘야 하는 문제 해결</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-아래-코드-실행">4) 아래 코드 실행<a href="#4-아래-코드-실행" class="hash-link" aria-label="Direct link to 4) 아래 코드 실행" title="Direct link to 4) 아래 코드 실행">​</a></h3><p>새로 git clone을 할 때마다 아래 코드를 실행시켜줘야 한다. 한 번만 실행시키면 계속 적용된다. (window 기준)</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">git config core.hooksPath .githooks</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>❗macOS는 git clone 할 때마다 아래 코드를 실행시켜줘야 한다.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">make</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><p>참고 블로그
<a href="https://blog.deering.co/commit-convention/" target="_blank" rel="noopener noreferrer">https://blog.deering.co/commit-convention/</a></p>]]></content>
        <author>
            <name>야미</name>
            <uri>https://github.com/feb-dain</uri>
        </author>
        <category label="git" term="git"/>
        <category label="commit" term="commit"/>
        <category label="message" term="message"/>
        <category label="issue" term="issue"/>
        <category label="auto" term="auto"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[DB] 대량의 데이터를 DB에 넣는 과정을 최적화해보자]]></title>
        <id>https://car-ffenien.github.io/6</id>
        <link href="https://car-ffenien.github.io/6"/>
        <updated>2023-07-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요 카페인팀 누누입니다]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요 카페인팀 <code>누누</code>입니다</p><p>이번에는 대량의 데이터를 DB에 넣는 과정을 최적화하는 과정에서 알게 된 내용을 공유하려고 합니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="이번-최적화의-목표">이번 최적화의 목표<a href="#이번-최적화의-목표" class="hash-link" aria-label="Direct link to 이번 최적화의 목표" title="Direct link to 이번 최적화의 목표">​</a></h2><p>전기차 충전소에 대한 공공 데이터를 가져오고, 그 데이터를 DB 에 넣는 과정을 최적화해보자</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="대량의-데이터를-삽입하는-과정">대량의 데이터를 삽입하는 과정<a href="#대량의-데이터를-삽입하는-과정" class="hash-link" aria-label="Direct link to 대량의 데이터를 삽입하는 과정" title="Direct link to 대량의 데이터를 삽입하는 과정">​</a></h2><p>저희 팀의 요구사항을 간단하게 정리하면 다음과 같습니다</p><ol><li>대량의 데이터를 공공 데이터에서 전기차 충전소와 전기차 충전기에 대한 데이터를 가져온다<ul><li>충전소는 6만 개, 충전기는 23만 개의 데이터가 존재한다.</li><li>한 번에 가져올 수 있는 양은 9999개 까지다.</li></ul></li><li>이 데이터를 DB에 넣는다<ul><li>충전소와 충전기는 1:N 관계이다</li></ul></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="최적화-전은-어떤-상황이었는데">최적화 전은 어떤 상황이었는데?<a href="#최적화-전은-어떤-상황이었는데" class="hash-link" aria-label="Direct link to 최적화 전은 어떤 상황이었는데?" title="Direct link to 최적화 전은 어떤 상황이었는데?">​</a></h2><p><img loading="lazy" src="https://veiled-starfish-4c7.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ffb934c88-4589-4096-90bc-36b4bc88f6a2%2FUntitled.png?id=f7f7c2af-7b95-42e8-8d95-ddd952e53005&amp;table=block&amp;spaceId=9db11c89-12d2-4910-8822-5ffecbdb8ccd&amp;width=2000&amp;userId=&amp;cache=v2" alt="before_optimize" class="img_ev3q"></p><p>위 사진을 잘 보시면 아실 수 있으시겠지만, 2000개를 저장하는데, 231.762 초가 사용되었습니다.</p><p>물론 출력을 위한 시간도 포함되었기에, 230초 정도라고 생각하셔도 좋습니다</p><p>1만 개라면? 231.762초 <!-- -->*<!-- --> 5 = 1,158.81초</p><p>23만 개라면? 1158.81 <!-- -->*<!-- --> 23 = 26,652.63초</p><p>시간으로 바꿔보면 7.4 시간이 걸린다는 것을 볼 수 있습니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점" class="hash-link" aria-label="Direct link to 이 과정에서 볼 수 있는 문제점" title="Direct link to 이 과정에서 볼 수 있는 문제점">​</a></h3><ol><li>데이터를 저장할 때마다, 새로운 Transaction 이 생성된다.</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-개선할-수-있을까">어떻게 개선할 수 있을까?<a href="#어떻게-개선할-수-있을까" class="hash-link" aria-label="Direct link to 어떻게 개선할 수 있을까?" title="Direct link to 어떻게 개선할 수 있을까?">​</a></h3><p>데이터를 저장할 때마다, 새로운 Transaction 이 생성되는 것을 방지하기 위해, 전체를 하나의 트랜잭션으로 묶는다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="전체를-한-트랜잭션으로-묶은-버전">전체를 한 트랜잭션으로 묶은 버전<a href="#전체를-한-트랜잭션으로-묶은-버전" class="hash-link" aria-label="Direct link to 전체를 한 트랜잭션으로 묶은 버전" title="Direct link to 전체를 한 트랜잭션으로 묶은 버전">​</a></h2><p><img loading="lazy" src="https://veiled-starfish-4c7.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9ff34622-4a26-4acd-980c-ae175c83143d%2FUntitled.png?id=979aa2c5-e972-4c52-a44a-1669c497c84e&amp;table=block&amp;spaceId=9db11c89-12d2-4910-8822-5ffecbdb8ccd&amp;width=2000&amp;userId=&amp;cache=v2" alt="all_in_transaction" class="img_ev3q"></p><p>이 과정에서 2000개를 저장하는데 65초 가 사용되었습니다.</p><p>1만 개라면? 65초 <!-- -->*<!-- --> 5 = 325초</p><p>23만 개라면? 325초 <!-- -->*<!-- --> 23 = 7,475초</p><p>시간으로 바꿔보면 2시간이 걸린다는 것을 볼 수 있습니다</p><p>전체적으로 3배 정도 빨라졌습니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점-1">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점-1" class="hash-link" aria-label="Direct link to 이 과정에서 볼 수 있는 문제점" title="Direct link to 이 과정에서 볼 수 있는 문제점">​</a></h3><ol><li>23만 개의 저장이 모두 한 트랜잭션이 되어서, 하나가 실패하면 23만개를 새로 저장해야 하는 상황에 처한다</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-개선할-수-있을까-1">어떻게 개선할 수 있을까?<a href="#어떻게-개선할-수-있을까-1" class="hash-link" aria-label="Direct link to 어떻게 개선할 수 있을까?" title="Direct link to 어떻게 개선할 수 있을까?">​</a></h3><p>23만개의 저장이 모두 한 트랜잭션이 되는 것을 방지하기 위해, 1만 개씩 영속화시킨다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1만-개가-한-트랜잭션으로-묶인-버전">1만 개가 한 트랜잭션으로 묶인 버전<a href="#1만-개가-한-트랜잭션으로-묶인-버전" class="hash-link" aria-label="Direct link to 1만 개가 한 트랜잭션으로 묶인 버전" title="Direct link to 1만 개가 한 트랜잭션으로 묶인 버전">​</a></h2><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/c2mgfd/btsmrWCfnKy/9Y6Dv8vYzcftsket61tub1/img.png" alt="separateTransaction" class="img_ev3q"></p><p>성능상으로 개선한 부분은 그렇게 크지 않지만, 실패했을 때, 1만 개만 다시 저장하면 되기에, 훨씬 빠르게 복구가 가능합니다.</p><p>여기서 PageNo라는 클래스는, i를 바로 참조했을 경우, effectively final을 보장할 수 없어서 만들었습니다.</p><p>성능은 전체를 한 트랜잭션으로 묶은 버전과 큰 차이가 나지 않습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점-2">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점-2" class="hash-link" aria-label="Direct link to 이 과정에서 볼 수 있는 문제점" title="Direct link to 이 과정에서 볼 수 있는 문제점">​</a></h3><ol><li>id 생성 전략이 <code>GenerationType.IDENTITY</code> 이기에, 데이터를 저장할 때마다, DB에서 id를 생성해야 한다.</li></ol><p>JPA에 있는 쓰기 지연을 전혀 활용할 수 없고, DB에서 id를 생성하기 위해, DB와 매번 통신을 해야 한다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-개선할-수-있을까-2">어떻게 개선할 수 있을까?<a href="#어떻게-개선할-수-있을까-2" class="hash-link" aria-label="Direct link to 어떻게 개선할 수 있을까?" title="Direct link to 어떻게 개선할 수 있을까?">​</a></h3><p>id를 미리 생성해서, DB 에서 id 를 생성하는 과정을 생략한다</p><p>ID 생성 전략을 <code>GenerationType.Table의</code> 형태로 바꿔서, DB에서 id를 생성하는 과정을 줄여서, 성능을 개선한다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1만-개가-한-트랜잭션으로-묶이고-id를-미리-생성한-버전">1만 개가 한 트랜잭션으로 묶이고, id를 미리 생성한 버전<a href="#1만-개가-한-트랜잭션으로-묶이고-id를-미리-생성한-버전" class="hash-link" aria-label="Direct link to 1만 개가 한 트랜잭션으로 묶이고, id를 미리 생성한 버전" title="Direct link to 1만 개가 한 트랜잭션으로 묶이고, id를 미리 생성한 버전">​</a></h2><p>이때 batch size를 1000 단위로 설정해서 1000개씩 id 가 늘어나도록 설정했다</p><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/bFjNWb/btsmuoLmzVh/GddHebu2V43fpk2t3IUmz0/img.png" alt="charger_generator" class="img_ev3q"><img loading="lazy" src="https://blog.kakaocdn.net/dn/pae8w/btsmrANjAGi/gjUhD6sMvBLpmsPl9c1tAk/img.png" alt="station_generator" class="img_ev3q"></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spring.jdbc.template.fetch-size=10000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/mtBFp/btsmtEt48jp/3mFOfrIBWbjJhHHuyP4zPk/img.png" alt="10000batch_size" class="img_ev3q"></p><p>1자리 숫자는 앞에서부터 n(만개)를 의미하고, 2번째 숫자는 1만 개를 저장하는 데 걸린 시간(ms)을 의미합니다.</p><p>처음 1만 개는 142초가 걸리고, 2만 개는 285초가 걸렸습니다.</p><p>23만 개라면? 142 <!-- -->*<!-- --> 26 = 3,266초</p><p>처음과 비교하자면 7.4시간이 걸리는 것에서 54분 정도 걸리는 것으로 개선되었습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점-3">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점-3" class="hash-link" aria-label="Direct link to 이 과정에서 볼 수 있는 문제점" title="Direct link to 이 과정에서 볼 수 있는 문제점">​</a></h3><p>하나의 스레드에서만 동작하기에, 성능이 개선되었지만, 여전히 느립니다.</p><p>하나의 스레드에서만 동작하기에, 하나의 커넥션을 사용하게 됩니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-개선할-수-있을까-3">어떻게 개선할 수 있을까?<a href="#어떻게-개선할-수-있을까-3" class="hash-link" aria-label="Direct link to 어떻게 개선할 수 있을까?" title="Direct link to 어떻게 개선할 수 있을까?">​</a></h3><p>여러 스레드에서 동작하게 하고, 여러 커넥션을 사용하게 합니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="여러-스레드에서-동작하고-여러-커넥션을-사용하는-버전">여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전<a href="#여러-스레드에서-동작하고-여러-커넥션을-사용하는-버전" class="hash-link" aria-label="Direct link to 여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전" title="Direct link to 여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전">​</a></h2><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/bPV2aa/btsmrSfU2D4/phDwk77XiKvwiXa5geX0PK/img.png" alt="multi_thread" class="img_ev3q"></p><p>이 버전에서 89991 개를 저장하는데 총 157초가 걸렸습니다.</p><p>23만 개라면? 157 <!-- -->*<!-- --> 3 = 471초</p><p>시간으로 바꿔보면 5분도 채 걸리지 않는 시간이죠</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점-4">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점-4" class="hash-link" aria-label="Direct link to 이 과정에서 볼 수 있는 문제점" title="Direct link to 이 과정에서 볼 수 있는 문제점">​</a></h3><p>hikari connection pool 사이즈를 10으로 설정했는데, 10개의 커넥션을 사용하면서 저장을 하다 보니, 10개의 커넥션을 모두 사용하고 나서, 11번째부터는 커넥션을 가져오기 위해, 기다려야 하는 상황이 발생합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-개선할-수-있을까-4">어떻게 개선할 수 있을까?<a href="#어떻게-개선할-수-있을까-4" class="hash-link" aria-label="Direct link to 어떻게 개선할 수 있을까?" title="Direct link to 어떻게 개선할 수 있을까?">​</a></h3><p>hikari connection pool 사이즈를 25로 설정해서, 25개의 커넥션을 사용하도록 합니다.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spring.datasource.hikari.maximum-pool-size=25</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="여러-스레드에서-동작하고-여러-커넥션을-사용하는-버전-2">여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전 2<a href="#여러-스레드에서-동작하고-여러-커넥션을-사용하는-버전-2" class="hash-link" aria-label="Direct link to 여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전 2" title="Direct link to 여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전 2">​</a></h2><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/vJEoD/btsmsfau8Mv/j0CT8fVrAp3LKGRMmyMVeK/img.png" alt="multi_thread2" class="img_ev3q"></p><p>총 13만 개의 데이터를 저장하는데, 147초가 걸리고, db 인스턴스의 cpu 사용률이 100%에 가까워져서 ec2 가 다운되었습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점-5">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점-5" class="hash-link" aria-label="Direct link to 이 과정에서 볼 수 있는 문제점" title="Direct link to 이 과정에서 볼 수 있는 문제점">​</a></h3><p>db의 cpu 사용량을 고려하지 않고, 23만 개가 조금 넘는 데이터를 25개의 커넥션을 활용해 저장하려고 했습니다</p><h1>결론</h1><ol><li>데이터를 저장할 때마다, transaction을 사용하지 말자</li><li>데이터를 저장할 때마다, id를 생성하지 말자</li><li>여러 스레드에서 동작하고, 여러 커넥션을 사용하자</li><li>db의 cpu 사용량을 고려하자</li></ol><p>긴 글 읽어주셔서 감사합니다</p>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <author>
            <name>박스터</name>
            <uri>https://github.com/drunkenhw</uri>
        </author>
        <category label="DB" term="DB"/>
        <category label="JPA" term="JPA"/>
        <category label="Hibernate" term="Hibernate"/>
        <category label="Spring" term="Spring"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[pr 본문에 이슈 번호를 달아주는 기능을 만들었습니다]]></title>
        <id>https://car-ffenien.github.io/5</id>
        <link href="https://car-ffenien.github.io/5"/>
        <updated>2023-07-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요 우테코 카페인팀 누누입니다]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요 우테코 카페인팀 누누입니다</p><p>빠르게 결과부터 보고 가시죠.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="어떤-결과가-나왔나요">어떤 결과가 나왔나요?<a href="#어떤-결과가-나왔나요" class="hash-link" aria-label="Direct link to 어떤 결과가 나왔나요?" title="Direct link to 어떤 결과가 나왔나요?">​</a></h2><p>pr의 본문 끝에, 연관된 이슈 번호를 달아주는 기능을 만들었습니다.</p><p>밑에 사진을 보시면 쉽게 이해하실 수 있을 것 같습니다.</p><p><img loading="lazy" src="https://user-images.githubusercontent.com/80899085/250614527-e2672cf2-786a-434c-a8b6-8b374de4d689.png" alt="img" class="img_ev3q"><img loading="lazy" src="https://user-images.githubusercontent.com/80899085/250614882-d99aa570-51e2-4565-ab4c-ccdbd4d36e57.png" alt="img" class="img_ev3q"></p><p>github에서 issue 번호가 pr에 담겨있다면 2가지 장점이 생기는데요.</p><ol><li>issue를 클릭했을 때, 자동으로 그 issue로 넘어갈 수 있습니다. (호버만으로 이슈에 대한 간단한 정보를 볼 수 있습니다)</li><li>pr 이 merge 되었을 때, 자동으로 issue 가 close 됩니다.</li></ol><p>이 과정을 손으로 진행하는 것보다, 자동으로 진행하게 되면 실수도 줄어들고, 개발 과정이 편해질 것 같아서 이 기능을 제작하게 되었는데요</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="중요한-점">중요한 점<a href="#중요한-점" class="hash-link" aria-label="Direct link to 중요한 점" title="Direct link to 중요한 점">​</a></h2><p><strong>이 과정을 진행하려면 밑에서 소개해드릴 브랜치 네이밍 규칙이 필요합니다.</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="브랜치-이름-규칙">브랜치 이름 규칙<a href="#브랜치-이름-규칙" class="hash-link" aria-label="Direct link to 브랜치 이름 규칙" title="Direct link to 브랜치 이름 규칙">​</a></h2><ul><li>브랜치 이름은 <code>타입/이슈번호</code> 으로 구성합니다. ex) <code>feat/1</code></li><li>타입은 <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>refactor</code>, <code>test</code> 등 여러 가지가 있을 수 있습니다.</li></ul><p>이렇게 했을 때, 이슈 번호를 브랜치 명에서부터 가져올 수 있기에, 자동화를 할 수 있습니다.</p><p>이런 규칙이 아닌, feat/action 같은 형태가 된다면 issue 번호를 찾기 어렵겠죠?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="사용-방법">사용 방법<a href="#사용-방법" class="hash-link" aria-label="Direct link to 사용 방법" title="Direct link to 사용 방법">​</a></h2><p>작성된 코드부터 보시고, 설명을 드리겠습니다.</p><p>아래에 작성된 코드를. github/workflows/assign<!-- -->_<!-- -->issue<!-- -->_<!-- -->number<!-- -->_<!-- -->to<!-- -->_<!-- -->pr<!-- -->_<!-- -->body.yml로 저장하시면 끝입니다.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">name: assign_issue_number_to_pr_body</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">on:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  pull_request:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    types: [ opened ]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    branches-ignore:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - develop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jobs:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  append_issue_number_to_pr_body:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    runs-on: ubuntu-latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    steps:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      - name: append feature number to pr body pr branch = feat/(issueNumber)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        uses: actions/github-script@v4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        with:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          github-token: ${{ secrets.GITHUB_TOKEN }}</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          script: |</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            const pr = await github.pulls.get({</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                owner: context.repo.owner,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                repo: context.repo.repo,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                pull_number: context.issue.number</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            });</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            const body = pr.data.body;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            const issueNumber= pr.data.head.ref.split('/')[1];</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            const newBody = body + "\n\n" + "close #" + issueNumber;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            await github.pulls.update({</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  owner: context.repo.owner,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  repo: context.repo.repo,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  pull_number: context.issue.number,</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                  body: newBody</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">              });</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="진행-과정">진행 과정<a href="#진행-과정" class="hash-link" aria-label="Direct link to 진행 과정" title="Direct link to 진행 과정">​</a></h2><ol><li>pr 이 생성되면, pr에 대한 정보를 가져옵니다.</li><li>pr의 본문을 가져옵니다.</li><li>pr의 브랜치 이름에서 이슈 번호를 가져옵니다.</li><li>pr의 본문에 이슈 번호를 추가합니다.</li><li>pr의 본문을 업데이트합니다.</li></ol><p>이 과정을 통해서, 직접 pr의 본문을 수정하지 않아도, 자동으로 이슈 번호가 추가되기에, 실수를 줄일 수 있으니, 한 번 시도해 보세요</p>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="github" term="github"/>
        <category label="action" term="action"/>
        <category label="pr" term="pr"/>
        <category label="issue" term="issue"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[큰 틀에서 바라보는 서버 아키텍처 계획]]></title>
        <id>https://car-ffenien.github.io/4</id>
        <link href="https://car-ffenien.github.io/4"/>
        <updated>2023-07-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[서론]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="서론">서론<a href="#서론" class="hash-link" aria-label="Direct link to 서론" title="Direct link to 서론">​</a></h2><p>안녕하세요👋👋 <code>카페인</code> 팀의 제이입니다.</p><p>회의를 하면서 이번 주 제가 맡은 파트는 서버 인프라입니다.</p><p>아직은 EC2 스펙과 데이터들이 정확히 나오진 않았지만,
우테코에서 적은 EC2 스펙을 제공한다는 기준으로 계획도를 적어볼 생각입니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="상황-인식">상황 인식<a href="#상황-인식" class="hash-link" aria-label="Direct link to 상황 인식" title="Direct link to 상황 인식">​</a></h2><strong>예상하는 상황은 다음과 같습니다.</strong><ul><li>API의 데이터를 다루는 상황에서 최소 약 150만 건에서 최악 약 3700만 건의 데이터를 다룹니다.</li><li>이전 기수를 봤을 때 EC2의 개수는 많이 나눠주는 것으로 파악 됐습니다. (이 부분은 달라질 수 있습니다.)</li><li>상황에 따라서 공공 API를 업데이트 해주는 서버와, 제공 서버를 나눌 수 있습니다.</li><li>Conflict가 나지 않기 위해서 안정적인 검증을 거친 후 Merge를 해야합니다.</li><li>프로젝트의 버전이 갱신된다면 EC2 서버에서 자동으로 스크립트를 작동시켜 Pull 및 서버 재배포를 해야합니다.</li><li>서버의 버전이 바뀌는 경우 기존 서버를 끄고 새로운 서버를 키면 사용자가 이용할 수 없는 텀이 생기기 때문에 무중단 배포를 해야합니다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제점">문제점<a href="#문제점" class="hash-link" aria-label="Direct link to 문제점" title="Direct link to 문제점">​</a></h2><p>위에 상황에서 파악되는 문제점들은 먼저 적은 성능의 EC2 서버로 인해 데이터를 받아오는 과정 혹은 업데이트 과정에서 서버가 터질 수도 있습니다.
성능이 좋다면 하나로 모든 것을 할 수 있지만, 그렇지 않기 때문에 현재 여러 개의 EC2를 기준으로 아키텍처를 구성할 예정입니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-해결을-위한-현재-생각">문제 해결을 위한 현재 생각<a href="#문제-해결을-위한-현재-생각" class="hash-link" aria-label="Direct link to 문제 해결을 위한 현재 생각" title="Direct link to 문제 해결을 위한 현재 생각">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="서버의-기능-분산">서버의 기능 분산<a href="#서버의-기능-분산" class="hash-link" aria-label="Direct link to 서버의 기능 분산" title="Direct link to 서버의 기능 분산">​</a></h3><p>위에서 언급한 것처럼 서버의 성능이 받쳐주지 못할 가능성이 있습니다. 성능을 생각해서 이를 나누기 위해서는 먼저 다음과 같이 서버를 분산할 필요가 있다고 생각합니다.
(물론 서버가 못 버틸 경우이고, 어떻게 나뉘는 지는 회의 후 결정하겠지만!)</p><ul><li><code>공공 API 데이터 적재 및 주기적인 업데이트</code></li><li><code>실시간 혼잡도를 위한 실시간 데이터 업데이트</code></li><li><code>요청 처리</code></li></ul><p>적은 성능으로 업데이트와 요청 처리를 동시에 한다면, 서버가 그 부하를 견디지 못할 수도 있겠죠?
따라서 서버의 역할을 분담하고, 각 역할에 충실하도록 구현한다면 보다 효율적인 처리를 할 수 있을 것이라고 예상됩니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="안정적인-merge">안정적인 Merge<a href="#안정적인-merge" class="hash-link" aria-label="Direct link to 안정적인 Merge" title="Direct link to 안정적인 Merge">​</a></h3><p>잘못된 PR을 Merge 시켜버리면 어떨까요? Conflict도 날 수 있고.. 생각만해도 끔찍합니다.</p><p>코드리뷰를 통해서 이를 어느정도 해소한다고 해도, 사람이다보니 실수할 수 있습니다.
이를 해결하기 위해서 <code>Github Actions</code>를 이용하여 미리 지정해둔 Task를 시키고, 이게 통과한다면 Merge할 수 있도록 할 예정입니다.</p><p>이렇게 한다면 협업할 때에도 안전한 Merge가 가능하다고 생각합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cicd">CI/CD<a href="#cicd" class="hash-link" aria-label="Direct link to CI/CD" title="Direct link to CI/CD">​</a></h3><p>지금까지 우테코 미션에서는 배포를 다음과 같은 과정으로 진행했습니다.</p><ol><li>배포</li><li>리팩토링 및 커밋</li><li>EC2 서버에서 스크립트 실행하여 재배포</li></ol><p>이렇게 배포를 해도 상관없지만, 매번 리팩토링과 기능 추가를 할 때마다 EC2 서버로 들어가서 빌드 스크립트를 사용해서 서버를 재시작 해야할까요?
이렇게 된다면 불필요한 시간이 소모되고, 불편한 점이 많을 것이라고 생각됩니다.</p><p>따라서 CI/CD 개념을 적용해서 이 과정을 자동으로 진행하고자 합니다.</p><p>이 부분은 더 알아봐야겠지만, Github Actions를 이용해서 이를 적용하면, 외부에서 SSH 접근이 불가능하기 때문에 Jenkins를 이용할 예정입니다.
깃허브의 변동 사항을 Webhook을 이용해서 Jenkins로 넘기고, 이를 통해 CI를 적용하면 될 것 같다고 판단했습니다.
물론 이는 계획이고 공부하지 않은 다른 내용이 있을 수 있기 때문에 언제든 바뀔 수 있습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="무중단-배포-아키텍처-적용">무중단 배포 아키텍처 적용<a href="#무중단-배포-아키텍처-적용" class="hash-link" aria-label="Direct link to 무중단 배포 아키텍처 적용" title="Direct link to 무중단 배포 아키텍처 적용">​</a></h3><p>이 또한 아직은 먼 이야기지만, 고려해 볼 상황이라서 적어봤습니다.</p><p>사용자가 이용하고 있는 서비스가 갑자기 중단된다면 어떨까요?
저는 화가 많이 날 것 같습니다.</p><p>피치 못할 사정으로 서버가 터져도, 사용자가 서비스를 계속 이용할 방법이 없을까요?</p><p>이런 고민을 해결하기 위해서 나온 개념이 무중단 배포입니다.</p><p><code>카나리아 배포</code>, <code>Blue/Green 배포</code>, <code>롤링</code>등 무중단 배포를 위한 여러가지 전략은 이미 존재합니다.
이 부분은 아직은 서버의 명세가 정확하지 않아서 어떤 방식으로 어떻게 처리할 것인지에 대해서는 아직 정할 수는 없습니다.</p><p>이는 명세가 확실하게 정해진 후 팀원과 장단점을 상의하며 결정할 일이기 때문에 현재까지는 "이 정도를 고려하고 있다." 정도만 알면 될 것 같습니다.</p>]]></content>
        <author>
            <name>제이</name>
            <uri>https://github.com/sosow0212</uri>
        </author>
        <category label="java17" term="java17"/>
        <category label="infra" term="infra"/>
        <category label="ec2" term="ec2"/>
        <category label="ci" term="ci"/>
        <category label="cd" term="cd"/>
        <category label="aws" term="aws"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 17 을 도입한 이유]]></title>
        <id>https://car-ffenien.github.io/3</id>
        <link href="https://car-ffenien.github.io/3"/>
        <updated>2023-07-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[우아한테크코스에서 자바 11을 사용하는 것이 너무 익숙해진 상황이어서, java 11 대신 java 17을 쓰려면 쓰는 대신, 왜 java 17을 쓰면 좋은지에 대해서 설득을 하는 시간이 있어야 하는데요]]></summary>
        <content type="html"><![CDATA[<p>우아한테크코스에서 자바 11을 사용하는 것이 너무 익숙해진 상황이어서, java 11 대신 java 17을 쓰려면 쓰는 대신, 왜 java 17을 쓰면 좋은지에 대해서 설득을 하는 시간이 있어야 하는데요</p><p>처음에는 단순히 record 클래스가 좋아요, collect(Collectors.toList()); 대신 toList() 만으로 해결할 수 있어서 좋아요</p><p>까지밖에 설명할 수 없었습니다.</p><p>이것만으로 동의를 해줘서 일단 java 17 을 사용하기로 했지만, 이번 기회에 조금 더 자세하게 알아보려고 합니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-과-java-11의-중요한-차이들">Java 17 과 Java 11의 중요한 차이들<a href="#java-17-과-java-11의-중요한-차이들" class="hash-link" aria-label="Direct link to Java 17 과 Java 11의 중요한 차이들" title="Direct link to Java 17 과 Java 11의 중요한 차이들">​</a></h2><p>기능적인 부분과, 숨겨진 부분을 나누어볼 수 있을 것 같습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="기능적인-차이점">기능적인 차이점<a href="#기능적인-차이점" class="hash-link" aria-label="Direct link to 기능적인 차이점" title="Direct link to 기능적인 차이점">​</a></h2><p>언제나 직접 차이를 보면 더 직관적이기 때문에, 직접 코드를 보면서 설명을 해보려고 합니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="record-클래스">record 클래스<a href="#record-클래스" class="hash-link" aria-label="Direct link to record 클래스" title="Direct link to record 클래스">​</a></h3><p>간단한 dto 클래스를 만들었을 때 코드가 정말 간단해지는 것을 확인할 수 있습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11">Java 11<a href="#java-11" class="hash-link" aria-label="Direct link to Java 11" title="Direct link to Java 11">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Dto {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private final int data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Dto(int data) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.data = data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int getData() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>lombok 을 사용했을 때</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Getter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@AllArgsConstructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Dto {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private final int data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java17">Java17<a href="#java17" class="hash-link" aria-label="Direct link to Java17" title="Direct link to Java17">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public record Record(int data) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이렇게 보면 훨씬 간단해진 것을 볼 수 있습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="예상되는-문제점">예상되는 문제점<a href="#예상되는-문제점" class="hash-link" aria-label="Direct link to 예상되는 문제점" title="Direct link to 예상되는 문제점">​</a></h4><p>objectMapper를 사용하면 어떻게 되나요? noArgsConstructor 가 필요하지 않나요?</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class RecordTest {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void objectMapper_로_변환() throws JsonProcessingException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // given</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ObjectMapper objectMapper = new ObjectMapper();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Record record = new Record(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // when</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String json = objectMapper.writeValueAsString(record);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        assertEquals("{\"data\":1}", json);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void string_에서_객체로_변환() throws JsonProcessingException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // given</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String json = "{\"data\":1}";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ObjectMapper objectMapper = new ObjectMapper();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // when</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Record record = objectMapper.readValue(json, Record.class);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        assertEquals(1, record.data());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이 테스트에서 볼 수 있는 것처럼 성공적으로 deserialize, serialize 가 가능합니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tolist-method">toList() method<a href="#tolist-method" class="hash-link" aria-label="Direct link to toList() method" title="Direct link to toList() method">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11-1">Java 11<a href="#java-11-1" class="hash-link" aria-label="Direct link to Java 11" title="Direct link to Java 11">​</a></h4><p>이 부분도 정말 편의성이 높다고 생각하는 부분 중 하나인데요</p><p>Collectors.toList() 대신 toList() 만으로도 사용이 가능합니다</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class ToListWith11 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; list = List.of(1, 2, 3, 4, 5);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; result = list.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .filter(i -&gt; i &gt; 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .collect(Collectors.toList());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17">Java 17<a href="#java-17" class="hash-link" aria-label="Direct link to Java 17" title="Direct link to Java 17">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class ToListWith17 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; list = List.of(1, 2, 3, 4, 5);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; result = list.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .filter(i -&gt; i &gt; 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .toList();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="switch-expression">switch expression<a href="#switch-expression" class="hash-link" aria-label="Direct link to switch expression" title="Direct link to switch expression">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11-2">Java 11<a href="#java-11-2" class="hash-link" aria-label="Direct link to Java 11" title="Direct link to Java 11">​</a></h4><p>우테코에서는 switch, case 를 싫어하기에 볼 수는 없겠지만</p><p>switch 문에도 정말 편하게 바뀌었는데요</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class SwitchWith11 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String day = "Sunday";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        switch (day) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Monday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Tuesday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Wednesday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 3;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Thursday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 4;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Friday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Saturday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 6;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Sunday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 7;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-1">Java 17<a href="#java-17-1" class="hash-link" aria-label="Direct link to Java 17" title="Direct link to Java 17">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class SwitchWith17 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String day = "Sunday";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = switch (day) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Monday" -&gt; 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Tuesday" -&gt; 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Wednesday" -&gt; 3;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Thursday" -&gt; 4;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Friday" -&gt; 5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Saturday" -&gt; 6;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Sunday" -&gt; 7;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            default -&gt; 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>코드 량이 엄청 줄어든 것을 확인하실 수 있습니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="instanceof-pattern-matching">instanceof pattern matching<a href="#instanceof-pattern-matching" class="hash-link" aria-label="Direct link to instanceof pattern matching" title="Direct link to instanceof pattern matching">​</a></h3><p>물론 instanceof 를 사용할 경우가 많은가? 하면 많지는 않겠지만</p><p>아래와 같이 변경되었습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11-3">Java 11<a href="#java-11-3" class="hash-link" aria-label="Direct link to Java 11" title="Direct link to Java 11">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class InstanceOfWith11 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Object obj = "Hello";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (obj instanceof String) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            String str = (String) obj;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(str.toUpperCase());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-2">Java 17<a href="#java-17-2" class="hash-link" aria-label="Direct link to Java 17" title="Direct link to Java 17">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class InstanceOfWith17 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Object obj = "Hello";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (obj instanceof String str) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(str.toUpperCase());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="number-format">number format<a href="#number-format" class="hash-link" aria-label="Direct link to number format" title="Direct link to number format">​</a></h3><p>이 기능은 12에 나왔는데요</p><p>언어별로 숫자를 표현하는 방식이 다르지만, 쉽게 표현할 수 있도록 도와주는 기능입니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-3">Java 17<a href="#java-17-3" class="hash-link" aria-label="Direct link to Java 17" title="Direct link to Java 17">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class NumberFormatterWith11 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int number = 1_000_000;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String result = NumberFormat.getCompactNumberInstance(Locale.KOREA, NumberFormat.Style.LONG).format(number);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result.equals("100만"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>나머지 부분은 사실 그렇게 큰 역할을 할 것 같지는 않아서 생략하겠습니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="숨겨진-부분들">숨겨진 부분들<a href="#숨겨진-부분들" class="hash-link" aria-label="Direct link to 숨겨진 부분들" title="Direct link to 숨겨진 부분들">​</a></h2><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FXhFJg%2Fbtsl9uZOa5R%2FrzrlotCERUqAWM2pknDwq0%2Fimg.png" alt="gc throughput" class="img_ev3q"></p><p>위의 사진은 gc 의 버전별 처리량입니다.</p><p>G1 GC 를 기준으로 본다면 Java8 과의 차이는 15% 정도 향상되었고, java 11과는 10% 정도 향상되었습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FZusmb%2Fbtsl5jYN68u%2FWCKRCFnYjQK4AjkcHRNAt0%2Fimg.png" alt="gc latency" class="img_ev3q"></p><p>위의 사진은 gc의 버전별 지연시간입니다.</p><p>G1 GC 를 기준으로 본다면 Java8 과의 차이는 30% 정도 향상되었고, java 11과는 25% 정도 향상되었습니다.</p><p>이와 같이, 단순하게 새로운 기능만 추가되는 것이 아니라 꾸준히 성능도 향상되고 있습니다.</p><p>이런 부분을 고려했을 때, Java 17을 사용하는 것이 좋을 것 같습니다.</p><p>참고</p><ul><li><a href="https://kstefanj.github.io/2021/11/24/gc-progress-8-17.html" target="_blank" rel="noopener noreferrer">https://kstefanj.github.io/2021/11/24/gc-progress-8-17.html</a></li></ul>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="java17" term="java17"/>
        <category label="java11" term="java11"/>
        <category label="record" term="record"/>
        <category label="toList" term="toList"/>
        <category label="gc" term="gc"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[git branch 전략 작성해보기]]></title>
        <id>https://car-ffenien.github.io/2</id>
        <link href="https://car-ffenien.github.io/2"/>
        <updated>2023-07-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[현재 상황은 어떤데?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="현재-상황은-어떤데">현재 상황은 어떤데?<a href="#현재-상황은-어떤데" class="hash-link" aria-label="Direct link to 현재 상황은 어떤데?" title="Direct link to 현재 상황은 어떤데?">​</a></h2><p>현재 우아한테크코스에서는 프론트 코드와 백엔드 코드가 같은 레포지토리를 사용하고 있습니다.</p><p>프론트와 백엔드가 같이 작업하기에, 의도치 않은 충돌이 자주 생길 수 있는 구조이기에, 이를 git branch 전략으로 충돌을 줄이고자 합니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-branch-전략이란">Git Branch 전략이란?<a href="#git-branch-전략이란" class="hash-link" aria-label="Direct link to Git Branch 전략이란?" title="Direct link to Git Branch 전략이란?">​</a></h2><p>git을 사용해서 소프트웨어 개발을 관리하는 방법입니다.</p><p>여러 개발자가 동시에 작업하고 코드를 통합할 때 생기는 충돌을 효율적으로 조정하기 위한 방법입니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="왜-git-branch-전략이-중요한데">왜 git branch 전략이 중요한데?<a href="#왜-git-branch-전략이-중요한데" class="hash-link" aria-label="Direct link to 왜 git branch 전략이 중요한데?" title="Direct link to 왜 git branch 전략이 중요한데?">​</a></h2><p>아래에 있는 4가지를 제외하고도 훨씬 많은 장점이 있을 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-동시-작업이-편하다">1<!-- -->.<!-- --> 동시 작업이 편하다<a href="#1-동시-작업이-편하다" class="hash-link" aria-label="Direct link to 1-동시-작업이-편하다" title="Direct link to 1-동시-작업이-편하다">​</a></h4><p>여러 사람이 독립적으로 작업하고, 커밋을 할 때, 자신의 브랜치에서 변경 사항을 커밋하게 됩니다.</p><p>브랜치가 병합될 때만 충돌을 해결하면 되니, 아무 규칙이 없는 것보다 충돌 시점이 명확해지기에 생산성을 높일 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-목적이-명확한-브랜치">2<!-- -->.<!-- --> 목적이 명확한 브랜치<a href="#2-목적이-명확한-브랜치" class="hash-link" aria-label="Direct link to 2-목적이-명확한-브랜치" title="Direct link to 2-목적이-명확한-브랜치">​</a></h4><p>애플리케이션의 상태에 몇 가지가 있는데, 안정된 프로덕션, 테스트 환경, 기능 추가 환경... 등이 있습니다</p><p>여러 기능별 브랜치(안정된 버전의 코드만이 관리되는 브랜치, 테스트 환경을 위한 브랜치, 기능 추가를 위한 브랜치)를</p><p>네이밍을 통해 구분하면 각각의 브랜치에 대해서 추가적인 설명을 할 필요 없이 명확하게 관리할 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-배포-파이프라인-관리가-편함">3<!-- -->.<!-- --> 배포 파이프라인 관리가 편함<a href="#3-배포-파이프라인-관리가-편함" class="hash-link" aria-label="Direct link to 3-배포-파이프라인-관리가-편함" title="Direct link to 3-배포-파이프라인-관리가-편함">​</a></h4><p>브랜치가 네이밍으로 명확하게 구분이 되어있다면, 조건을 설정하기 쉽습니다.</p><p>특정 타입의 브랜치에 push 되었을 때, pull request를 만들었을 때 같은 조건에 따른 스크립트를 만들어둔다면 CI/CD를 구축하기 쉽습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-버전-관리가-편리하다">4<!-- -->.<!-- --> 버전 관리가 편리하다<a href="#4-버전-관리가-편리하다" class="hash-link" aria-label="Direct link to 4-버전-관리가-편리하다" title="Direct link to 4-버전-관리가-편리하다">​</a></h4><p>서버에 문제가 생겼을 때, 어떤 브랜치로 돌아가서 롤백을 해야 하는지에 대한 것들이 명확합니다.</p><p>안정된 브랜치가 어떤 것인지 명확하기에, 롤백 과정에 대한 의사결정을 줄일 수 있습니다.</p><p>그러면 어떤 종류가 있는지 더 자세하게 알아보도록 하겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-branch-전략의-종류는">Git Branch 전략의 종류는?<a href="#git-branch-전략의-종류는" class="hash-link" aria-label="Direct link to Git Branch 전략의 종류는?" title="Direct link to Git Branch 전략의 종류는?">​</a></h2><p>총 3가지의 전략이 있습니다.</p><p>1<!-- -->.<!-- --> Github Flow</p><p>2<!-- -->.<!-- --> Gitlab Flow</p><p>3<!-- -->.<!-- --> Git Flow</p><p>git을 사용하기에, Git Flow라는 네이밍이 가장 직관적이고 유명한데요.&nbsp;</p><p>3가지 전략 중에서 가장 복잡하기에, 쉬운 순서대로 진행해 보도록 하겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-github-flow">1<!-- -->.<!-- --> Github Flow<a href="#1-github-flow" class="hash-link" aria-label="Direct link to 1-github-flow" title="Direct link to 1-github-flow">​</a></h2><p>그림으로 flow 간단하게 보고 가도록 하겠습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FblgfI6%2FbtslEWRFdaJ%2F3KmwR2yqlfgKk0msnufYNk%2Fimg.png" alt="img" class="img_ev3q"></p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbtUzxm%2FbtslJ1xWHzy%2FMP0s11FoCTKpqwQnUJUm30%2Fimg.png" alt="img2" class="img_ev3q"></p><p>브랜치는 총 2가지 종류가 존재합니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-master-브랜치">1<!-- -->.<!-- --> master 브랜치<a href="#1-master-브랜치" class="hash-link" aria-label="Direct link to 1-master-브랜치" title="Direct link to 1-master-브랜치">​</a></h4><p>여기에 머지가 되면 배포가 되도록 CD를 연결해 놓은 경우가 많습니다.</p><p>안정된 버전의 코드가 관리되는 브랜치입니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-feature-브랜치">2<!-- -->.<!-- --> feature 브랜치<a href="#2-feature-브랜치" class="hash-link" aria-label="Direct link to 2-feature-브랜치" title="Direct link to 2-feature-브랜치">​</a></h4><p>기능 추가, 버그 수정 등 모든 작업은 feature 브랜치에서 일어납니다.</p><p>master 브랜치에서 새로운 브랜치를 만들어서, 마스터로 머지되는 단순한 사이클을 가지고 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="장점">장점<a href="#장점" class="hash-link" aria-label="Direct link to 장점" title="Direct link to 장점">​</a></h4><p>위에서 볼 수 있는 것처럼 2종류의 브랜치만 있기에, 정말 간단합니다.</p><p>학습 과정까지의 러닝 커브가 거의 없다시피 하기에, 간단한 프로젝트에 적용하기 정말 좋습니다.</p><p>릴리즈 되지 않은 코드가 최소화됩니다. 최신 버전의 코드와 최대한 빠르게 동기화를 계속해서 시킬 수 있습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="단점">단점<a href="#단점" class="hash-link" aria-label="Direct link to 단점" title="Direct link to 단점">​</a></h4><p>모든 코드는 다 master 브랜치에 머지가 되어야 한다는 점이 개발 서버와, 운영서버를 나누기 애매할 수 있습니다.</p><p>개발 서버에 배포를 하고 싶은 상황이라면, master에 머지가 되어야 합니다.</p><p>머지가 된 이후에 cd 파이프라인을 통해서 개발 서버와 운영 서버 모두에 배포가 됩니다.</p><p>여러 환경을 나누고 관리를 하고 싶으시다면 다음에 소개해드릴 전략을 사용해 보셔도 좋을 것 같습니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-gitlab-flow">2<!-- -->.<!-- --> Gitlab Flow<a href="#2-gitlab-flow" class="hash-link" aria-label="Direct link to 2-gitlab-flow" title="Direct link to 2-gitlab-flow">​</a></h2><p>그림으로 flow 간단하게 보고 가도록 하겠습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fdlarwn%2FbtslKkYqqTR%2FXi8NnZIEXahoVFusk0xV31%2Fimg.png" alt="img2" class="img_ev3q"></p><p>밑에 환경은 총 2개의 서버가 존재할 때를 가정하고 있습니다.</p><p>1<!-- -->.<!-- --> pre-production 서버</p><p>2<!-- -->.<!-- --> production 서버</p><p>편의를 위해 main에 머지되는 과정은 간단하게 표현했습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdbkNc9%2FbtslJ0MBrWb%2F0CT7DVQoCDFOpbqyAko9mk%2Fimg.png" alt="img3" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="브랜치-종류">브랜치 종류<a href="#브랜치-종류" class="hash-link" aria-label="Direct link to 브랜치 종류" title="Direct link to 브랜치 종류">​</a></h4><p>총 3가지 브랜치가 필요하고, 추가에 따라서 더 추가할 수 있습니다.</p><p>1<!-- -->.<!-- --> main(or develop) 브랜치</p><p>기능에 대한 개발이 완료되었지만, 여기에 머지되어도 바로 배포되지는 않습니다.</p><p>2<!-- -->.<!-- --> feature브랜치</p><p>기능을 개발하는 브랜치입니다. Github Flow 와도 유사합니다.</p><p>3<!-- -->.<!-- --> production 브랜치</p><p>실제 배포가 일어나는 브랜치입니다.&nbsp;</p><p>여기에 머지가 되는 순간 배포가 일어납니다.</p><p>위 사진에 있는 것처럼, 필요에 따라서 pre-production이나, staging 같은 환경에 따른 브랜치를 추가할 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="특징">특징<a href="#특징" class="hash-link" aria-label="Direct link to 특징" title="Direct link to 특징">​</a></h4><p>1<!-- -->.<!-- --> 무조건 단방향으로 머지가 일어납니다.</p><p>긴급하게 라이브 서버에 수정을 해야 할 때, production 부터 시작하는 것이 아닌, main 부터 차근차근 올라가야 합니다</p><p>2<!-- -->.<!-- --> 환경에 따라 브랜치 종류가 늘어날 수 있습니다.</p><p>위 사진에서는 pre-production 이 그 예시가 되겠네요.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="장점-1">장점<a href="#장점-1" class="hash-link" aria-label="Direct link to 장점" title="Direct link to 장점">​</a></h4><p>1<!-- -->.<!-- --> Github Flow에서 환경별 브랜치를 통해서 개발 서버나 pre-production 서버에 버전을 깔끔하게 관리할 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-git-flow">3<!-- -->.<!-- --> Git Flow<a href="#3-git-flow" class="hash-link" aria-label="Direct link to 3-git-flow" title="Direct link to 3-git-flow">​</a></h2><p>브랜치 전략 중 가장 처음으로 유명해진 브랜치 전략입니다.</p><p>배포가 특정 주기를 가지고 있는 애플리케이션일 때, 가장 적합합니다.</p><p>가장 복잡한 전략을 가지고 있어서, 모두가 브랜치 전략에 대해서 이해하고 있다면 역할에 따른 깔끔한 분리가 가능합니다</p><p>그림으로 보고 가도록 하겠습니다</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fd9WzKn%2FbtslKdkAHNP%2F2fCAqKSVxtPVWqYnBS8juk%2Fimg.png" alt="img4" class="img_ev3q"></p><p>가장 유명한 브랜치 전략이지만, 가장 어려운 전략이기도 합니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="특징-1">특징<a href="#특징-1" class="hash-link" aria-label="Direct link to 특징" title="Direct link to 특징">​</a></h4><p>1<!-- -->.<!-- --> 브랜치에 대해서 양방향으로 머지가 일어납니다</p><p>release 브랜치에서 버그 수정이 일어나면, develop 브랜치에도 머지해줘야 합니다.</p><p>hotfix 브랜치를 main 브랜치뿐만 아니라, develop 브랜치에도 머지해줘야 합니다</p><p>브랜치의 종류가 5가지나 됩니다</p><p>1<!-- -->.<!-- --> main</p><p>production 이 배포되었을 때, 이 브랜치에 머지되는 것이 기준이 됩니다.</p><p>2<!-- -->.<!-- --> develop&nbsp;</p><p>위에서 설명드렸던 브랜치들과 큰 차이가 없이 배포 전 브랜치입니다.</p><p>3<!-- -->.<!-- --> feature</p><p>기능을 개발할 때 사용하는 브랜치입니다. 이것도 위와 큰 차이가 없습니다</p><p>4<!-- -->.<!-- --> release</p><p>Gitlab Flow에서 pre-production에 해당한다고 봐도 무방합니다.</p><p>여기서 버그 수정이 일어났을 경우에,&nbsp; develop에 머지하는 것을 까먹으면 안 됩니다.</p><p>5<!-- -->.<!-- --> hotfix</p><p>main 브랜치에서 생성된 브랜치로, 긴급한 변경사항을 처리합니다.</p><p>이때, develop에 머지하는 것을 깜빡하면 안 됩니다.</p><p>더 자세하게 알아보실 분은 아래 링크들을 확인해 보세요</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="우리-프로젝트에는-어떤-것이-적절할까">우리 프로젝트에는 어떤 것이 적절할까?<a href="#우리-프로젝트에는-어떤-것이-적절할까" class="hash-link" aria-label="Direct link to 우리 프로젝트에는 어떤 것이 적절할까?" title="Direct link to 우리 프로젝트에는 어떤 것이 적절할까?">​</a></h2><p>나중에 개발 서버 혹은 스테이징 서버를 두고 싶기에, 이 부분에 대한 처리가 부족한 Github Flow는 적절하지 않습니다.</p><p>Git Flow는 깔끔하게 처리할 수 있지만, 러닝 커브가 Gitlab Flow 보다 약간 더 있어서, 빠르게 개발하는 취지에 맞지 않아 보였습니다.</p><p>이런 과정을 통해서 Gitlab Flow를 사용하려고 합니다&nbsp;</p><p>참고</p><p><a href="https://techblog.woowahan.com/2553/" target="_blank" rel="noopener noreferrer">https://techblog.woowahan.com/2553/</a></p><p><a href="https://docs.gitlab.com/ee/topics/gitlab_flow.html" target="_blank" rel="noopener noreferrer">https://docs.gitlab.com/ee/topics/gitlab<!-- -->_<!-- -->flow.html</a></p>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="git" term="git"/>
        <category label="branch" term="branch"/>
        <category label="git branch" term="git branch"/>
        <category label="github flow" term="github flow"/>
        <category label="gitlab flow" term="gitlab flow"/>
        <category label="git flow" term="git flow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://car-ffenien.github.io/1</id>
        <link href="https://car-ffenien.github.io/1"/>
        <updated>2023-06-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요</p>]]></content>
        <author>
            <name>박스터</name>
            <uri>https://github.com/drunkenhw</uri>
        </author>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <author>
            <name>제이</name>
            <uri>https://github.com/sosow0212</uri>
        </author>
        <author>
            <name>키아라</name>
            <uri>https://github.com/kiarakim</uri>
        </author>
        <author>
            <name>야미</name>
            <uri>https://github.com/feb-dain</uri>
        </author>
        <author>
            <name>센트</name>
            <uri>https://github.com/kyw0716</uri>
        </author>
        <author>
            <name>가브리엘</name>
            <uri>https://github.com/gabrielyoon7</uri>
        </author>
        <category label="hello" term="hello"/>
        <category label="world" term="world"/>
    </entry>
</feed>