<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://car-ffenien.github.io/</id>
    <title>CAR-FFEINE Blog</title>
    <updated>2023-07-02T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://car-ffenien.github.io/"/>
    <subtitle>CAR-FFEINE Blog</subtitle>
    <entry>
        <title type="html"><![CDATA[Java 17 을 도입한 이유]]></title>
        <id>https://car-ffenien.github.io/3</id>
        <link href="https://car-ffenien.github.io/3"/>
        <updated>2023-07-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[우아한테크코스에서 자바 11을 사용하는 것이 너무 익숙해진 상황이어서, java 11 대신 java 17을 쓰려면 쓰는 대신, 왜 java 17을 쓰면 좋은지에 대해서 설득을 하는 시간이 있어야 하는데요]]></summary>
        <content type="html"><![CDATA[<p>우아한테크코스에서 자바 11을 사용하는 것이 너무 익숙해진 상황이어서, java 11 대신 java 17을 쓰려면 쓰는 대신, 왜 java 17을 쓰면 좋은지에 대해서 설득을 하는 시간이 있어야 하는데요</p><p>처음에는 단순히 record 클래스가 좋아요, collect(Collectors.toList()); 대신 toList() 만으로 해결할 수 있어서 좋아요</p><p>까지밖에 설명할 수 없었습니다.</p><p>이것만으로 동의를 해줘서 일단 java 17 을 사용하기로 했지만, 이번 기회에 조금 더 자세하게 알아보려고 합니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-과-java-11의-중요한-차이들">Java 17 과 Java 11의 중요한 차이들<a href="#java-17-과-java-11의-중요한-차이들" class="hash-link" aria-label="Direct link to Java 17 과 Java 11의 중요한 차이들" title="Direct link to Java 17 과 Java 11의 중요한 차이들">​</a></h2><p>기능적인 부분과, 숨겨진 부분을 나누어볼 수 있을 것 같습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="기능적인-차이점">기능적인 차이점<a href="#기능적인-차이점" class="hash-link" aria-label="Direct link to 기능적인 차이점" title="Direct link to 기능적인 차이점">​</a></h2><p>언제나 직접 차이를 보면 더 직관적이기 때문에, 직접 코드를 보면서 설명을 해보려고 합니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="record-클래스">record 클래스<a href="#record-클래스" class="hash-link" aria-label="Direct link to record 클래스" title="Direct link to record 클래스">​</a></h3><p>간단한 dto 클래스를 만들었을 때 코드가 정말 간단해지는 것을 확인할 수 있습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11">Java 11<a href="#java-11" class="hash-link" aria-label="Direct link to Java 11" title="Direct link to Java 11">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Dto {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private final int data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Dto(int data) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.data = data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int getData() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>lombok 을 사용했을 때</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Getter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@AllArgsConstructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Dto {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private final int data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java17">Java17<a href="#java17" class="hash-link" aria-label="Direct link to Java17" title="Direct link to Java17">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public record Record(int data) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이렇게 보면 훨씬 간단해진 것을 볼 수 있습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="예상되는-문제점">예상되는 문제점<a href="#예상되는-문제점" class="hash-link" aria-label="Direct link to 예상되는 문제점" title="Direct link to 예상되는 문제점">​</a></h4><p>objectMapper를 사용하면 어떻게 되나요? noArgsConstructor 가 필요하지 않나요?</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">class RecordTest {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void objectMapper_로_변환() throws JsonProcessingException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // given</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ObjectMapper objectMapper = new ObjectMapper();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Record record = new Record(1);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // when</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String json = objectMapper.writeValueAsString(record);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        assertEquals("{\"data\":1}", json);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    @Test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    void string_에서_객체로_변환() throws JsonProcessingException {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // given</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String json = "{\"data\":1}";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        ObjectMapper objectMapper = new ObjectMapper();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // when</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Record record = objectMapper.readValue(json, Record.class);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        // then</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        assertEquals(1, record.data());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이 테스트에서 볼 수 있는 것처럼 성공적으로 deserialize, serialize 가 가능합니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tolist-method">toList() method<a href="#tolist-method" class="hash-link" aria-label="Direct link to toList() method" title="Direct link to toList() method">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11-1">Java 11<a href="#java-11-1" class="hash-link" aria-label="Direct link to Java 11" title="Direct link to Java 11">​</a></h4><p>이 부분도 정말 편의성이 높다고 생각하는 부분 중 하나인데요</p><p>Collectors.toList() 대신 toList() 만으로도 사용이 가능합니다</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class ToListWith11 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; list = List.of(1, 2, 3, 4, 5);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; result = list.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .filter(i -&gt; i &gt; 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .collect(Collectors.toList());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17">Java 17<a href="#java-17" class="hash-link" aria-label="Direct link to Java 17" title="Direct link to Java 17">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class ToListWith17 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; list = List.of(1, 2, 3, 4, 5);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        List&lt;Integer&gt; result = list.stream()</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .filter(i -&gt; i &gt; 3)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                .toList();</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="switch-expression">switch expression<a href="#switch-expression" class="hash-link" aria-label="Direct link to switch expression" title="Direct link to switch expression">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11-2">Java 11<a href="#java-11-2" class="hash-link" aria-label="Direct link to Java 11" title="Direct link to Java 11">​</a></h4><p>우테코에서는 switch, case 를 싫어하기에 볼 수는 없겠지만</p><p>switch 문에도 정말 편하게 바뀌었는데요</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class SwitchWith11 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String day = "Sunday";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        switch (day) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Monday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Tuesday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Wednesday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 3;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Thursday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 4;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Friday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Saturday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 6;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Sunday":</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result = 7;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                break;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-1">Java 17<a href="#java-17-1" class="hash-link" aria-label="Direct link to Java 17" title="Direct link to Java 17">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class SwitchWith17 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String day = "Sunday";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int result = switch (day) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Monday" -&gt; 1;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Tuesday" -&gt; 2;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Wednesday" -&gt; 3;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Thursday" -&gt; 4;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Friday" -&gt; 5;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Saturday" -&gt; 6;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            case "Sunday" -&gt; 7;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            default -&gt; 0;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        };</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>코드 량이 엄청 줄어든 것을 확인하실 수 있습니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="instanceof-pattern-matching">instanceof pattern matching<a href="#instanceof-pattern-matching" class="hash-link" aria-label="Direct link to instanceof pattern matching" title="Direct link to instanceof pattern matching">​</a></h3><p>물론 instanceof 를 사용할 경우가 많은가? 하면 많지는 않겠지만</p><p>아래와 같이 변경되었습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11-3">Java 11<a href="#java-11-3" class="hash-link" aria-label="Direct link to Java 11" title="Direct link to Java 11">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class InstanceOfWith11 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Object obj = "Hello";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (obj instanceof String) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            String str = (String) obj;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(str.toUpperCase());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-2">Java 17<a href="#java-17-2" class="hash-link" aria-label="Direct link to Java 17" title="Direct link to Java 17">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class InstanceOfWith17 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        Object obj = "Hello";</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        if (obj instanceof String str) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            System.out.println(str.toUpperCase());</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="number-format">number format<a href="#number-format" class="hash-link" aria-label="Direct link to number format" title="Direct link to number format">​</a></h3><p>이 기능은 12에 나왔는데요</p><p>언어별로 숫자를 표현하는 방식이 다르지만, 쉽게 표현할 수 있도록 도와주는 기능입니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-3">Java 17<a href="#java-17-3" class="hash-link" aria-label="Direct link to Java 17" title="Direct link to Java 17">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class NumberFormatterWith11 {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public static void main(String[] args) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        int number = 1_000_000;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        String result = NumberFormat.getCompactNumberInstance(Locale.KOREA, NumberFormat.Style.LONG).format(number);</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        System.out.println(result.equals("100만"));</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>나머지 부분은 사실 그렇게 큰 역할을 할 것 같지는 않아서 생략하겠습니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="숨겨진-부분들">숨겨진 부분들<a href="#숨겨진-부분들" class="hash-link" aria-label="Direct link to 숨겨진 부분들" title="Direct link to 숨겨진 부분들">​</a></h2><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FXhFJg%2Fbtsl9uZOa5R%2FrzrlotCERUqAWM2pknDwq0%2Fimg.png" alt="gc throughput" class="img_ev3q"></p><p>위의 사진은 gc 의 버전별 처리량입니다.</p><p>G1 GC 를 기준으로 본다면 Java8 과의 차이는 15% 정도 향상되었고, java 11과는 10% 정도 향상되었습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FZusmb%2Fbtsl5jYN68u%2FWCKRCFnYjQK4AjkcHRNAt0%2Fimg.png" alt="gc latency" class="img_ev3q"></p><p>위의 사진은 gc의 버전별 지연시간입니다.</p><p>G1 GC 를 기준으로 본다면 Java8 과의 차이는 30% 정도 향상되었고, java 11과는 25% 정도 향상되었습니다.</p><p>이와 같이, 단순하게 새로운 기능만 추가되는 것이 아니라 꾸준히 성능도 향상되고 있습니다.</p><p>이런 부분을 고려했을 때, Java 17을 사용하는 것이 좋을 것 같습니다.</p><p>참고</p><ul><li><a href="https://kstefanj.github.io/2021/11/24/gc-progress-8-17.html" target="_blank" rel="noopener noreferrer">https://kstefanj.github.io/2021/11/24/gc-progress-8-17.html</a></li></ul>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="java17" term="java17"/>
        <category label="java11" term="java11"/>
        <category label="record" term="record"/>
        <category label="toList" term="toList"/>
        <category label="gc" term="gc"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[git branch 전략 작성해보기]]></title>
        <id>https://car-ffenien.github.io/2</id>
        <link href="https://car-ffenien.github.io/2"/>
        <updated>2023-07-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[현재 상황은 어떤데?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="현재-상황은-어떤데">현재 상황은 어떤데?<a href="#현재-상황은-어떤데" class="hash-link" aria-label="Direct link to 현재 상황은 어떤데?" title="Direct link to 현재 상황은 어떤데?">​</a></h2><p>현재 우아한테크코스에서는 프론트 코드와 백엔드 코드가 같은 레포지토리를 사용하고 있습니다.</p><p>프론트와 백엔드가 같이 작업하기에, 의도치 않은 충돌이 자주 생길 수 있는 구조이기에, 이를 git branch 전략으로 충돌을 줄이고자 합니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-branch-전략이란">Git Branch 전략이란?<a href="#git-branch-전략이란" class="hash-link" aria-label="Direct link to Git Branch 전략이란?" title="Direct link to Git Branch 전략이란?">​</a></h2><p>git을 사용해서 소프트웨어 개발을 관리하는 방법입니다.</p><p>여러 개발자가 동시에 작업하고 코드를 통합할 때 생기는 충돌을 효율적으로 조정하기 위한 방법입니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="왜-git-branch-전략이-중요한데">왜 git branch 전략이 중요한데?<a href="#왜-git-branch-전략이-중요한데" class="hash-link" aria-label="Direct link to 왜 git branch 전략이 중요한데?" title="Direct link to 왜 git branch 전략이 중요한데?">​</a></h2><p>아래에 있는 4가지를 제외하고도 훨씬 많은 장점이 있을 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-동시-작업이-편하다">1<!-- -->.<!-- --> 동시 작업이 편하다<a href="#1-동시-작업이-편하다" class="hash-link" aria-label="Direct link to 1-동시-작업이-편하다" title="Direct link to 1-동시-작업이-편하다">​</a></h4><p>여러 사람이 독립적으로 작업하고, 커밋을 할 때, 자신의 브랜치에서 변경 사항을 커밋하게 됩니다.</p><p>브랜치가 병합될 때만 충돌을 해결하면 되니, 아무 규칙이 없는 것보다 충돌 시점이 명확해지기에 생산성을 높일 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-목적이-명확한-브랜치">2<!-- -->.<!-- --> 목적이 명확한 브랜치<a href="#2-목적이-명확한-브랜치" class="hash-link" aria-label="Direct link to 2-목적이-명확한-브랜치" title="Direct link to 2-목적이-명확한-브랜치">​</a></h4><p>애플리케이션의 상태에 몇 가지가 있는데, 안정된 프로덕션, 테스트 환경, 기능 추가 환경... 등이 있습니다</p><p>여러 기능별 브랜치(안정된 버전의 코드만이 관리되는 브랜치, 테스트 환경을 위한 브랜치, 기능 추가를 위한 브랜치)를</p><p>네이밍을 통해 구분하면 각각의 브랜치에 대해서 추가적인 설명을 할 필요 없이 명확하게 관리할 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-배포-파이프라인-관리가-편함">3<!-- -->.<!-- --> 배포 파이프라인 관리가 편함<a href="#3-배포-파이프라인-관리가-편함" class="hash-link" aria-label="Direct link to 3-배포-파이프라인-관리가-편함" title="Direct link to 3-배포-파이프라인-관리가-편함">​</a></h4><p>브랜치가 네이밍으로 명확하게 구분이 되어있다면, 조건을 설정하기 쉽습니다.</p><p>특정 타입의 브랜치에 push 되었을 때, pull request를 만들었을 때 같은 조건에 따른 스크립트를 만들어둔다면 CI/CD를 구축하기 쉽습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-버전-관리가-편리하다">4<!-- -->.<!-- --> 버전 관리가 편리하다<a href="#4-버전-관리가-편리하다" class="hash-link" aria-label="Direct link to 4-버전-관리가-편리하다" title="Direct link to 4-버전-관리가-편리하다">​</a></h4><p>서버에 문제가 생겼을 때, 어떤 브랜치로 돌아가서 롤백을 해야 하는지에 대한 것들이 명확합니다.</p><p>안정된 브랜치가 어떤 것인지 명확하기에, 롤백 과정에 대한 의사결정을 줄일 수 있습니다.</p><p>그러면 어떤 종류가 있는지 더 자세하게 알아보도록 하겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-branch-전략의-종류는">Git Branch 전략의 종류는?<a href="#git-branch-전략의-종류는" class="hash-link" aria-label="Direct link to Git Branch 전략의 종류는?" title="Direct link to Git Branch 전략의 종류는?">​</a></h2><p>총 3가지의 전략이 있습니다.</p><p>1<!-- -->.<!-- --> Github Flow</p><p>2<!-- -->.<!-- --> Gitlab Flow</p><p>3<!-- -->.<!-- --> Git Flow</p><p>git을 사용하기에, Git Flow라는 네이밍이 가장 직관적이고 유명한데요.&nbsp;</p><p>3가지 전략 중에서 가장 복잡하기에, 쉬운 순서대로 진행해 보도록 하겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-github-flow">1<!-- -->.<!-- --> Github Flow<a href="#1-github-flow" class="hash-link" aria-label="Direct link to 1-github-flow" title="Direct link to 1-github-flow">​</a></h2><p>그림으로 flow 간단하게 보고 가도록 하겠습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FblgfI6%2FbtslEWRFdaJ%2F3KmwR2yqlfgKk0msnufYNk%2Fimg.png" alt="img" class="img_ev3q"></p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbtUzxm%2FbtslJ1xWHzy%2FMP0s11FoCTKpqwQnUJUm30%2Fimg.png" alt="img2" class="img_ev3q"></p><p>브랜치는 총 2가지 종류가 존재합니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-master-브랜치">1<!-- -->.<!-- --> master 브랜치<a href="#1-master-브랜치" class="hash-link" aria-label="Direct link to 1-master-브랜치" title="Direct link to 1-master-브랜치">​</a></h4><p>여기에 머지가 되면 배포가 되도록 CD를 연결해 놓은 경우가 많습니다.</p><p>안정된 버전의 코드가 관리되는 브랜치입니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-feature-브랜치">2<!-- -->.<!-- --> feature 브랜치<a href="#2-feature-브랜치" class="hash-link" aria-label="Direct link to 2-feature-브랜치" title="Direct link to 2-feature-브랜치">​</a></h4><p>기능 추가, 버그 수정 등 모든 작업은 feature 브랜치에서 일어납니다.</p><p>master 브랜치에서 새로운 브랜치를 만들어서, 마스터로 머지되는 단순한 사이클을 가지고 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="장점">장점<a href="#장점" class="hash-link" aria-label="Direct link to 장점" title="Direct link to 장점">​</a></h4><p>위에서 볼 수 있는 것처럼 2종류의 브랜치만 있기에, 정말 간단합니다.</p><p>학습 과정까지의 러닝 커브가 거의 없다시피 하기에, 간단한 프로젝트에 적용하기 정말 좋습니다.</p><p>릴리즈 되지 않은 코드가 최소화됩니다. 최신 버전의 코드와 최대한 빠르게 동기화를 계속해서 시킬 수 있습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="단점">단점<a href="#단점" class="hash-link" aria-label="Direct link to 단점" title="Direct link to 단점">​</a></h4><p>모든 코드는 다 master 브랜치에 머지가 되어야 한다는 점이 개발 서버와, 운영서버를 나누기 애매할 수 있습니다.</p><p>개발 서버에 배포를 하고 싶은 상황이라면, master에 머지가 되어야 합니다.</p><p>머지가 된 이후에 cd 파이프라인을 통해서 개발 서버와 운영 서버 모두에 배포가 됩니다.</p><p>여러 환경을 나누고 관리를 하고 싶으시다면 다음에 소개해드릴 전략을 사용해 보셔도 좋을 것 같습니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-gitlab-flow">2<!-- -->.<!-- --> Gitlab Flow<a href="#2-gitlab-flow" class="hash-link" aria-label="Direct link to 2-gitlab-flow" title="Direct link to 2-gitlab-flow">​</a></h2><p>그림으로 flow 간단하게 보고 가도록 하겠습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fdlarwn%2FbtslKkYqqTR%2FXi8NnZIEXahoVFusk0xV31%2Fimg.png" alt="img2" class="img_ev3q"></p><p>밑에 환경은 총 2개의 서버가 존재할 때를 가정하고 있습니다.</p><p>1<!-- -->.<!-- --> pre-production 서버</p><p>2<!-- -->.<!-- --> production 서버</p><p>편의를 위해 main에 머지되는 과정은 간단하게 표현했습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdbkNc9%2FbtslJ0MBrWb%2F0CT7DVQoCDFOpbqyAko9mk%2Fimg.png" alt="img3" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="브랜치-종류">브랜치 종류<a href="#브랜치-종류" class="hash-link" aria-label="Direct link to 브랜치 종류" title="Direct link to 브랜치 종류">​</a></h4><p>총 3가지 브랜치가 필요하고, 추가에 따라서 더 추가할 수 있습니다.</p><p>1<!-- -->.<!-- --> main(or develop) 브랜치</p><p>기능에 대한 개발이 완료되었지만, 여기에 머지되어도 바로 배포되지는 않습니다.</p><p>2<!-- -->.<!-- --> feature브랜치</p><p>기능을 개발하는 브랜치입니다. Github Flow 와도 유사합니다.</p><p>3<!-- -->.<!-- --> production 브랜치</p><p>실제 배포가 일어나는 브랜치입니다.&nbsp;</p><p>여기에 머지가 되는 순간 배포가 일어납니다.</p><p>위 사진에 있는 것처럼, 필요에 따라서 pre-production이나, staging 같은 환경에 따른 브랜치를 추가할 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="특징">특징<a href="#특징" class="hash-link" aria-label="Direct link to 특징" title="Direct link to 특징">​</a></h4><p>1<!-- -->.<!-- --> 무조건 단방향으로 머지가 일어납니다.</p><p>긴급하게 라이브 서버에 수정을 해야 할 때, production 부터 시작하는 것이 아닌, main 부터 차근차근 올라가야 합니다</p><p>2<!-- -->.<!-- --> 환경에 따라 브랜치 종류가 늘어날 수 있습니다.</p><p>위 사진에서는 pre-production 이 그 예시가 되겠네요.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="장점-1">장점<a href="#장점-1" class="hash-link" aria-label="Direct link to 장점" title="Direct link to 장점">​</a></h4><p>1<!-- -->.<!-- --> Github Flow에서 환경별 브랜치를 통해서 개발 서버나 pre-production 서버에 버전을 깔끔하게 관리할 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-git-flow">3<!-- -->.<!-- --> Git Flow<a href="#3-git-flow" class="hash-link" aria-label="Direct link to 3-git-flow" title="Direct link to 3-git-flow">​</a></h2><p>브랜치 전략 중 가장 처음으로 유명해진 브랜치 전략입니다.</p><p>배포가 특정 주기를 가지고 있는 애플리케이션일 때, 가장 적합합니다.</p><p>가장 복잡한 전략을 가지고 있어서, 모두가 브랜치 전략에 대해서 이해하고 있다면 역할에 따른 깔끔한 분리가 가능합니다</p><p>그림으로 보고 가도록 하겠습니다</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fd9WzKn%2FbtslKdkAHNP%2F2fCAqKSVxtPVWqYnBS8juk%2Fimg.png" alt="img4" class="img_ev3q"></p><p>가장 유명한 브랜치 전략이지만, 가장 어려운 전략이기도 합니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="특징-1">특징<a href="#특징-1" class="hash-link" aria-label="Direct link to 특징" title="Direct link to 특징">​</a></h4><p>1<!-- -->.<!-- --> 브랜치에 대해서 양방향으로 머지가 일어납니다</p><p>release 브랜치에서 버그 수정이 일어나면, develop 브랜치에도 머지해줘야 합니다.</p><p>hotfix 브랜치를 main 브랜치뿐만 아니라, develop 브랜치에도 머지해줘야 합니다</p><p>브랜치의 종류가 5가지나 됩니다</p><p>1<!-- -->.<!-- --> main</p><p>production 이 배포되었을 때, 이 브랜치에 머지되는 것이 기준이 됩니다.</p><p>2<!-- -->.<!-- --> develop&nbsp;</p><p>위에서 설명드렸던 브랜치들과 큰 차이가 없이 배포 전 브랜치입니다.</p><p>3<!-- -->.<!-- --> feature</p><p>기능을 개발할 때 사용하는 브랜치입니다. 이것도 위와 큰 차이가 없습니다</p><p>4<!-- -->.<!-- --> release</p><p>Gitlab Flow에서 pre-production에 해당한다고 봐도 무방합니다.</p><p>여기서 버그 수정이 일어났을 경우에,&nbsp; develop에 머지하는 것을 까먹으면 안 됩니다.</p><p>5<!-- -->.<!-- --> hotfix</p><p>main 브랜치에서 생성된 브랜치로, 긴급한 변경사항을 처리합니다.</p><p>이때, develop에 머지하는 것을 깜빡하면 안 됩니다.</p><p>더 자세하게 알아보실 분은 아래 링크들을 확인해 보세요</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="우리-프로젝트에는-어떤-것이-적절할까">우리 프로젝트에는 어떤 것이 적절할까?<a href="#우리-프로젝트에는-어떤-것이-적절할까" class="hash-link" aria-label="Direct link to 우리 프로젝트에는 어떤 것이 적절할까?" title="Direct link to 우리 프로젝트에는 어떤 것이 적절할까?">​</a></h2><p>나중에 개발 서버 혹은 스테이징 서버를 두고 싶기에, 이 부분에 대한 처리가 부족한 Github Flow는 적절하지 않습니다.</p><p>Git Flow는 깔끔하게 처리할 수 있지만, 러닝 커브가 Gitlab Flow 보다 약간 더 있어서, 빠르게 개발하는 취지에 맞지 않아 보였습니다.</p><p>이런 과정을 통해서 Gitlab Flow를 사용하려고 합니다&nbsp;</p><p>참고</p><p><a href="https://techblog.woowahan.com/2553/" target="_blank" rel="noopener noreferrer">https://techblog.woowahan.com/2553/</a></p><p><a href="https://docs.gitlab.com/ee/topics/gitlab_flow.html" target="_blank" rel="noopener noreferrer">https://docs.gitlab.com/ee/topics/gitlab<!-- -->_<!-- -->flow.html</a></p>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="git" term="git"/>
        <category label="branch" term="branch"/>
        <category label="git branch" term="git branch"/>
        <category label="github flow" term="github flow"/>
        <category label="gitlab flow" term="gitlab flow"/>
        <category label="git flow" term="git flow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://car-ffenien.github.io/1</id>
        <link href="https://car-ffenien.github.io/1"/>
        <updated>2023-06-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요</p>]]></content>
        <author>
            <name>박스터</name>
            <uri>https://github.com/drunkenhw</uri>
        </author>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <author>
            <name>제이</name>
            <uri>https://github.com/sosow0212</uri>
        </author>
        <author>
            <name>키아라</name>
            <uri>https://github.com/kiarakim</uri>
        </author>
        <author>
            <name>야미</name>
            <uri>https://github.com/feb-dain</uri>
        </author>
        <author>
            <name>센트</name>
            <uri>https://github.com/kyw0716</uri>
        </author>
        <author>
            <name>가브리엘</name>
            <uri>https://github.com/gabrielyoon7</uri>
        </author>
        <category label="hello" term="hello"/>
        <category label="world" term="world"/>
    </entry>
</feed>