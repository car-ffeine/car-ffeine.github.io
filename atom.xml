<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://car-ffeine.github.io/</id>
    <title>CAR-FFEINE Blog</title>
    <updated>2023-07-23T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://car-ffeine.github.io/"/>
    <subtitle>CAR-FFEINE Blog</subtitle>
    <entry>
        <title type="html"><![CDATA[private 서브넷에 인스턴스를 외부와 연결할 때, public ip? private ip?]]></title>
        <id>https://car-ffeine.github.io/18</id>
        <link href="https://car-ffeine.github.io/18"/>
        <updated>2023-07-23T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[어떤 문제가 있었나요?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="어떤-문제가-있었나요">어떤 문제가 있었나요?<a href="#어떤-문제가-있었나요" class="hash-link" aria-label="어떤 문제가 있었나요?에 대한 직접 링크" title="어떤 문제가 있었나요?에 대한 직접 링크">​</a></h2><p>우아한테크코스에서 private 서브넷에 db 인스턴스를 두고, 보안을 위해 외부에서 접속을 차단하려고 했습니다.</p><p>이 과정에서 총 2가지의 문제점이 있었습니다.</p><ol><li>private 서브넷에 인스턴스가 인터넷에서 mysql을 설치할 수 없었습니다.</li><li>public 서브넷에 있는 인스턴스에서 private 서브넷에 있는 인스턴스에 접속이 안되었습니다.</li></ol><p>이 부분을 어떻게 해결했는지 알아보도록 하겠습니다.</p><p>아래의 모든 설명은 AWS 를 기준으로 합니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="private-서브넷에-인스턴스가-인터넷에서-mysql을-설치할-수-없었다">private 서브넷에 인스턴스가 인터넷에서 mysql을 설치할 수 없었다.<a href="#private-서브넷에-인스턴스가-인터넷에서-mysql을-설치할-수-없었다" class="hash-link" aria-label="private 서브넷에 인스턴스가 인터넷에서 mysql을 설치할 수 없었다.에 대한 직접 링크" title="private 서브넷에 인스턴스가 인터넷에서 mysql을 설치할 수 없었다.에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="해결-방법">해결 방법<a href="#해결-방법" class="hash-link" aria-label="해결 방법에 대한 직접 링크" title="해결 방법에 대한 직접 링크">​</a></h3><p>public ip 자동할당을 해주지 않아서, 인터넷에 연결이 안 되었습니다.</p><p>이를 해결하기 위해 public ip 자동할당을 해주었습니다.</p><p>왜 public ip를 할당했더니 문제가 해결되었을까요?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="private-서브넷이란">private 서브넷이란?<a href="#private-서브넷이란" class="hash-link" aria-label="private 서브넷이란?에 대한 직접 링크" title="private 서브넷이란?에 대한 직접 링크">​</a></h2><p>정말 간단하게 설명했을 때</p><p>private 서브넷은 인터넷에 연결되지 않은 서브넷입니다.</p><p>조금 자세하게 들어가 보도록 하겠습니다</p><p>private 서브넷은 인터넷 게이트웨이가 연결되지 않은 서브넷입니다.</p><p>aws 공식문서에서 사진을 통해 보면 아래와 같이 되어있습니다</p><p><img loading="lazy" src="https://docs.aws.amazon.com/ko_kr/vpc/latest/userguide/images/internet-gateway-basics.png" alt="private subnet" class="img_ev3q"></p><p>public 서브넷에만 인터넷 게이트웨이가 연결되어 있고, private 서브넷에는 인터넷 게이트웨이가 연결되어있지 않습니다.</p><p>private 서브넷에 인터넷 게이트웨이가 연결되어 있지 않다고 했을 때, 기본적으로 인터넷에 접속이 안됩니다.</p><p>mysql을 설치할 때도, 인터넷에 접속을 해야하는데, 인터넷에 접속이 안되니 설치가 안되는 것입니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어-인터넷-자체가-접근이-안되면-어떻게-설치하나요">어? 인터넷 자체가 접근이 안되면 어떻게 설치하나요?<a href="#어-인터넷-자체가-접근이-안되면-어떻게-설치하나요" class="hash-link" aria-label="어? 인터넷 자체가 접근이 안되면 어떻게 설치하나요?에 대한 직접 링크" title="어? 인터넷 자체가 접근이 안되면 어떻게 설치하나요?에 대한 직접 링크">​</a></h3><p>정말 원시적으로 해결하기 위해서는 public 서브넷에 인스턴스를 하나 더 만들어서, mysql 을 압축해서 scp를 통해 private 서브넷에 있는 인스턴스에 전송하고, 압축을 풀어서 설치하는 방법이 있습니다.</p><p>하지만 이 방법은 너무 원시적이고, 비효율적입니다.</p><p>그래서 인터넷으로 요청을 보낼 수 있도록 만드는 과정이 필요합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="인터넷으로-요청을-보낼-수-있도록-만드는-과정">인터넷으로 요청을 보낼 수 있도록 만드는 과정<a href="#인터넷으로-요청을-보낼-수-있도록-만드는-과정" class="hash-link" aria-label="인터넷으로 요청을 보낼 수 있도록 만드는 과정에 대한 직접 링크" title="인터넷으로 요청을 보낼 수 있도록 만드는 과정에 대한 직접 링크">​</a></h3><p>인터넷으로 요청을 보낼 수 있도록 만드는 과정은 크게 2가지가 있습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="private-서브넷을-public-서브넷으로-바꾸기">private 서브넷을 public 서브넷으로 바꾸기<a href="#private-서브넷을-public-서브넷으로-바꾸기" class="hash-link" aria-label="private 서브넷을 public 서브넷으로 바꾸기에 대한 직접 링크" title="private 서브넷을 public 서브넷으로 바꾸기에 대한 직접 링크">​</a></h3><p>보안을 위해서 private 서브넷에 두려고 했던 것을 public 서브넷으로 바꾼다는 부분은 매우 위험합니다.</p><p>그래서 이 방법은 보통 사용하지 않습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="nat-인스턴스gateway-만들기">NAT 인스턴스(Gateway) 만들기<a href="#nat-인스턴스gateway-만들기" class="hash-link" aria-label="NAT 인스턴스(Gateway) 만들기에 대한 직접 링크" title="NAT 인스턴스(Gateway) 만들기에 대한 직접 링크">​</a></h3><p>NAT 인스턴스는 private 서브넷에 있는 인스턴스가 인터넷에 접속할 수 있도록 만들어주는 인스턴스입니다.</p><p>인터넷에 접속을 하기 위해서는 public ip 가 필요합니다.</p><p>따라서 NAT 인스턴스, NAT 게이트웨이는 public 서브넷에 존재해야 합니다.</p><p>어? NAT 인스턴스를 통해서 바로 통신이 가능하면 왜 private 서브넷이 필요한가요? 그냥 다 public 서브넷에 두면 되지 않나요?</p><p>NAT 인스턴스, NAT Gateway는 내부에서 출발한 트래픽만 통과할 수 있도록 설정이 되어있습니다.</p><p>예를 들면 private 서브넷에 인스턴스에 접속해서 직접 mysql download 요청을 했을 때만 허용이 됩니다.</p><p>외부에서 바로 private 인스턴스로 접근할 수는 없습니다.</p><p>NAT 인스턴스만 설정을 하면 바로 연결이 되나요?</p><p>public ip도 자동 할당을 해줘야 합니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="public-ip-가-필요한-이유">public ip 가 필요한 이유<a href="#public-ip-가-필요한-이유" class="hash-link" aria-label="public ip 가 필요한 이유에 대한 직접 링크" title="public ip 가 필요한 이유에 대한 직접 링크">​</a></h3><p>NAT 인스턴스를 통해서 private 서브넷에 있는 인스턴스가 인터넷에 접속할 수 있도록 만들었는데, 왜 public ip 가 필요할까요?</p><p>외부 인터넷과 통신을 할 때 public ip 가 필요합니다.</p><p>NAT 인스턴스 혹은 NAT 게이트웨이가 인터넷과 통신할 때, NAT 인스턴스의 public ip + private ip를 통해서 통신을 하지 않습니다.</p><p>내부 인스턴스의 public ip 를 통해서 통신을 하게 되어있습니다.</p><p>따라서 NAT 인스턴스와 내부 인스턴스 모두 public ip 가 필요합니다.</p><p>이 과정을 통해서 1번 문제를 해결할 수 있었습니다.</p><p>이제 2번째 문제를 해결해 보도록 하겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="public-서브넷에-있는-인스턴스에서-private-서브넷에-있는-인스턴스에-접속이-안-되는-문제">public 서브넷에 있는 인스턴스에서 private 서브넷에 있는 인스턴스에 접속이 안 되는 문제<a href="#public-서브넷에-있는-인스턴스에서-private-서브넷에-있는-인스턴스에-접속이-안-되는-문제" class="hash-link" aria-label="public 서브넷에 있는 인스턴스에서 private 서브넷에 있는 인스턴스에 접속이 안 되는 문제에 대한 직접 링크" title="public 서브넷에 있는 인스턴스에서 private 서브넷에 있는 인스턴스에 접속이 안 되는 문제에 대한 직접 링크">​</a></h2><p>public 서브넷에 있는 서버가 private 서브넷에 있는 서버에 접속을 하려고 했는데, 접속이 안 되는 문제가 있었습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="해결-방법-1">해결 방법<a href="#해결-방법-1" class="hash-link" aria-label="해결 방법에 대한 직접 링크" title="해결 방법에 대한 직접 링크">​</a></h3><p>해결 방법에는 2가지 과정이 있습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="public-서브넷에-있는-인스턴스의-보안-그룹에-private-서브넷에-있는-인스턴스의-보안-그룹을-추가해-주기">public 서브넷에 있는 인스턴스의 보안 그룹에 private 서브넷에 있는 인스턴스의 보안 그룹을 추가해 주기<a href="#public-서브넷에-있는-인스턴스의-보안-그룹에-private-서브넷에-있는-인스턴스의-보안-그룹을-추가해-주기" class="hash-link" aria-label="public 서브넷에 있는 인스턴스의 보안 그룹에 private 서브넷에 있는 인스턴스의 보안 그룹을 추가해 주기에 대한 직접 링크" title="public 서브넷에 있는 인스턴스의 보안 그룹에 private 서브넷에 있는 인스턴스의 보안 그룹을 추가해 주기에 대한 직접 링크">​</a></h3><p>기본적으로 public 서브넷에 있는 인스턴스의 보안 그룹에는 private 서브넷에 있는 인스턴스의 보안 그룹이 추가되어있지 않습니다.</p><p>따라서 public 서브넷에 있는 인스턴스의 보안 그룹에 private 서브넷에 있는 인스턴스의 보안 그룹을 추가해주어야 합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="private-ip를-통해서-접속하기">private ip를 통해서 접속하기<a href="#private-ip를-통해서-접속하기" class="hash-link" aria-label="private ip를 통해서 접속하기에 대한 직접 링크" title="private ip를 통해서 접속하기에 대한 직접 링크">​</a></h3><p>public 서브넷에 있는 인스턴스가 private 서브넷에 있는 인스턴스에 접속할 때, public ip 를 통해서 접속을 하면 안 됩니다.</p><p>public ip를 통해서 접속하는 과정을 자세하게 알아보겠습니다.</p><ol><li>public 서브넷에 있는 인스턴스가 public ip 를 통해서 private 서브넷에 있는 인스턴스에 접속을 시도합니다.</li><li>라우팅 테이블에서 public ip 일 경우에 어떻게 처리할지에 대한 정보를 찾습니다.</li><li>라우터를 통해서 외부 인터넷으로 나가게 됩니다.</li><li>트래픽이 NAT 인스턴스에 도착합니다.</li><li>NAT 인스턴스는 내부에서 출발한 트래픽이 아니기 때문에, 트래픽을 거부합니다.</li></ol><p>이 과정이 일어나기에, public ip 를 통해서 접속을 하면 안 됩니다.</p><p>private ip를 통해서 접근하면 어떻게 되는지 알아보겠습니다</p><ol><li>public 서브넷에 있는 인스턴스가 private ip 를 통해서 private 서브넷에 있는 인스턴스에 접속을 시도합니다.</li><li>라우팅 테이블에서 private ip 일 경우에 어떻게 처리할지에 대한 정보를 찾습니다.</li><li>라우터를 거쳐서 private 서브넷의 라우터로 이동합니다.</li><li>private 서브넷의 라우터는 private 서브넷에 있는 인스턴스에게 트래픽을 전달합니다.</li><li>private 서브넷에 있는 인스턴스는 트래픽을 받아서 처리합니다.</li></ol><p>이 과정을 통해서 2번 문제를 해결할 수 있었습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="요약">요약<a href="#요약" class="hash-link" aria-label="요약에 대한 직접 링크" title="요약에 대한 직접 링크">​</a></h2><ol><li>private 서브넷에 있는 인스턴스가 인터넷에 접속을 하려면 NAT 인스턴스 혹은 NAT 게이트웨이가 필요합니다.</li><li>private 서브넷에 있는 인스턴스도 public ip 가 필요합니다.</li><li>public 서브넷에 있는 인스턴스가 private 서브넷에 있는 인스턴스에 접속을 하려면 private 서브넷에 있는 인스턴스의 보안 그룹을 추가해주어야 합니다.</li><li>public 서브넷에 있는 인스턴스가 private 서브넷에 있는 인스턴스에 접속을 할 때, private ip 를 통해서 접속을 해야 합니다.</li></ol>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="aws" term="aws"/>
        <category label="vpc" term="vpc"/>
        <category label="subnet" term="subnet"/>
        <category label="ip" term="ip"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[카페인 팀의 CI/CD]]></title>
        <id>https://car-ffeine.github.io/17</id>
        <link href="https://car-ffeine.github.io/17"/>
        <updated>2023-07-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요. 카페인 팀의 제이입니다.]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요. 카페인 팀의 제이입니다.
저희 팀에서 CI/CD는 어떻게 진행되는지 작성하겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ci-지속적-통합">CI (지속적 통합)<a href="#ci-지속적-통합" class="hash-link" aria-label="CI (지속적 통합)에 대한 직접 링크" title="CI (지속적 통합)에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/blob/main/ci-cd/ci.png?raw=true" alt="ci" class="img_ev3q"></p><p>카페인 팀에서는 지속적 통합 즉 CI를 진행하기 위해서 위에 사진과 같이 Github Actions를 사용합니다.</p><p>main, develop 브랜치에 Push, Pull Request 요청이 들어간다면 이벤트가 발생하고, Github Actions를 통해 저희가 작성해둔 스크립트가 실행 됩니다.</p><p>이 스크립트에 여러가지를 등록할 순 있지만, 저희는 자동으로 테스트를 진행하도록 하였습니다.
자동으로 테스트를 돌리면서 테스트가 통과를 해야지만 Merge를 진행할 수 있습니다.</p><p>이를 통해 개발자의 실수를 줄일 수 있고 안정적으로 지속적 통합을 이룰 수 있게 됩니다.</p><br><h2 class="anchor anchorWithStickyNavbar_LWe7" id="cd-지속적-배포">CD (지속적 배포)<a href="#cd-지속적-배포" class="hash-link" aria-label="CD (지속적 배포)에 대한 직접 링크" title="CD (지속적 배포)에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/blob/main/ci-cd/cd.png?raw=true" alt="cd" class="img_ev3q"></p><p>저희의 지속적 배포 아키텍처입니다.</p><strong>순서를 요약하자면 다음과 같습니다.</strong><ol><li>Release 브랜치에 Push를 한다.</li><li>Github Actions를 통해 Docker Hub에 레포지토리의 소스코드를 Docker Image로 빌드해서 Push 한다.</li><li>인프라 서버에서 Self Hosted Runner가 작동한다.</li><li>인프라 서버에서 배포 서버로 들어간다.</li><li>배포 서버 안에서 Docker Hub에 미리 업로드한 Docker Image를 Pull 해온다.</li><li>배포 서버 안에서 Docker Image를 컨테이너에 띄운다.</li></ol><br><h3 class="anchor anchorWithStickyNavbar_LWe7" id="배포-자동화-툴-선택하기">배포 자동화 툴 선택하기<a href="#배포-자동화-툴-선택하기" class="hash-link" aria-label="배포 자동화 툴 선택하기에 대한 직접 링크" title="배포 자동화 툴 선택하기에 대한 직접 링크">​</a></h3><p>먼저 배포 자동화 과정을 구축하기 위해서 여러가지 툴이 있습니다.</p><p>Travis, Jenkins, Github Actions 등등 여러가지가 있는데요.
저희 팀은 <code>Github Actions</code>를 선택했습니다.</p><p>이를 선택한 여러가지 이유가 있었지만
저희 팀 누누를 제외하고 CI/CD 경험이 부족해서 비교적 쉽고 설치 및 큰 세팅이 없는 점이 저희한테는 매력적으로 다가왔습니다.</p><p>또한 Docker를 사용하는데, 이유는 다음과 같습니다.</p><ol><li>JDK 혹은 Node 버전을 관리할 수 있다.</li><li>Docker Image를 빌드한 후 배포하기 때문에 서버 환경 차이로 발생하는 문제를 최소화할 수 있다.</li><li>배포 서버에서 Docker만 설치하고 Image를 받고 실행시키면 돼서 빠르고 쉽게 배포 환경을 구축할 수 있다.</li></ol><br><h3 class="anchor anchorWithStickyNavbar_LWe7" id="과정">과정<a href="#과정" class="hash-link" aria-label="과정에 대한 직접 링크" title="과정에 대한 직접 링크">​</a></h3><p>본격적으로 저희의 배포 자동화를 구축하는 과정을 설명하겠습니다.</p><br><strong>1. Github Actions에 Runners 등록</strong><p><img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/blob/main/ci-cd/selfHosted.png?raw=true" alt="runner" class="img_ev3q">
먼저 Self Hosted Runner를 이용하기 때문에 저희는 위에 사진과 같이 Runners를 등록을 해줬습니다.</p><p>이를 등록을 할 때 제공해주는 설정 코드가 나오는데요.
이 코드들을 infra 서버에 모두 입력을 해주면서 설정을 해주시면 됩니다.</p><br><strong>2. Github workflow 만들기</strong>다음으로는 저희가 수행하고자 하는 Task를 등록해주기 위해서 yml 파일을 만들어줍니다.<p>yml 파일의 경로는 <code>./github/workflows/</code> 안에 만들어주면 됩니다.</p><div class="language-yaml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yaml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> deploy</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># release/backend push 할 때</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">push</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> release/backend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token comment" style="color:#999988;font-style:italic"># Docker</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">docker-build</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">runs-on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ubuntu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">defaults</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">working-directory</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ./backend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># Docker Hub 로그인</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Log in to Docker Hub</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> docker/login</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">action@f4ef78c080cd8ba55a85445d5b36e214a81df20a</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">username</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.DOCKERHUB_USERNAME </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">password</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.DOCKERHUB_PASSWORD </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/checkout@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Set up JDK 17</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/setup</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">java@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">java-version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'17'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">distribution</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'adopt'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Gradle Caching</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/cache@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">path</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            ~/.gradle/caches</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            ~/.gradle/wrapper</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> runner.os </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">gradle</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">$</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> hashFiles('</span><span class="token important">**/*.gradle*'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> '</span><span class="token important">**/gradle-wrapper.properties')</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">restore-keys</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            ${{ runner.os }}-gradle-</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Grant execute permission for gradlew</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chmod +x gradlew</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Build with Gradle</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ./gradlew bootjar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Extract metadata (tags</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> labels) for Docker</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> meta</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> docker/metadata</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">images</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Docker Hub 사용자명/이미지 이름</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token comment" style="color:#999988;font-style:italic"># Build 및 Docker image를 Docker Hub에 push</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Build and push Docker image</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> docker/build</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">push</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">action@3b5e8027fcad23fda98b2e3ac259d8d67585f671</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">context</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> .</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">file</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ./backend/Dockerfile</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">push</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token boolean important" style="color:#36acaa">true</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">platforms</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> linux/arm64</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">tags</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> woowacarffeine/backend</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain">latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">labels</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> steps.meta.outputs.labels </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">deploy</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">runs-on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> self</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">hosted</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">if</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> needs.docker</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">build.result == 'success' </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">needs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> docker</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">build </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># EC2 배포 서버로 접속</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Join EC2 dev server</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> appleboy/ssh</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">action@master</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">env</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">JASYPT_KEY</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.JASYPT_KEY </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">host</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.SERVER_HOST </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">username</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.SERVER_USERNAME </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">key</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.SERVER_KEY </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">port</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.SERVER_PORT </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">envs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> JASYPT_KEY</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># 1. 도커 이미지 받기</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># 2. 기존에 켜진 백엔드 서버(도커 이미지) stop</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># 3. 최신 백엔드 서버 run</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic"># 4. 사용하지 않는 이미지와 컨테이너 삭제</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">script</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            sudo docker pull woowacarffeine/backend:latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            sudo docker stop backend || true</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            sudo docker run -d --rm -p 8080:8080 \</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            -e "ENCRYPT_KEY=${{secrets.JASYPT_KEY}}" \</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            --name backend \</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            Docker Hub 사용자명/이미지 이름:latest</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            sudo docker image prune </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">f</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>저희 팀은 위와 같이 backend-deploy.yml 파일을 만들어주었습니다.</p><p>위에 yml에서 저희는 키를 숨겼는데요.</p><p><img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/blob/main/ci-cd/selfHostedKeys.png?raw=true" alt="img" class="img_ev3q">
위에 사진과 같이 설정을 해주시면 됩니다.</p><p>그리고 이를 yml에서 사용하기 위해선 <code>secrets.Key이름</code>으로 사용해주시면 됩니다.</p><br><p>이제 마지막으로 <code>Dockerfile</code>을 만들어줍니다.</p><p>저희는 <code>/backend/</code> 경로에 만들어주었습니다.</p><div class="language-Dockerfile codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-Dockerfile codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">FROM amazoncorretto:17-alpine-jdk</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ARG JAR_FILE=./backend/build/libs/carffeine-0.0.1-SNAPSHOT.jar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">COPY ${JAR_FILE} app.jar</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">ENTRYPOINT ["java", "-Dspring.profiles.active=dev", "-jar","/app.jar"]</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>저희는 위처럼 절대 경로를 기준으로 JAR_FILE 위치를 지정하고, profiles는 dev로 설정해서 만들어주었습니다.</p><br><strong>3. 배포하기</strong><p>트리거를 작동시켜서 저희가 yml 파일에서 지정해준 것들이 잘 작동하는지 확인합니다.</p><p><img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/blob/main/ci-cd/jobsSuccess.png?raw=true" alt="jobSuccess" class="img_ev3q">
위에 사진처럼 모든 Job이 성공적으로 통과하는 것을 보실 수 있습니다.</p><p><img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/blob/main/ci-cd/success.png?raw=true" alt="dockerPs" class="img_ev3q">
이렇게 인프라 서버에서 배포 서버로 들어가서 성공적으로 서버를 도커로 띄운 것을 보실 수 있습니다.</p><p>EC2 배포 서버에서 <code>docker ps</code>를 입력했을 때에도 잘 실행이 되네요!</p><br><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cd-배포-과정-요약">CD 배포 과정 요약<a href="#cd-배포-과정-요약" class="hash-link" aria-label="CD 배포 과정 요약에 대한 직접 링크" title="CD 배포 과정 요약에 대한 직접 링크">​</a></h3><p>지속적 배포 과정을 요약 하자면 다음과 같습니다.</p><ol><li>Self Hosted Runner를 EC2 인프라 서버에 등록해준다.</li><li>yml 파일과 Dockerfile을 만들어준다.</li><li>트리거를 작동시켜서 Github Actions의 태스크가 모두 잘 되는지 확인한다.</li><li>잘 됐다면 EC2 배포 서버에 Docker image가 성공적으로 띄워진다.</li></ol>]]></content>
        <author>
            <name>제이</name>
            <uri>https://github.com/sosow0212</uri>
        </author>
        <category label="CI" term="CI"/>
        <category label="CD" term="CD"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[JPA에서 ID가 있는 Entity에 대해 save 시에 select 쿼리가 나가는 이유]]></title>
        <id>https://car-ffeine.github.io/16</id>
        <link href="https://car-ffeine.github.io/16"/>
        <updated>2023-07-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요 박스터 입니다.]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요 박스터 입니다.</p><p>먼저 이번에 글을 쓰게된 계기를 말씀드리겠습니다. 저희 팀은 공공 데이터 API에서 받아온 충전소와, 충전기들의 ID를 그대로 사용하고 있습니다.
물론 다른 API, 제가 제어할 수 없는 곳에 의존하는 것은 좋지 않다고 생각합니다.</p><p>하지만 데이터를 받아오는 과정에서 마주한 성능적인 문제 때문에 그대로 사용하고 있습니다. 전국의 충전소는 6만개, 충전소 안에 존재하는 충전기는 23만기입니다.
하지만 공공 데이터는 충전소와, 충전기의 정보를 따로 제공하는 것이 아닌 중복된 충전소를 포함한 데이터를 충전기 개수만큼인 23만개의 row로 제공합니다.</p><p>따라서 저희가 ID를 따로 부여하게 된다면, 충전소를 저장하는 과정에서 받아오는 ID로 충전기를 연결해줘야하는데 그렇게 된다면 셀 수 없이 많은 쿼리가 발생합니다.</p><p>잠깐 생각해본다면</p><ol><li>충전소를 각각 저장하고 ID를 부여받는 쿼리 <code>6만번</code> (ID를 알아와야하기 때문에 batch를 사용할 수 없습니다.)</li><li>충전소에서 받아온 ID를 충전기에 매핑하고 저장하는 쿼리 <code>최소 1번</code> (만약 batch로 23만건을 한번에 저장한다는 가정)</li></ol><p>하지만 ID를 그대로 사용하게 된다면,</p><ol><li>충전소를 저장하는 쿼리 <code>최소 1번</code> (만약 batch로 6만건을 한번에 저장한다는 가정)</li><li>충전기를 저장하는 쿼리 <code>최소 1번</code> (만약 batch로 23만건을 한번에 저장한다는 가정)</li></ol><p>23만건이 넘는 정보를 확인했을 때, ID는 중복되지 않았고, 중복하지 않을 것이라 생각했습니다. 그 뿐만 아니라 처음 한번만 저장하는 것이 아닌 주기적으로 업데이트된 정보를
반영해주고 <code>update</code> or <code>save</code> 해주어야하기 때문에, ID를 그대로 가지고 있는 것이 훨씬 효율적이라 생각했습니다.</p><p>사족이 길었습니다. 각설하고 이런 방식으로 ID를 직접 넣어주는 경우 발생하는 문제에 대해 말씀드리겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="id를-직접-넣어준-entity를-저장할-때">ID를 직접 넣어준 Entity를 저장할 때<a href="#id를-직접-넣어준-entity를-저장할-때" class="hash-link" aria-label="ID를 직접 넣어준 Entity를 저장할 때에 대한 직접 링크" title="ID를 직접 넣어준 Entity를 저장할 때에 대한 직접 링크">​</a></h2><p>먼저 간단한 예제 Entity로 설명드리겠습니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token annotation punctuation" style="color:#393A34">@Entity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ChargeStation</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> stationId</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> stationName</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>보통의 Entity와 다른 부분은 Id를 직접 할당하기 때문에  <code>@GeneratedValue(strategy = GenerationType.IDENTITY)</code> 이러한 ID 생성 전략에 대한 정보가 없습니다.</p><p>그리고 <code>save()</code> 코드를 호출하면 어떤 쿼리가 나가는지 확인해보겠습니다. 아래와 같이 아주 간단한 선릉역 충전소를 저장하는 테스트를 실행해보겠습니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token annotation punctuation" style="color:#393A34">@DataJpaTest</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ChargeStationRepositoryTest</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Autowired</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">ChargeStationRepository</span><span class="token plain"> chargeStationRepository</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> 충전소를_저장한다</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">ChargeStation</span><span class="token plain"> station </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">ChargeStationFixture</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">선릉역_충전소_충전기_2개_사용가능_1개</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        chargeStationRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">save</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">station</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">ChargeStation</span><span class="token plain"> expect </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> chargeStationRepository</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">findByStationId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">station</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getStationId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">get</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assertThat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">expect</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">isEqualTo</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">station</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>먼저 코드만 보면 먼저 <code>chargeStationRepository.save()</code> 호출과 함께 insert 쿼리 1번, 그리고 <code>chargeStationRepository.findByStationId()</code>에서 select 쿼리 1번
총 2번 발생할 것이라고 유추할 수 있습니다.</p><p><img loading="lazy" src="https://github.com/car-ffeine/design-system/assets/106640954/f48b7f0f-3f39-41ce-8fcd-94b995e95fae" alt="query-three-times" class="img_ev3q"></p><p>하지만 예상과 다르게 위의 사진과 같이 쿼리가 총 3번 발생했습니다. 첫번째는 호출하지 않은 station id로 station을 조회하는 쿼리가 발생했습니다.</p><p>이유를 찾기 위해 <code>save()</code> 메서드를 디버깅 해봤습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="save-시-select-쿼리가-발생하는-이유">save 시 SELECT 쿼리가 발생하는 이유<a href="#save-시-select-쿼리가-발생하는-이유" class="hash-link" aria-label="save 시 SELECT 쿼리가 발생하는 이유에 대한 직접 링크" title="save 시 SELECT 쿼리가 발생하는 이유에 대한 직접 링크">​</a></h3><p><img loading="lazy" src="https://github.com/car-ffeine/design-system/assets/106640954/b1db00b7-d7fb-4647-912c-6f8e2fe44974" alt="save-method" class="img_ev3q">
로직은 간단해보입니다. <code>isNew()</code> 를 통해 새로운 Entity인지 확인한 후, 새로운 Entity라면 <code>persist()</code>, 아니라면 <code>merge()</code>를 호출합니다.</p><p>여기서 <code>EntityManager#persist()</code> 메서드를 간단히 말씀드리면, 새로운 Entity를 영속화하는 메서드로 트랜잭션이 커밋될 때 데이터베이스에 저장합니다.</p><p>그리고 <code>EntityManager#merge()</code> 메서드는 준영속 상태의 Entity를 영속 상태로 변경하는데 사용합니다.
하지만 이때 영속성 컨텍스트에 존재하지 않는 객체라면 데이터베이스에서 조회 후 영속화하는 작업을 수행합니다.</p><p><code>merge()</code>를 호출하기 때문에 SELECT 쿼리가 발생하고, 영속화하는 작업을 수행하는 것 입니다.</p><p>하지만 제가 저장한 객체는 확실히 새로운 Entity가 맞습니다. 하지만 <code>entityInformation.isNew()</code> 메서드는 false를 반환합니다.</p><p>그래서 어떤 것을 기준으로 새로운 Entity인 것을 구분하는지 알아보겠습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="새로운-entity를-구분하는-기준">새로운 Entity를 구분하는 기준<a href="#새로운-entity를-구분하는-기준" class="hash-link" aria-label="새로운 Entity를 구분하는 기준에 대한 직접 링크" title="새로운 Entity를 구분하는 기준에 대한 직접 링크">​</a></h3><p>일단, 디버깅을 통해 isNew 메서드를 확인해보겠습니다.
<img loading="lazy" src="https://github.com/car-ffeine/design-system/assets/106640954/e4a56694-c623-46d8-badd-3345d557e29f" alt="is-new" class="img_ev3q"></p><p>간단합니다. 먼저 Entity에 ID를 가져옵니다. 그리고 id가 <code>primitive</code> 타입인지 확인 후, 아닐경우 id가 null 이면 새로운 Entity, 아닐경우 false를 반환합니다.</p><p>이때, <code>primitve</code> 타입이라면, id가 숫자인지 확인 후 id가 0이면 새로운 Entity, 아닐경우 false를 반환합니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="id를-직접-넣어주는-객체는-jpa-사용을-포기해야할까">ID를 직접 넣어주는 객체는 JPA 사용을 포기해야할까?<a href="#id를-직접-넣어주는-객체는-jpa-사용을-포기해야할까" class="hash-link" aria-label="ID를 직접 넣어주는 객체는 JPA 사용을 포기해야할까?에 대한 직접 링크" title="ID를 직접 넣어주는 객체는 JPA 사용을 포기해야할까?에 대한 직접 링크">​</a></h2><p>결론부터 말씀드리면 아닙니다. 다른 방법으로 새로운 Entity 임을 증명할 수 있다면 <code>merge()</code>가 아닌 <code>persist()</code>를 호출하도록 만들 수 있습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="그럼-어떻게">그럼 어떻게?<a href="#그럼-어떻게" class="hash-link" aria-label="그럼 어떻게?에 대한 직접 링크" title="그럼 어떻게?에 대한 직접 링크">​</a></h3><p>먼저 save() 메서드의 필드 중 <code>JpaEntityInformation</code>이라는 필드를 확인할 수 있습니다.</p><p><img loading="lazy" src="https://github.com/car-ffeine/design-system/assets/106640954/d9956fe6-07c7-41a9-9d6b-7c01b5f31c5d" alt="entity-info" class="img_ev3q"></p><p>이 인터페이스는 Entity의 추가 정보를 알기 위해 필드에 있습니다.</p><p>해당 인터페이스의 구현체는 <code>JpaEntityInformationSupport</code>, <code>JpaMetamodelEntityInformation</code>, <code>JpaPersistableEntityInformation</code> 이렇게 3개의 클래스가 있습니다.</p><p>그럼 다른 방법으로도 <code>isNew()</code>가 구현되어 있을거라 추측을 할 수 있습니다. 디버깅을 통해 알아보겠습니다.</p><p>아까 위의 사진으로 보고 실제로 실행됐던 <code>isNew()</code> 메서드의 주인은 <code>JpaMetamodelEntityInformation</code> 클래스였습니다. 그래서 해당 클래스는 제외하고 다른 클래스를 보겠습니다.</p><p>먼저 <code>JpaPersistableEntityInformation</code> 클래스입니다.
<img loading="lazy" src="https://github.com/car-ffeine/design-system/assets/106640954/dc2293c3-2854-4619-9ef6-d08e55b4581b" alt="is-new-persistable" class="img_ev3q">
아주 간단하게 entity의 <code>isNew()</code>를 호출한다고 적혀있습니다. 하지만 <code>Persistable</code> 인터페이스를 구현한 Entity의 <code>isNew()</code> 를 호출하는 것 입니다.</p><p>그럼 남은 하나의 클래스를 확인하겠습니다.</p><p><img loading="lazy" src="https://github.com/car-ffeine/design-system/assets/106640954/f1d654c0-e741-4db7-8e7f-4e758c36133a" alt="info-support" class="img_ev3q"></p><p>위 사진처럼 이 클래스가 Entity 마다 <code>Persistable</code> 구현 유무에 따라 동적으로 구현체를 변경해주고 있었습니다.</p><p>그럼 답이 나온 것 같습니다. ID를 직접 할당하는 Entity에 <code>Persistable</code>을 구현해주면 됩니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="persistable-구현하기">Persistable 구현하기<a href="#persistable-구현하기" class="hash-link" aria-label="Persistable 구현하기에 대한 직접 링크" title="Persistable 구현하기에 대한 직접 링크">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token annotation punctuation" style="color:#393A34">@Entity</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ChargeStation</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">implements</span><span class="token plain"> </span><span class="token class-name">Pesistable</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Id</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> stationId</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> stationName</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@CreatedDate</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">LocalDateTime</span><span class="token plain"> createdTime</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">Object</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">getStationId</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">boolean</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">isNew</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> createdTime </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">null</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>간단히 만들어봤습니다. <code>@CreatedDate</code>는 Entity가 처음 영속화될 때 동작하기 때문에 이 Entity의 CreateTime 필드가 null 이면 새로운 Entity라고 확신할 수 있습니다.
그럼 이렇게 인터페이스를 구현하고 아까 실행했던 테스트를 다시 실행해보겠습니다.</p><p><img loading="lazy" src="https://github.com/car-ffeine/design-system/assets/106640954/ea5db719-9919-42f4-b431-00e14d6fea5e" alt="solved" class="img_ev3q"></p><p>깔끔하게 구현된 것을 확인할 수 있었습니다. 원하던대로 쿼리가 2번 발생합니다.
이런  <code>Persistable</code>을 <code>@MappedSuperClass</code>를 통해 더 깔끔하게 구현할 수 있습니다. 하지만 따로 설명드리지는 않겠습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="결론">결론<a href="#결론" class="hash-link" aria-label="결론에 대한 직접 링크" title="결론에 대한 직접 링크">​</a></h4><p>JPA는 많은 편의 기능을 제공해주는 것 같아보입니다. 쫄지맙시다.</p>]]></content>
        <author>
            <name>박스터</name>
            <uri>https://github.com/drunkenhw</uri>
        </author>
        <category label="jpa" term="jpa"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[주기적인 데이터 요청으로 받은 데이터를 효율적으로 업데이트 및 삽입하기 (with. 박스터)]]></title>
        <id>https://car-ffeine.github.io/15</id>
        <link href="https://car-ffeine.github.io/15"/>
        <updated>2023-07-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요~]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요~
우테코 카페인 팀의 제이입니다.</p><p>오늘은 카페인 팀의 프로젝트를 진행하면서 '박스터'와 함께 어떤 문제를 겪고 해결했는지 적어보도록 하겠습니다.</p><ul><li>배우는 단계이다 보니 틀린 부분이 있을 수 있는데, 피드백 부탁드립니다 :)</li></ul><p>먼저 글을 쓰기 전에 문제 상황에 대해 간단하게 말씀드리겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-상황">문제 상황<a href="#문제-상황" class="hash-link" aria-label="문제 상황에 대한 직접 링크" title="문제 상황에 대한 직접 링크">​</a></h2><p>카페인 팀에서는 전기차 충전소 공공 API를 활용하여 충전소의 혼잡도 제공 및 여러 서비스를 제공합니다.</p><p>이런 서비스를 사용자들에게 제공하기 위해서 다음과 같은 작업들이 필요합니다.</p><ol><li>첫 실행시 공공 API 데이터를 모두 불러서 데이터베이스에 삽입합니다.</li><li>혼잡도를 제공하기 위해서 주기적인 시간 (아직 정하진 않았지만 ex.12시간) 단위로 충전소와 충전기의 상태를 업데이트 하기 위해서 다시 데이터를 요청을 합니다.</li><li>새롭게 추가된 충전소와 충전기는 모두 Insert해주고, 기존에 있던 충전소 혹은 충전기가 업데이트 됐다면 변경된 데이터로 업데이트 해줍니다.</li></ol><p>저랑 박스터는 2~3번 과정을 진행하는 역할을 맡았습니다.</p><p>테이블의 관계는 다음과 같습니다.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">charge_station &lt;---1------N---&gt; charger</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">       charger &lt;---1------1---&gt; charger_status</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>저희는 이 문제를 어떻게 해결 했는지 보겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-해결-과정">문제 해결 과정<a href="#문제-해결-과정" class="hash-link" aria-label="문제 해결 과정에 대한 직접 링크" title="문제 해결 과정에 대한 직접 링크">​</a></h2><p>전제조건</p><ul><li>첫 실행 모든 테이블은 초기화 상태이다.</li><li>데이터는 9999건을 기준으로 한다.</li><li>메서드 첫 시행에서는 모든 데이터가 새롭게 insert 되고</li><li>그 다음 메서드 시행에서는 일부 데이터는 추가되고, 일부는 업데이트 된다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ver1-findall-조회-후-각각-save-해주기-약14초">Ver1. findAll() 조회 후 각각 save() 해주기 (약14초)<a href="#ver1-findall-조회-후-각각-save-해주기-약14초" class="hash-link" aria-label="Ver1. findAll() 조회 후 각각 save() 해주기 (약14초)에 대한 직접 링크" title="Ver1. findAll() 조회 후 각각 save() 해주기 (약14초)에 대한 직접 링크">​</a></h2><p>저희가 처음에 생각한 방법입니다.
알아서 바뀐 것들은 업데이트 해주고, 새로운 건 저장해주기 때문에 간단한 방법으로 생각했습니다.</p><p>실제로 해본 결과, 삽입의 경우는 SELECT 쿼리문 실행 후 INSERT 쿼리문을 발생 시켰고,
업데이트 시에도 SELECT 후 UPDATE 혹은 INSERT를 발생 시켰습니다. (변경 사항 없으면 SELECT만)</p><p>이는 식별자에 따른 JPA 작동 방식 때문인데요.
이 방법의 결과는 약 14초가 나왔습니다.</p><p>저희는 이렇게 불필요한 SELECT 작업을 막아보고자 다른 방법을 구상해봤습니다.</p><p>기본적으로 Jdbc를 이용해서 Batch Insert와 Batch Update를 사용하기로 했고, 이 작업을 위해서 변경 혹은 삽입될 데이터들을 직접 찾는 과정이 중요했습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ver2-변경-감지를-직접-해주고-자료구조로-배치-데이터-모으기--on2-약-11초">Ver2. 변경 감지를 직접 해주고, 자료구조로 배치 데이터 모으기 : O(n^2) (약 11초)<a href="#ver2-변경-감지를-직접-해주고-자료구조로-배치-데이터-모으기--on2-약-11초" class="hash-link" aria-label="Ver2. 변경 감지를 직접 해주고, 자료구조로 배치 데이터 모으기 : O(n^2) (약 11초)에 대한 직접 링크" title="Ver2. 변경 감지를 직접 해주고, 자료구조로 배치 데이터 모으기 : O(n^2) (약 11초)에 대한 직접 링크">​</a></h2><p>두 번째로 저희가 생각한 방법입니다.
먼저 데이터 추가 및 변경 감지 부분입니다.</p><p>기존 업데이트 시에 SELECT와 UPDATE(or INSERT) 두번의 쿼리가 나가는 것이 맘에 들지 않아서
변경 감지를 직접 해주려고 메서드를 만들었습니다.</p><p>저희가 생각한 변경 감지는 생각보다 간단한데요.
도메인에 메서드를 만들어서 필드를 if문으로 하나씩 비교해줬습니다.</p><p>충전소의 데이터 특징상 데이터가 자주 바뀌는 데이터는 비교적 초반에 비교하도록 구현하고, 자주 바뀌지 않는 데이터는 후에 비교하도록 만들었습니다.</p><p>그리고 데이터 저장 및 업데이트 부분입니다.
먼저 findAll()로 충전소와 충전기 등 관련된 모든 데이터를 Map에 넣었습니다.
Map&lt;stationId, Station&gt;의 구조로 기존에 테이블에 저장된 모든 데이터를 자료구조에 넣었습니다.</p><p>그리고 공공 API를 불러와서, 똑같이 Map&lt;updatedStationId, Station&gt;의 구조로 만들었습니다.
(Station 안에는 <code>List&lt;Charger&gt;</code>가 존재)</p><p>저희는 충전소와 충전소에 해당하는 모든 충전기들을 비교하면서 변경 감지를 해줘야하기 때문에
각각의 Map.values()인 <code>List&lt;Station&gt; : 기존 충전소</code>와 <code>List&lt;Station&gt; : 업데이트된 충전소</code>를 비교해줬습니다.</p><p>비교를 하면서 새로 삽입된 충전소와 업데이트 된 충전소를 각각 처리해주었습니다.</p><p>충전소의 변경 감지를 위해서 충전기들은 충전소 안에 List로 속해있기 때문에 O(n^2)의 시간 복잡도를 가지고 전체 데이터들은 약 23만 건이므로, 전체 데이터를 대상으로 한다면 약 530억번의 연산이 이뤄졌겠네요.</p><p>Ver1에 비해서는 크지는 않지만 평균적으로 약 2초 정도 줄었습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ver3-변경-감지를-직접-해주고-자료구조로-배치-데이터-모으기--o1-약-10초">Ver3. 변경 감지를 직접 해주고, 자료구조로 배치 데이터 모으기 : O(1) (약 10초)<a href="#ver3-변경-감지를-직접-해주고-자료구조로-배치-데이터-모으기--o1-약-10초" class="hash-link" aria-label="Ver3. 변경 감지를 직접 해주고, 자료구조로 배치 데이터 모으기 : O(1) (약 10초)에 대한 직접 링크" title="Ver3. 변경 감지를 직접 해주고, 자료구조로 배치 데이터 모으기 : O(1) (약 10초)에 대한 직접 링크">​</a></h2><p>Ver2와 거의 유사한 방법입니다.</p><p>차이점은 Map 자료 구조 사용방법을 변경했습니다.
기존 2중 for문에서, 1중 for문을 돌면서 키 값을 통해서 신규 데이터와 업데이트 될 데이터들을 분류하고, 이들을 각각 List에 넣어주었습니다.
이를 통해서 Ver2에 비해서 1초정도 줄었습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="ver4-이전-방식--fetch-join-사용하기-약-6초">Ver4. 이전 방식 + Fetch Join 사용하기 (약 6초)<a href="#ver4-이전-방식--fetch-join-사용하기-약-6초" class="hash-link" aria-label="Ver4. 이전 방식 + Fetch Join 사용하기 (약 6초)에 대한 직접 링크" title="Ver4. 이전 방식 + Fetch Join 사용하기 (약 6초)에 대한 직접 링크">​</a></h2><p>마지막 방법은 조회 과정의 시간 단축입니다.</p><p>처음에 Stations를 findAll()하는 쿼리를 확인해보니 N+1 문제가 발생하고 있었습니다.
그 이유는 Station에서 Chargers를 지연로딩으로 설정 했는데, 이를 그대로 get 메서드를 통해 조회해서 해당 문제가 발생했습니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">ChargeStation</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">findAll</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// 기존</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token annotation punctuation" style="color:#393A34">@Query</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"SELECT DISTINCT c FROM ChargeStation c JOIN FETCH c.chargers"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// Fetch Join 적용</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">ChargeStation</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">findAll</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>따라서 위에 코드와 같이 Fetch Join을 이용해서 처음에 데이터를 가져왔습니다.
이렇게 효율적인 조회로 변경하면서 시간을 많이 줄일 수 있었습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="지금까지의-방법을-정리를-하자면">지금까지의 방법을 정리를 하자면<a href="#지금까지의-방법을-정리를-하자면" class="hash-link" aria-label="지금까지의 방법을 정리를 하자면에 대한 직접 링크" title="지금까지의 방법을 정리를 하자면에 대한 직접 링크">​</a></h3><p>Ver1 과 같은 방식에서는 업데이트 과정에서 JPA의 식별자에 따른 처리 방식으로 인해 <!-- -->[SELECT + UPDATE]<!-- --> or <!-- -->[SELECT + INSERT]<!-- --> 와 같이 쿼리가 두 번씩 나갔습니다.</p><p>그래서 Ver3까지 개선을 하기 위해서 저장과 업데이트를 한 번에 JDBC를 이용해서 Batch로 처리해주는 방식을 선택했고,</p><p>변경 감지 + 배치 데이터를 모으기 위해서 자료구조를 이용해서 시간을 조금씩 단축 했습니다.</p><p>마지막으로 Ver4에서는 findAll()에서 발생하는 N+1의 문제를 해결하면서 시간을 단축했습니다.</p><p>이런 과정을 통해서 동일 작업을 14초에서 6초 정도로 줄일 수 있었습니다!</p>]]></content>
        <author>
            <name>제이</name>
            <uri>https://github.com/sosow0212</uri>
        </author>
        <author>
            <name>박스터</name>
            <uri>https://github.com/drunkenhw</uri>
        </author>
        <category label="우아한테크코스" term="우아한테크코스"/>
        <category label="서버" term="서버"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[카페인팀 서버 아키텍처를 설명해드리겠습니다]]></title>
        <id>https://car-ffeine.github.io/14</id>
        <link href="https://car-ffeine.github.io/14"/>
        <updated>2023-07-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요 우아한테크코스 카페인팀 누누입니다]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요 우아한테크코스 카페인팀 누누입니다</p><p>이번에 카페인 팀에서 배포 아키텍처를 결정하게 되었던 과정에 대해서 정리를 해보고 싶어서 글을 쓰게 되었습니다.</p><p>아키텍처와 서버가 배포되는 과정을 보여드리면서 시작하도록 하겠습니다</p><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/dKVRTG/btsnFE7Nb82/GRONsIJPqd8WFVzjzqsgqk/img.png" alt="배포 아키텍처" class="img_ev3q"></p><p>서버가 배포되는 과정은 다음과 같습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fdto7By%2FbtsnD31hYHy%2F7rWKwxulxXzfhRigE60Sd0%2Fimg.png" alt="server image" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="우아한테크코스-인스턴스에-대한-소개">우아한테크코스 인스턴스에 대한 소개<a href="#우아한테크코스-인스턴스에-대한-소개" class="hash-link" aria-label="우아한테크코스 인스턴스에 대한 소개에 대한 직접 링크" title="우아한테크코스 인스턴스에 대한 소개에 대한 직접 링크">​</a></h2><p>우테코에서 선택할 수 있는 인스턴스는 총 2가지 종류입니다.</p><ol><li>퍼블릭 서브넷에 있는 인스턴스<ul><li>캠퍼스에서만 SSH 접근이 가능한 인스턴스입니다.</li><li>미리 열려있는 포트들만 허용이 되어 있습니다.</li><li>같은 서브넷에 있는 인스턴스끼리는 모든 포트가 허용되어 있습니다</li></ul></li><li>프라이빗 서브넷에 있는 인스턴스<ul><li>퍼블릭 서브넷에 있는 인스턴스를 통해서만 접근이 가능합니다.</li><li>같은 서브넷에 있는 인스턴스끼리는 모든 포트가 허용되어 있습니다.</li></ul></li></ol><p>1번 인스턴스를 2개 사용 가능하고, 2번 인스턴스를 1개 사용 가능합니다.</p><p>권장되는 환경에서 1개는 db 서버로 사용하고, 나머지 2개는 자유롭게 사용이 가능했습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="그전에-알면-좋아요">그전에 알면 좋아요<a href="#그전에-알면-좋아요" class="hash-link" aria-label="그전에 알면 좋아요에 대한 직접 링크" title="그전에 알면 좋아요에 대한 직접 링크">​</a></h2><p>여기서는 Self Hosted Runner를 사용했는데요.</p><p>Self Hosted Runner에 대한 내용은 <a href="https://be-student.tistory.com/75#%EC%99%9C%20Self%20Hosted%20Runner%EC%95%BC%3F-1" target="_blank" rel="noopener noreferrer">여기</a> 에 잘 나와있습니다.</p><p>외부 IP로부터 SSH 접근이 불가능하기에, Self Hosted Runner 나, Jenkins 같은 방법을 사용할 수 있었는데, 러닝 커브를 고려해서 Self Hosted Runner를 선택하게 되었습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="배포-아키텍처에-대한-고민">배포 아키텍처에 대한 고민<a href="#배포-아키텍처에-대한-고민" class="hash-link" aria-label="배포 아키텍처에 대한 고민에 대한 직접 링크" title="배포 아키텍처에 대한 고민에 대한 직접 링크">​</a></h2><p>저희 팀이 이번 아키텍처를 만들기 위해서 고민했던 점들은 다음과 같습니다.</p><ol><li>어떻게 하면 장애의 영향을 최소화할 수 있을까?</li><li>운영 서버를 나중에 추가하게 되었을 때, 어떻게 중복으로 관리되는 부분을 최소화할 수 있을까?</li><li>2차 데모데이까지의 과제인 개발 서버를 어떻게 구성할 수 있을까?</li></ol><p>여기서 1번을 가장 먼저 생각한 아키텍처를 구성하게 되었는데, 다음과 같습니다.</p><p>선택의 기준이 되었던 것은 총 3가지였습니다.</p><ol><li>DB는 프라이빗 서브넷에 위치시키고, 우리 인스턴스를 거쳐서만 접근이 가능하게 한다.<ul><li>이 부분은 보안을 위해서 어쩔 수 없이 선택하게 된 부분입니다.이 부분을 고려하다 보니, 최소한으로 구성할 수 있는 구조가 db 용 private 인스턴스 1개, 그리고 우리가 사용할 public 인스턴스 1개가 됩니다</li></ul></li><li>운영 서버를 나중에 추가하게 되었을 때, 어떻게 중복으로 관리되는 부분을 최소화할 수 있을까?<ul><li>개발용 인스턴스에 CD 툴이나, 모니터링 툴을 설치하게 되면, 운영 서버에도 동일하게 작업을 해야 합니다.</li><li>이 부분을 최소화하기 위해서, 개발용 인스턴스와, CD 툴, 모니터링 툴을 설치한 인스턴스를 분리하게 되었습니다.</li></ul></li><li>어떻게 하면 장애의 영향을 최소화할 수 있을까?<ul><li>개발용 인스턴스와, CD 툴, 모니터링 툴을 설치한 인스턴스를 분리하게 않는다면 개발용 인스턴스에서 장애가 발생했을 때, CD 툴과 모니터링 툴에도 영향을 미치게 됩니다. 이 부분을 생각했을 때도, 개발용 인스턴스와, CD 툴, 모니터링 툴을 설치한 인스턴스를 분리해야 한다고 결정하게 되었습니다</li><li>한 부분의 장애가 다른 툴까지 사용할 수 없게 만들게 되어서, 롤백이나, 상황 파악을 하기 힘들게 만들게 됩니다.</li></ul></li></ol><p>이런 과정들을 생각했을 때, 인스턴스 1개를 개발 서버용으로, 인스턴스 1개를 CD 툴과 모니터링 툴을 설치한 인스턴스로 사용하게 되었습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="실제-내부-구성은-어떻게-될까요">실제 내부 구성은 어떻게 될까요?<a href="#실제-내부-구성은-어떻게-될까요" class="hash-link" aria-label="실제 내부 구성은 어떻게 될까요?에 대한 직접 링크" title="실제 내부 구성은 어떻게 될까요?에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="개발-서버">개발 서버<a href="#개발-서버" class="hash-link" aria-label="개발 서버에 대한 직접 링크" title="개발 서버에 대한 직접 링크">​</a></h3><p>이 인스턴스에는 총 2가지 기능이 들어가 있습니다.</p><ol><li>프론트 서버<ul><li>react로 되어있는 프론트엔드 코드를 사용자에게 전달해 주는 역할을 합니다.</li></ul></li><li>백엔드 서버<ul><li>spring으로 되어있는 api 서버입니다.</li></ul></li></ol><p>물론, 이렇게 하면 두 곳 중 한 곳에 장애가 발생했을 때, 프론트 서버와 백엔드 서버가 모두 영향을 받게 됩니다.</p><p>같이 관리하게 된 첫 번째 이유로 비용이 들기 때문에 비용의 문제를 고려하게 되었습니다. 개발 서버에서 프론트 서버와 백엔드 서버를 관리하게 되었습니다.</p><p>두 번째 이유로는, 아직 프로젝트 초창기 이기 때문에, 백엔드에서 장애가 났을 때, 프론트에서 일정 이상의 에러 처리가 불가능했습니다.</p><p>프로젝트가 많이 진행되었다면, 프론트엔드만으로 혹은 장애가 나지 않은 서버를 활용해 에러 처리를 할 수 있지만, 아직은 그런 기능을 구현하지 못했습니다.</p><p>이와는 별개로 실행 시 편의를 위해서 도커를 사용해 개발 서버를 관리하고 있습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cd-툴과-모니터링-툴">CD 툴과 모니터링 툴<a href="#cd-툴과-모니터링-툴" class="hash-link" aria-label="CD 툴과 모니터링 툴에 대한 직접 링크" title="CD 툴과 모니터링 툴에 대한 직접 링크">​</a></h3><p>이 인스턴스에는 총 3가지 기능이 들어가 있습니다.</p><ol><li>CD 툴<ul><li>위에서 설명드린 것처럼, self hosted runner 가 동작하게 되어있습니다</li></ul></li><li>보안을 위한 리버스 프록시<ul><li>저희 프로젝트에서 구글 지도를 사용하게 되는데, 이때 API 키를 사용하게 됩니다. 이렇게 하면, API 키를 노출시키지 않고, 사용할 수 있습니다.</li><li>이 API 키를 노출시키지 않기 위해서, 리버스 프록시를 하나 두고, 여기서 API 키를 추가해 요청을 보내는 방식으로 구성하게 되었습니다.</li></ul></li><li>모니터링 툴<ul><li>저희 프로젝트에서 아직 도입하지 않았지만, 현재 이슈로는 올라가 있는 상태입니다.</li><li>Actuator, 프로메테우스, 그라파나 이 3가지를 활용해서 모니터링 툴을 구성하게 될 예정입니다</li></ul></li></ol><p>위 기능들이 한 인스턴스에 모여있기에, 위의 기능들은 추후에 운영 서버가 추가되었을 때, 중복으로 관리하지 않아도 됩니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="배포-과정-더-자세히-알아보기">배포 과정 더 자세히 알아보기<a href="#배포-과정-더-자세히-알아보기" class="hash-link" aria-label="배포 과정 더 자세히 알아보기에 대한 직접 링크" title="배포 과정 더 자세히 알아보기에 대한 직접 링크">​</a></h2><p>아래에 사진에서 보이는 과정을 통해서 배포를 진행하고 있는데요</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fdto7By%2FbtsnD31hYHy%2F7rWKwxulxXzfhRigE60Sd0%2Fimg.png" alt="server image" class="img_ev3q"></p><ol><li>사용자가 push를 하면, github actions에서 도커 빌드를 진행하고, 도커 허브에 이미지를 올립니다.</li><li>도커 허브에 이미지가 올라간 이후에, self hosted runner 가 작동을 시작합니다.</li><li>개발용 인스턴스에 접근해서, 이미지를 받고, 컨테이너를 실행합니다.</li></ol><p>이런 과정을 통해서, 개발용 인스턴스에 배포를 진행하고 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="느낀-점">느낀 점<a href="#느낀-점" class="hash-link" aria-label="느낀 점에 대한 직접 링크" title="느낀 점에 대한 직접 링크">​</a></h2><p>좋은 아키텍처를 설계하기 위해서는 고려해야 할 점들이 정말 많다는 것을 다시 한번 느꼈습니다.</p><p>운영 서버가 추가된다던가, 인스턴스가 늘어나고, 줄어드는 상황에 유연하게 대처할 수 있도록 설계를 해야 한다는 것을 다시 한번 느꼈습니다.</p><p>중복으로 관리될 포인트를 줄여야 한다는 것도 다시 한번 느낄 수 있었고요</p><p>긴 글을 읽어주셔서 감사합니다</p>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="ec2" term="ec2"/>
        <category label="aws" term="aws"/>
        <category label="우아한테크코스" term="우아한테크코스"/>
        <category label="배포" term="배포"/>
        <category label="서버" term="서버"/>
        <category label="아키텍처" term="아키텍처"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[충전소 리스트 클릭시 마커에 간단정보 모달을 띄우는 기능 추가에서 겪었던 트러블 슈팅]]></title>
        <id>https://car-ffeine.github.io/13</id>
        <link href="https://car-ffeine.github.io/13"/>
        <updated>2023-07-14T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Untitled]]></summary>
        <content type="html"><![CDATA[<p><img loading="lazy" src="https://file.notion.so/f/s/16a32751-2088-4261-8bf6-3d556c0bf2e8/Untitled.png?id=020fb0e2-81d8-4dca-bb76-cf4536ca7b29&amp;table=block&amp;spaceId=e725e94b-8029-47f5-aecb-8eb1ef7c939f&amp;expirationTimestamp=1689364800000&amp;signature=3KH3gvfzTgKmmFsrNBluQ3evQ6jwe2C-tj8LqB6gQyw&amp;downloadName=Untitled.png" alt="Untitled" class="img_ev3q"></p><p>위 이미지는 현재까지 구현한 지도의 모습이다. 구현된 기능은 다음과 같다.</p><ul><li>충전소 정보를 서버에 요청해 받아온 충전소 정보를 바탕으로 화면에 마커를 표시하는 기능</li><li>화면이 이동하거나 줌인, 줌 아웃을 할 시 화면의 마커 정보가 최신화 되는 기능</li><li>마커 정보를 최신화 할 때 화면에서 사라진 마커를 dom에서 제거하는 기능</li><li>마커 정보를 최신화 할 때 이전 화면에서도 있었던 마커를 재생성 하지 않는 기능</li><li>마커를 클릭했을 시 해당 마커에 대한 간단 정보를 모달로 띄워주는 기능</li><li>화면에 표시된 마커들에 대한 충전소 정보를 리스트로 보여주는 기능</li></ul><p>이번에 새로 추가하고자 한 기능은 다음과 같다.</p><ul><li>충전소 리스트에서 충전소를 선택하면 화면의 중심이 선택한 충전소 마커로 이동하고, 충전소의 간단 정보를 모달로 띄워주는 기능</li></ul><p>위 기능을 구현하기 위해선 google maps api의 InfoWindow객체를 이용해야 한다. 사용 방식은 다음과 같다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> infowindow </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">google</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">maps</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">InfoWindow</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">content</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> contentString</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">ariaLabel</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Uluru'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">const</span><span class="token plain"> marker </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">google</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">maps</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">Marker</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">position</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> uluru</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">title</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'Uluru (Ayers Rock)'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">infowindow</span><span class="token punctuation" style="color:#393A34">.</span><span class="token method function property-access" style="color:#d73a49">open</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">anchor</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> marker</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  map</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>간단하게 요약하자면 다음과 같다.</p><ul><li><code>InfoWindow</code> 생성자 함수를 통해 <code>infoWindow</code> 인스턴스를 생성한다.<ul><li>생성시 dom 요소 혹은 string을 전달해 <code>infoWindow</code>가 생성될 dom위치를 지정해준다.</li></ul></li><li><code>marker</code> 인스턴스를 <code>infoWindow</code> 인스턴스의 <code>open</code> 메서드에 인자로 전달한다.</li><li><code>infoWindow</code> 생성 시 전달했던 dom요소의 위치가 <code>marker</code>의 위치로 고정되면서 화면에 그려진다.</li></ul><hr><p><img loading="lazy" src="https://file.notion.so/f/s/3079d7b9-8226-46b1-9482-054d1ea78016/Untitled.png?id=bce7685b-8a95-429c-bb75-98a4402cfc17&amp;table=block&amp;spaceId=e725e94b-8029-47f5-aecb-8eb1ef7c939f&amp;expirationTimestamp=1689364800000&amp;signature=jKnY-AhoxwqTiWrMi66uUtIamSOZDj8GGBTzgKeu_qY&amp;downloadName=Untitled.png" alt="Untitled" class="img_ev3q"></p><p>충전소 정보를 보여주는 위 <code>StationList</code> 컴포넌트는 충전소 정보에 접근할 때 react-query를 통해 서버 상태를 직접 내려 받아 컴포넌트 내부 리스트를 렌더링 한다.</p><p>또한, <code>StationMarkersContainer</code>에서도 충전소 정보를 react-query의 서버 상태에서 참조해 마커를 렌더링 하고 있다.</p><p>따라서 <code>StationList</code> 컴포넌트와 <code>StationMarkersContainer</code>는 각각 따로 서버 상태에 접근해 렌더링을 수행하고 있으므로 둘 사이에는 어떠한 연결 고리가 없다.</p><p>여기서 문제가 발생하게 되었다.</p><hr><p>현재까지의 코드에서는 <code>infoWindow</code>인스턴스를 <code>StationMarkersContainer</code>컴포넌트에서 생성한다. 이를 하위 컴포넌트인 <code>StationMarker</code>에 내려주고, 이 컴포넌트 내부에서 <code>marker</code>인스턴스를 생성한다.</p><p>이번에 구현하기로 한 기능은 <code>StationList</code>의 항목 중 하나를 선택했을 시 선택된 충전소에 해당하는 마커에 간단 정보 모달이 뜨며 화면을 해당 마커가 중심으로 오도록 이동 시키는 것이었다.</p><p>하지만 지금의 코드 구조상 <code>StationList</code>와 <code>StationMarkersContainer</code>사이에는 어떠한 연결 고리도 없으므로 <code>infoWindow</code>와 <code>marker</code>에 <code>StationList</code>는 접근할 수 없는 상태가 된다.</p><p>이를 해결하기 위해서 다음과 같은 방법을 사용하기로 했다.</p><ul><li><code>infoWindow</code>인스턴스를 root 단에서 생성해 전역적으로 관리한다.</li><li>생성될 <code>marker</code> 인스턴스들을 배열 형태의 전역 상태로 관리한다.</li></ul><p>위 내용을 말로만 본다면 별로 어려울 것 없어 보이지만 실제 구현을 진행해보니 내부적으로 큰 문제가 두 가지 존재했다.</p><ol><li>따로 모듈을 분리해 <code>infoWindow</code>를 생성할 수 없다.</li><li><code>marker</code>인스턴스를 생성하는 주체가 <code>StationMarkersContainer</code>가 되어서는 안된다.</li></ol><p>각각의 문제점을 살펴보자.</p><hr><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-따로-모듈을-분리해-infowindow를-생성할-수-없다">1. 따로 모듈을 분리해 <code>infoWindow</code>를 생성할 수 없다.<a href="#1-따로-모듈을-분리해-infowindow를-생성할-수-없다" class="hash-link" aria-label="1-따로-모듈을-분리해-infowindow를-생성할-수-없다에 대한 직접 링크" title="1-따로-모듈을-분리해-infowindow를-생성할-수-없다에 대한 직접 링크">​</a></h3><p><code>infoWinodw</code>를 전역 상태로 만들어 사용하기 위해 처음으로 했던 생각은 <code>infoWindowStore.ts</code>로 모듈을 분리하여 <code>infoWindow</code>를 생성해 store의 초기값으로 지정하는 것이었다.</p><p>위 생각을 가지고 그대로 구현해보았더니 <code>google</code>을 참조할 수 없다는 에러가 발생했다. <code>InfoWindow</code>생성자 함수는 <code>google.maps.InfoWindow</code>를 통해 접근할 수 있기 때문에 해당 에러는 <code>infoWindow</code>인스턴스를 생성할 수 없다는 것을 의미했다.</p><p>왜 <code>google</code>을 참조할 수 없는지 이유를 분석해보니 이유는 다음과 같았다.</p><p>우리 팀이 구글 지도 로드를 위해 선택한 라이브러리는 <code>@googlemaps/react-wrapper</code>이다. 이 라이브러리의 동작을 살펴보면 다음과 같다.</p><ul><li><code>Wrapper</code>컴포넌트가 <code>@googlemaps/js-loader</code>라이브러리의 <code>Loader</code>생성자 함수를 호출한다.</li><li>생성된 <code>loader</code>인스턴스의 <code>load</code>메서드를 실행시켜 지도의 로딩 작업을 시작한다.<ul><li><code>load</code> 메서드는 최종적으로 <code>Promise&lt;typeof google&gt;</code>을 반환하는데, 지도 로드에 성공하면 <code>resolve(window.google)</code> 을 실행시켜 <code>google</code>을 전역적으로 사용 가능하도록 만들어준다.</li></ul></li><li>지도의 로딩이 완료되면 <code>Wrapper</code>의 <code>render</code> props를 통해 받은 콜백 함수를 실행시킨다.<ul><li><code>render</code>콜백 함수는 로딩 상태를 나타내는 Status를 파라미터로 넘겨 받아 호출된다.</li></ul></li></ul><p>최종적으로 <code>render</code>를 실행 시켰을 때 반환 되는 컴포넌트에서는 <code>google</code> 로딩 되어 전역적으로 접근이 가능함을 보장할 수 있으므로 이때부터 <code>google</code>에 접근이 가능해진다. → 따라서 <code>Wrapper</code>를 통해 반환되는 컴포넌트의 하위 컴포넌트에서 <code>google.maps.Map</code>생성자 함수를 사용해 지도를 생성할 수 있게 된다.</p><p><code>infoWindow</code>를 생성하기 위해 만든 새로운 모듈은 첫 <code>import</code>시기에 평가될 것이기 때문에 <code>Wrapper</code>의 하위 컴포넌트에서 <code>import</code>를 수행한다면 로드가 완료된 이후 시점일 것이므로 <code>window.google</code>이 등록되어 <code>google</code>에 접근이 가능할 것으로 예상했다.</p><p>하지만 웹팩을 통한 번들링 과정에서 모듈이 뒤섞여 파일의 평가 시기를 보장할 수 없어져 새로 만든 모듈에서는 <code>google</code>에 대한 접근이 불가능해지게 되었다. 웹팩을 좀 더 공부해본다면 이 문제를 해결할 수 있을 것 같았지만, 너무 지엽적인 부분에서 많은 시간을 들이기 보단 기존에 개발하던 방식을 통해 문제를 해결해보기로 결정했다.</p><p>최종적으로 문제를 해결한 방식은 다음과 같다.</p><ul><li><code>InfoWindow</code>생성자 함수를 호출할 <code>CarFfeineInfoWindowInitializer</code>컴포넌트를 만든다.</li><li><code>Wrapper</code>로 감싸진 컴포넌트 하위에 <code>CarFfeineInfoWindowInitializer</code> 컴포넌트를 추가한다.</li><li><code>google</code>에 접근이 가능한 상태를 보장받은 <code>CarFfeineInfoWindowInitializer</code>내부에서 <code>infoWindow</code>인스턴스를 생성한다.</li><li><code>store</code>에 <code>infoWindow</code>인스턴스를 <code>set</code>해주어 전역적으로 <code>infoWindow</code>를 사용 가능하도록 한다.</li></ul><hr><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-marker인스턴스를-생성하는-주체가-stationmarkerscontainer가-되어서는-안된다">2. <code>marker</code>인스턴스를 생성하는 주체가 <code>StationMarkersContainer</code>가 되어서는 안된다.<a href="#2-marker인스턴스를-생성하는-주체가-stationmarkerscontainer가-되어서는-안된다" class="hash-link" aria-label="2-marker인스턴스를-생성하는-주체가-stationmarkerscontainer가-되어서는-안된다에 대한 직접 링크" title="2-marker인스턴스를-생성하는-주체가-stationmarkerscontainer가-되어서는-안된다에 대한 직접 링크">​</a></h3><p>이번 팀 프로젝트에서 지도를 구현하기 위해 google maps api를 사용하게 되었다. 뜬금없이 이 이야기를 한 이유는 다음과 같다.</p><ul><li>google maps api는 바닐라 자바스크립트를 기반으로 동작한다.</li><li>이번 팀 프로젝트는 리액트를 기반으로 개발을 진행할 것이다.</li><li>지도를 그리기 위해서 바닐라 자바스크립트와 리액트의 적절한 조화가 필요하다.</li><li>다소 혼란스러울 수 있는 지도의 조작 방식을 리액트와 조화롭게 사용하기 위해서 컴포넌트 설계시 컴포넌트의 책임을 확실하게 구분해야겠다는 생각을 하게 되었다.</li></ul><p>이 컴포넌트의 책임에 대한 문제로 인해 <code>marker</code> 인스턴스를 생성하는 주체에 대해 많은 고민을 하게 되었다.</p><p>일단 원래 코드 구조에서 마커를 그리기 위해 컴포넌트를 다음과 같이 추상화 했다.</p><ul><li><code>StationMarkersContainer</code> 컴포넌트<ul><li>리액트 쿼리를 통해 받아온 서버 상태(충전소 정보 배열)로 <code>StationMarker</code>를 호출한다.</li></ul></li><li><code>StationMarker</code> 컴포넌트<ul><li>상위에서 내려받은 충전소 정보 props를 통해 <code>marker</code> 인스턴스를 생성한다. (google maps api에서는 인스턴스 생성이 곧 렌더링을 의미한다)</li><li>생성한 <code>marker</code> 인스턴스에 <code>infoWindow</code> 인스턴스의 <code>open</code> 메서드를 트리거 하는 클릭 이벤트 리스너를 추가해준다.</li><li><code>useEffect</code>의 클린업 함수를 이용해 충전소 정보가 최신화 되었을 때 마커가 더이상 화면에 보이지 않는다면 <code>marker</code> 인스턴스의 <code>setMap(null)</code> 메서드를 호출해 google maps api에서 마커를 지우도록 한다. (마커 렌더링 최적화)</li></ul></li></ul><p>간략히 설명하자면 <code>StationMarkersContainer</code> 컴포넌트는 충전소 정보를 서버에서 받아 <code>StationMarker</code>를 호출하는 역할만을 수행하고, 마커에 대한 모든 세부 로직은 <code>StationMarker</code>가 수행하도록 컴포넌트를 추상화 해보았다.</p><p>이름에서도 드러나듯 <code>StationMarker</code> 컴포넌트가 <code>marker</code> 인스턴스를 생성하는 주체가 되어야 바닐라 자바스크립트와 리액트의 혼종인 이 프로젝트의 코드를 추후 유지보수 할 때 문제가 없으리라 판단했다.</p><p>하지만 이렇게 추상화 된 컴포넌트들은 <code>marker</code> 인스턴스를 배열 형식의 전역 상태에 담아 관리하고자 할 때 문제가 되었다.</p><hr><p>일단 먼저 서버에서 내려 받은 충전소 정보를 <code>station</code>이라고 하자, 우리는 이 <code>station</code>을 통해 <code>marker</code> 인스턴스를 생성하고자 한다.</p><p>이때 생각 할 수 있는 가장 간단한 방법은 <code>station</code>에서 <code>map</code> 메서드를 통해 <code>marker</code> 인스턴스를 생성하여 이 <code>marker</code> 인스턴스를 하위 컴포넌트인 <code>StationMarker</code>에 넘겨주는 방식일 것이다.</p><p>하지만 이 방식은 인스턴스를 생성하는 것이 곧 화면에 렌더링을 발생시키는 것을 의미하는 google maps api의 특성상 우리가 처음 설계한 컴포넌트의 책임을 반하는 구조를 만들어내게 된다.</p><p>자세히 설명해보자면 마커의 렌더링은 <code>StationMarkersContainer</code>가 수행하고 있는데 화면에 보이지 않는 마커를 지우는 역할은 <code>StationMarker</code>컴포넌트가 수행하고 있고, 이벤트 핸들러의 추가 역시 마커가 생성된 이후에 하위 컴포넌트에서 이를 수행하는 괴상한 코드가 만들어지게 된다.</p><p>추후 코드의 유지보수성을 위해선 피해야 할 방식임이 명확했다.</p><p>해결 방식을 고민해보다가 다음과 같은 해결 방안을 생각하게 되었다.</p><p><code>StationMarker</code> 컴포넌트의 역할</p><ul><li><code>marker</code> 인스턴스를 생성한다.</li><li><code>marker</code> 인스턴스의 이벤트 핸들러를 추가한다.</li><li>생성된 <code>marker</code> 인스턴스를 배열 형식의 전역 상태에 추가한다.</li><li>충전소 정보가 최신화 되었을 때 마커가 화면에 보이지 않는 상태가 되었다면 <code>marker</code> 인스턴스를 전역 상태에서 삭제한다.</li></ul><p>위와 같이 <code>StationMarker</code> 의 역할을 잡게 되면 기존의 컴포넌트 설계 구조를 해치지 않으면서 전역 상태에 <code>marker</code>인스턴스를 잘 추가할 수 있게 된다. 하지만 이렇게 되면 <code>StationMarker</code> 컴포넌트는 다음의 큰 문제들을 가지게 된다.</p><ol><li><code>marker</code>들을 가지는 전역 상태를 구독하고 있는 컴포넌트가 새로 생성되는 마커의 개수만큼 리렌더링 된다.</li><li>현재 사용하고 있는 전역 상태 관리 도구의 특성상 이전 상태를 참조해와야 <code>marker</code>를 추가할 수 있게 되는데, 이 때 이전 상태가 최신의 상태임을 보장하지 못할 수 있다.</li></ol><p>이 두 문제를 해결할 방식을 고민해보았을 때 다음과 같은 결론에 도달하게 되었다.</p><ul><li>현재 사용하고 있는 전역 상태 관리 도구는 React 18에 새로 추가된 <code>useSyncExternalState</code> 훅을 기반으로 <code>recoil</code>과 비슷하게 사용할 수 있도록 계층을 분리하여 만든 도구이다.</li><li>기존에 사용하던 전역 상태 관리 도구의 메서드 <code>useExternalState</code>, <code>useExternalValue</code>, <code>useSetExternalState</code> 이외에 <code>store</code> 인스턴스에 직접 접근하여 최신의 상태를 참조하는 <code>getStoreSnapShot</code> 메서드를 추가한다.</li><li><code>store</code>에 직접 접근해 받아온 최신의 상태는 바닐라 자바스크립트 객체 이므로 리액트의 리렌더링을 발생 시키지 않는다.</li><li>리렌더링으로 인한 문제점들을 <code>getStoreSnapShot</code> 메서드를 추가함으로써 해결할 수 있다.</li></ul><hr><p>새로운 기능 추가를 위해 마주했던 앞선 두 가지의 문제와 해결 방식을 살펴 보았다. 그래서 최종적으로 이전까지 계속해서 고민해왔던 문제를 해결한 과정을 간추려보자면 다음과 같다.</p><ul><li>충전소 정보를 서버에서 받아와 렌더링 하는 <code>StationList</code> 컴포넌트에서 <code>marker</code> 인스턴스 배열을 저장하고 있는 <code>store</code>인스턴스에 직접 접근해 최신의 <code>marker</code>인스턴스들을 가져온다.</li><li>충전소 목록에서 사용자가 충전소를 클릭했을 때 전역으로 관리되는 <code>infoWindow</code> 인스턴스의 <code>open</code>메서드에 <code>marker</code> 인스턴스들 중 선택된 <code>marker</code>를 전달해 간단 정보 모달을 띄워준다.</li></ul>]]></content>
        <author>
            <name>센트</name>
            <uri>https://github.com/kyw0716</uri>
        </author>
        <category label="react" term="react"/>
        <category label="google maps api" term="google maps api"/>
        <category label="useSyncExternalStore" term="useSyncExternalStore"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[카페인 팀에서 사용하는 지도 라이브러리를 소개합니다.]]></title>
        <id>https://car-ffeine.github.io/11</id>
        <link href="https://car-ffeine.github.io/11"/>
        <updated>2023-07-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[지도 api 벤더 선택 이유]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="지도-api-벤더-선택-이유">지도 api 벤더 선택 이유<a href="#지도-api-벤더-선택-이유" class="hash-link" aria-label="지도 api 벤더 선택 이유에 대한 직접 링크" title="지도 api 벤더 선택 이유에 대한 직접 링크">​</a></h2><p>국내 서비스 중인 지도 서비스로는 google, naver, kakao가 있습니다.</p><p>이 중에서도 google maps api는 css로 <code>지도의 테마를 직접 스타일링할 수 있는 기능이 있어서 선택</code>하게 됐습니다.</p><p>google maps api를 사용하기 위해서 별도의 라이브러리 사용이 필수는 아니지만</p><p>저희 팀에서 대중적인 라이브러리들과 기본 환경 설정법을 모두 테스트 했을 때, 반드시 사용하고 싶은 라이브러리가 존재하여 비교를 기록으로 남기게 됐습니다.</p><h1>google maps api 관련 라이브러리</h1><p>(선택한 라이브러리들은 ✅으로 표시했습니다.)</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="google-maps-api">google maps API<a href="#google-maps-api" class="hash-link" aria-label="google maps API에 대한 직접 링크" title="google maps API에 대한 직접 링크">​</a></h3><p><a href="https://github.com/tomchentw/react-google-maps" target="_blank" rel="noopener noreferrer">https://github.com/tomchentw/react-google-maps</a></p><p>이 라이브러리는 구글에서 공식으로 제공하는 지도 api로, HTML DOM에 구글 지도를 부착하고, 사용(조작)할 수 있도록 도와줍니다. 이 라이브러리는 <code>vanilla Javascript 기반으로 동작</code>합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="typesgooglemaps-"><strong>@types/google.maps</strong> ✅<a href="#typesgooglemaps-" class="hash-link" aria-label="typesgooglemaps-에 대한 직접 링크" title="typesgooglemaps-에 대한 직접 링크">​</a></h3><p><a href="https://www.npmjs.com/package/@types/google.maps" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/@types/google.maps</a></p><p>TypeScript에서 구글 지도를 사용할 때 <code>타입을 제공</code>해주는 역할을 합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="googlemapsjs-api-loader"><strong>@googlemaps/js-api-loader</strong><a href="#googlemapsjs-api-loader" class="hash-link" aria-label="googlemapsjs-api-loader에 대한 직접 링크" title="googlemapsjs-api-loader에 대한 직접 링크">​</a></h3><p><a href="https://www.npmjs.com/package/@googlemaps/js-api-loader" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/@googlemaps/js-api-loader</a></p><p>이 라이브러리는 구글에서 공식으로 제공하는 지도 호출 api로, api key만 넘겨주더라도 구글 지도를 스크립트 형태로 불러와주는 역할을 하는 라이브러리입니다. 별도로 html 조작 없이 불러온 <code>라이브러리에서 구글 지도를 꺼내서 동적으로 사용</code>할 수 있습니다. vanilla Javascript 기반으로 동작하여 어디에서나 사용이 가능합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="대중적인-라이브러리-비교">대중적인 라이브러리 비교<a href="#대중적인-라이브러리-비교" class="hash-link" aria-label="대중적인 라이브러리 비교에 대한 직접 링크" title="대중적인 라이브러리 비교에 대한 직접 링크">​</a></h3><table><thead><tr><th></th><th>react-google-maps</th><th>@react-google-maps/api</th><th>@googlemaps/react-wrapper</th></tr></thead><tbody><tr><td>링크</td><td><a href="https://www.npmjs.com/package/react-google-maps" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/react-google-maps</a></td><td><a href="https://www.npmjs.com/package/@react-google-maps/api" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/@react-google-maps/api</a></td><td><a href="https://www.npmjs.com/package/@googlemaps/react-wrapper" target="_blank" rel="noopener noreferrer">https://www.npmjs.com/package/@googlemaps/react-wrapper</a></td></tr><tr><td>설명</td><td>이 라이브러리는 개인이 만든 라이브러리로, google maps API를 react DOM 위에 올려서 사용하게 돕습니다. <br> 구글 지도와 마커를 react component 처럼 사용하여 react스럽게 렌더링 하는 것을 지원합니다. <br> react 진영에서 가장 대중적으로 사용되는 구글 지도 라이브러리였지만 2018년 이후로 업데이트가 끊겼습니다.</td><td>이 라이브러리도 개인이 만든 라이브러리로 앞서 소개한 react-google-maps를 개량하여 만든 라이브러리입니다.<br> 이 라이브러리 역시 react에 지도나 마커 컴포넌트를 호출해서 사용이 가능합니다. <br> 현재 react 진영에서 가장 대중적으로 사용되는 구글 지도 라이브러리 입니다.</td><td>이 라이브러리는 구글에서 공식으로 제공하는 react용 라이브러리입니다. <br> 이 라이브러리는 앞서 소개한 js-api-loader를 활용하여 만든 Wrapper 컴포넌트를 제공하는데, 구글 지도를 호출하는 과정에서 수신중, 실패, 성공에 따라 지도를 보여줄 지, 로딩중 컴포넌트를 보여줄 지, 에러 컴포넌트를 보여줄 지 결정하는 기능이 있습니다. <br> 이외에는 기존의 js-api-loader의 기능과 완벽하게 동일합니다. (라이브러리를 열어서 직접 확인해봤습니다.)</td></tr><tr><td>선택여부</td><td></td><td></td><td>✅</td></tr></tbody></table><h1>라이브러리 선택 이유</h1><p>저희 프로젝트는 <code>실시간 전기자동차 충전소 지도 및 사용 통계 조회 서비스</code> 다보니 지도 위에 띄워줘야 할 마커를 최적화 하는 과정이 굉장히 중요합니다.</p><ol><li>전국 6만여 개의 마커를 전부 보여줄 수 없다.</li><li>현재 디스플레이 영역의 마커만을 호출해야한다.</li><li>그 마커들의 렌더링 과정을 저수준에서 다룰 수 있어야 한다.</li></ol><p>이런 원칙을 가지고 있기에 대중적인 라이브러리들(react-google-maps, @react-google-maps/api)은 저희의 선택지에 없었습니다.</p><p>따라서 구글 지도는 오로지 vanilla로 제공되는 상태에서 직접 제어하기로 결정하였고, 마커를 관리하는 주체 또한 구글 지도에서 직접 컨트롤을 하려고 합니다.</p><p>따라서 구글 지도를 호출하는 작업은 @googlemaps/react-wrapper에 맡기고, 불러온 구글 지도는 vanilla로 통제하기로 했습니다.</p><p>지도의 조작, 지도에 마커를 찍는 과정을 모두 <code>공식 문서에 나와있는 방법대로 통제</code>하려고 합니다.</p><p>기존의 라이브러리들은 마커나 지도를 컴포넌트화 한 상태이기에 최적화 과정에서 저희가 제어할 수 없는 부분들이 있다고 생각합니다. 따라서 트러블슈팅 과정에서 마커의 호출 시점, 메모리에서 해제하는 시점, 렌더링하는 시점 등의 작업들을 훨씬 더 세밀하게 하려면 google maps api을 있는 그대로 사용할 수 있어야 합니다. 따라서 지도에 관련된 기능은 react DOM 위에서가 아닌 vanilla 환경에서 작업을 할 것입니다.</p><h1>구글 지도 제어 전략</h1><ol><li>구글 지도와 마커는 항상 바닐라 환경(react DOM 바깥)에서 동작하게 한다.</li><li>바닐라 환경에서만 동작하게 하여 리액트 컴포넌트에서의 재 렌더링을 일절 방지한다.</li><li>마커나 지도의 동작 이벤트에 의해 UI를 조작해야하는 경우에는 react DOM 조작을 하도록 한다.</li><li>바닐라 환경인 google maps api와 react DOM 사이의 제어 과정에는 useSyncExternalStore 훅을 이용하여 리액트 UI를 강제로 동기화 시킬 수 있도록 한다.</li></ol><p>구글 지도는 바닐라 환경에서, 각종 UI 통제는 리액트에서 통합하여 사용하는 환경을 구상하고 있습니다.</p><p>시중에 나와있는 대부분의 라이브러리들을 활용하여 비교하고 테스트한 결과 @googlemaps/react-wrapper를 선택하는 것이 최적화와 생산성, 앱 안정성을 모두 확보할 수 있는 선택이라고 생각했습니다.</p><p>현재 카페인 팀에서 사용중인 지도 제어에 관한 방법은 이후에 작성 될 글에서 상세하게 설명하겠습니다.</p>]]></content>
        <author>
            <name>가브리엘</name>
            <uri>https://github.com/gabrielyoon7</uri>
        </author>
        <category label="react" term="react"/>
        <category label="google maps" term="google maps"/>
        <category label="google maps api" term="google maps api"/>
        <category label="react-wrapper" term="react-wrapper"/>
        <category label="@googlemaps/react-wrapper" term="@googlemaps/react-wrapper"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[jasypt를 활용하여 프로퍼티를 암호화하자]]></title>
        <id>https://car-ffeine.github.io/12</id>
        <link href="https://car-ffeine.github.io/12"/>
        <updated>2023-07-10T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[서론]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="서론">서론<a href="#서론" class="hash-link" aria-label="서론에 대한 직접 링크" title="서론에 대한 직접 링크">​</a></h2><p>안녕하세요 카페인팀 <code>키아라</code>입니다.</p><p>이번 프로젝트를 시작하면서 프로퍼티를 암호화하는 방법으로 jasypt를 알게되어</p><p>사용하는 방법을 익혀 저희 프로젝트에 적용해볼 계획입니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="프로퍼티-암호화는-왜-필요할까">프로퍼티 암호화는 왜 필요할까?<a href="#프로퍼티-암호화는-왜-필요할까" class="hash-link" aria-label="프로퍼티 암호화는 왜 필요할까?에 대한 직접 링크" title="프로퍼티 암호화는 왜 필요할까?에 대한 직접 링크">​</a></h2><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spring</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  datasource</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> 데이터베이스 url</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    username</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> 계정</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    password</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> 비밀번호</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>프로젝트를 진행하면서 yml 파일에 DB 연결 URL이나 계정, 비밀번호 같이 노출되어선 안 되는 민감한 정보들이 많습니다.</p><p>git의 public repository와 CI/CD를 연동해 어플리케이션을 배포한다면 중요한 정보가 탈취될 가능성이 있죠.</p><p>Jasypt 라이브러리를 사용하면 평문으로 된 데이터베이스 접속 정보를 암호화 하여 방어막을 한 겹 쌓을 수 있게 됩니다.</p><p>간략하게 라이브러리를 소개하고 사용 방법을 알아볼까요?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="jasypt는-뭐지">jasypt는 뭐지?<a href="#jasypt는-뭐지" class="hash-link" aria-label="jasypt는 뭐지?에 대한 직접 링크" title="jasypt는 뭐지?에 대한 직접 링크">​</a></h2><p>Jasypt이란 쉽게 암호화 기능을 사용할 수 있도록 제공하는 Java 라이브러리입니다.</p><p>민감한 평문 정보를 암호화하고, 아래처럼 설정 값을 지정하면 어플리케이션이 실행될 때 자동으로 이를 복호화하여 사용합니다.</p><p>사용자가 편하게 암호화 기능을 사용할 수 있도록 제공하는 Java 라이브러리로</p><p>공식 홈페이지는 <a href="http://www.jasypt.org/" target="_blank" rel="noopener noreferrer">http://www.jasypt.org/</a> 에 가면 더 자세한 정보를 확인할 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="사용-방법">사용 방법<a href="#사용-방법" class="hash-link" aria-label="사용 방법에 대한 직접 링크" title="사용 방법에 대한 직접 링크">​</a></h2><p>정말 간단하게 라이브러리 추가, key값 넘겨주기, 암호화 세 가지 단계로 프로퍼티를 암호화하여 관리할 수 있습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-라이브러리-추가--의존성-추가">1. 라이브러리 추가 (= 의존성 추가)<a href="#1-라이브러리-추가--의존성-추가" class="hash-link" aria-label="1. 라이브러리 추가 (= 의존성 추가)에 대한 직접 링크" title="1. 라이브러리 추가 (= 의존성 추가)에 대한 직접 링크">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">implementation </span><span class="token string" style="color:#e3116c">"com.github.ulisesbocchio:jasypt-spring-boot-starter:3.0.3"</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-jasypt-설정-및-bean-등록">2. Jasypt 설정 및 Bean 등록<a href="#2-jasypt-설정-및-bean-등록" class="hash-link" aria-label="2. Jasypt 설정 및 Bean 등록에 대한 직접 링크" title="2. Jasypt 설정 및 Bean 등록에 대한 직접 링크">​</a></h3><p>key를 사용해서 Bean을 등록하는 기본 설정입니다. 여기서 Bean의 이름을 jasyptEncryptor라고 설정했다면 프로퍼티 등록해야 합니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token annotation punctuation" style="color:#393A34">@Configuration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">JasyptConfig</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ENCRYPT_KEY</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"hello"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Bean</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">name </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"jasyptEncryptor"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">StringEncryptor</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">stringEncryptor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">PooledPBEStringEncryptor</span><span class="token plain"> encryptor </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">PooledPBEStringEncryptor</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">SimpleStringPBEConfig</span><span class="token plain"> config </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">SimpleStringPBEConfig</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setPassword</span><span class="token punctuation" style="color:#393A34">(</span><span class="token constant" style="color:#36acaa">ENCRYPT_KEY</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setAlgorithm</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"PBEWithMD5AndDES"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setKeyObtentionIterations</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1000</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setPoolSize</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setSaltGeneratorClassName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"org.jasypt.salt.RandomSaltGenerator"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        config</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setStringOutputType</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"base64"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        encryptor</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">setConfig</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">config</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> encryptor</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jasypt</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  encryptor</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    bean</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> jasyptEncryptor</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-암호화">3. 암호화<a href="#3-암호화" class="hash-link" aria-label="3. 암호화에 대한 직접 링크" title="3. 암호화에 대한 직접 링크">​</a></h3><p>라이브러리를 사용할 준비는 거의 다 끝났습니다. 이제 암호화하여 프로퍼티에 작성합니다.</p><p>이때 암호화 하는 방법은, 아래 사이트에 접속해 평문과 키를 입력한 후 나온 암호문을 프로퍼티 파일에 'ENC(암호문)' 로 작성합니다.</p><p><a href="https://www.devglan.com/online-tools/jasypt-online-encryption-decryption" target="_blank" rel="noopener noreferrer">암복호화 사이트</a></p><p><img loading="lazy" src="https://github.com/kiarakim/algorithm/assets/101039161/b0293dfc-e0d8-45a0-91af-becf790a1002" alt="평문" class="img_ev3q"></p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  datasource</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> 데이터베이스 url</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    username</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> 계정</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    password</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ENC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">piAhHYGHR3dWDkdco6C3n8TpJdyq8FnO</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>나머지도 마저 암호화해줍시다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">  datasource</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    url</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ENC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">j94r94hQbd1SfFHGCUeweg</span><span class="token operator" style="color:#393A34">+</span><span class="token class-name">GGDosfnxP8dL0FQxfXtE</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    username</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ENC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">vp3Gw8kLpwDZhmMMqf88</span><span class="token operator" style="color:#393A34">/</span><span class="token class-name">Q</span><span class="token operator" style="color:#393A34">==</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    password</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">ENC</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">piAhHYGHR3dWDkdco6C3n8TpJdyq8FnO</span><span class="token punctuation" style="color:#393A34">)</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="실행">실행<a href="#실행" class="hash-link" aria-label="실행에 대한 직접 링크" title="실행에 대한 직접 링크">​</a></h2><p>올바른 암호문을 입력했다면 정상적으로 실행이 됩니다.</p><p>그러나 이때 임의로 암호문을 수정한다면 다음과 같이 빌드를 실패합니다.</p><p><img loading="lazy" src="https://github.com/kiarakim/algorithm/assets/101039161/d003df00-bf4f-4ed2-a1ee-293cd7da6fc1" alt="실행 실패" class="img_ev3q"></p><p>그런데 뭔가 이상하지 않나요?</p><p>프로퍼티는 분명 암호화 했는데 키가 코드에 그대로 노출되어 있습니다.</p><p>Git의 public Repository에 배포하면 다른 사람들도 볼 수 있습니다.</p><p>그럼 이 키를 어디에 숨길 수 있을까요?</p><p>저는 처음에 일반 file에 키를 넣어놓고 파일을 읽어오는 식으로 키를 관리하려고 했습니다. 당연히 해당 파일은 .gitignore로 커밋 대상에서 제외해야겠죠.</p><p>그런데 이것보다 더 쉽고 빠른 방법이 있습니다.</p><p>바로 환경변수를 설정하는 것이죠.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="-환경변수-설정">+ 환경변수 설정<a href="#-환경변수-설정" class="hash-link" aria-label="+ 환경변수 설정에 대한 직접 링크" title="+ 환경변수 설정에 대한 직접 링크">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ENCRYPT_KEY</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"hello"</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>기존의 키를 관리하는 방식이었습니다.</p><p>우선 이 키를 프로퍼티에서 관리하도록 설정해볼까요?</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// JasyptConfig.class</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token annotation punctuation" style="color:#393A34">@Value</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"${jasypt.encryptor.password}"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">ENCRYPT_KEY</span><span class="token punctuation" style="color:#393A34">;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token comment" style="color:#999988;font-style:italic">// application.yml</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">jasypt</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  encryptor</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    password</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> hello</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이제 환경변수를 설정해봅시다.</p><p>Run &gt; Edit Configurations... 경로로 들어가면</p><p>Run/Debug Configurations 창이 나오는데</p><p>Environment variables: 부분에 ENCRYPT_KEY=hello</p><p>라고 적어주세요.</p><p>그 후 다시 yml 파일로 돌아와 기존 hello로 되어있는 부분을 ${ENCRYPT_KEY}로 변경하고 실행한다면 정상적으로 작동됩니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">jasypt</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  encryptor</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    password</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token constant" style="color:#36acaa">ENCRYPT_KEY</span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>긴 글 읽어주셔서 감사합니다.</p>]]></content>
        <author>
            <name>키아라</name>
            <uri>https://github.com/kiarakim</uri>
        </author>
        <category label="jasypt" term="jasypt"/>
        <category label="Spring" term="Spring"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pull Request 시 자동으로 test 실행하기]]></title>
        <id>https://car-ffeine.github.io/9</id>
        <link href="https://car-ffeine.github.io/9"/>
        <updated>2023-07-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요 박스터입니다.]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요 박스터입니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="pull-request시-자동으로-test를-실행하면-좋은-점">Pull Request시 자동으로 test를 실행하면 좋은 점<a href="#pull-request시-자동으로-test를-실행하면-좋은-점" class="hash-link" aria-label="Pull Request시 자동으로 test를 실행하면 좋은 점에 대한 직접 링크" title="Pull Request시 자동으로 test를 실행하면 좋은 점에 대한 직접 링크">​</a></h2><p>pull request 생성 시 자동으로 테스트를 돌려준다면 다른 팀원의 pr을 굳이 제 로컬에 clone하여 테스트를 돌려보지 않아도 됩니다.
많은 시간을 단축할 수 있습니다.</p><p>그리고 test가 실패한다면 강제로 Merge가 되지 않도록 한다면 실수로 테스트가 되지 않는 커밋을 올리는 것을 방지할 수 있겠죠.</p><p>이 두가지만으로도 생산성이 많이 올라갈 것을 기대할 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-할-수-있나요">어떻게 할 수 있나요<a href="#어떻게-할-수-있나요" class="hash-link" aria-label="어떻게 할 수 있나요에 대한 직접 링크" title="어떻게 할 수 있나요에 대한 직접 링크">​</a></h2><p>Github Action을 이용하여 설정한 조건에 맞는 상황에서 명령어를 실행하여 test를 할 수 있습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="github-action-파일-생성">Github Action 파일 생성<a href="#github-action-파일-생성" class="hash-link" aria-label="Github Action 파일 생성에 대한 직접 링크" title="Github Action 파일 생성에 대한 직접 링크">​</a></h3><ol><li>먼저 최상위 폴더에 <code>.github/workflows</code> 폴더를 생성합니다.</li><li>해당 폴더 내에 <code>example.yml</code>을 생성합니다.</li><li>아래와 같이 yml 파일을 작성합니다.</li></ol><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> pr test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">pull_request</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> develop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">permissions</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">contents</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> read</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">test</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> merge</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">runs-on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ubuntu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">defaults</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">working-directory</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ./backend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/checkout@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Set up JDK 17</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/setup</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">java@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">java-version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'17'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">distribution</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'adopt'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Grant execute permission for gradlew</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chmod +x gradlew</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Test with Gradle</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ./gradlew build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="job-이름-설정">Job 이름 설정<a href="#job-이름-설정" class="hash-link" aria-label="Job 이름 설정에 대한 직접 링크" title="Job 이름 설정에 대한 직접 링크">​</a></h3><p>복잡하지 않습니다. 먼저 <strong>name</strong> 속성은 github action에서 보여질 Job의 이름을 정하는 부분입니다.</p><p>지금은 <code>pr test</code>로 해두었습니다. 그럼 아래 사진과 같이 반영됩니다.</p><p><img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/assets/106640954/28494d8e-66b5-4eec-a98a-414968b03306" alt="workflows name" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="workflow-트리거-설정">workflow 트리거 설정<a href="#workflow-트리거-설정" class="hash-link" aria-label="workflow 트리거 설정에 대한 직접 링크" title="workflow 트리거 설정에 대한 직접 링크">​</a></h3><p>다음으론 <code>on</code> 속성입니다. 이 속성은 workflow를 실행할 이벤트를 지정하는데 사용됩니다. 특정 이벤트 유형과 조건을 기반으로 workflow를 트리거하도록 구성할 수 있습니다.</p><p>예를 들어 아래와 같이 정의했습니다.</p><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">push</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">pull_request</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> develop</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>그렇다면 이 workflow가 작동되는 시점은 <code>main</code> 브랜치에 <strong>push</strong>가 되거나 <code>develop</code> 브랜치에 <strong>pull request</strong>를 보낼 때 작동합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="권한-부여">권한 부여<a href="#권한-부여" class="hash-link" aria-label="권한 부여에 대한 직접 링크" title="권한 부여에 대한 직접 링크">​</a></h3><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">permissions</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">contents</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> read</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이런 권한을 주게 된다면 이 job은 읽기 권한밖에 없기 때문에 실수로 다른 것을 추가하지 못하게 막을 수 있습니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="동작할-명령어-입력">동작할 명령어 입력<a href="#동작할-명령어-입력" class="hash-link" aria-label="동작할 명령어 입력에 대한 직접 링크" title="동작할 명령어 입력에 대한 직접 링크">​</a></h3><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">test</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> merge</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">runs-on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ubuntu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">defaults</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">working-directory</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ./backend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/checkout@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Set up JDK 17</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/setup</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">java@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">java-version</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'17'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">distribution</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'adopt'</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Grant execute permission for gradlew</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> chmod +x gradlew</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Test with Gradle</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ./gradlew build</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="name">name<a href="#name" class="hash-link" aria-label="name에 대한 직접 링크" title="name에 대한 직접 링크">​</a></h4><p>제일 간단히 볼 수 있는 <strong>name</strong> 설정은 아래 사진처럼 어떤식으로 보여줄지 정할 수 있습니다.</p><p><img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/assets/106640954/43ebf3c1-4632-447f-89c3-0e74ed01dc3c" alt="job image" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="runs-on">runs-on<a href="#runs-on" class="hash-link" aria-label="runs-on에 대한 직접 링크" title="runs-on에 대한 직접 링크">​</a></h4><p><strong>runs-on</strong> 속성입니다. 해당 운영체제를 사용한다고 정의하는 부분입니다. 지금은 저희가 사용할 ec2와 같은 환경인 <code>ubuntu</code>에서 작동하도록 설정했지만,
<code>windows-latest</code>, <code>macos-latest</code>로 변경할 수도 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="environment">environment<a href="#environment" class="hash-link" aria-label="environment에 대한 직접 링크" title="environment에 대한 직접 링크">​</a></h4><p><strong>environment</strong> 속성입니다. 해당 속성은 꼭 필요한 부분이 아니지만 branch의 rule 설정에 사용할 수 있습니다. 그리고 환경을 한꺼번에 관리할 수 있습니다.</p><p>이 부분은 아래에 branch rule을 정하는 부분을 보시면 아마 이해가 될 것 입니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="defaults">defaults<a href="#defaults" class="hash-link" aria-label="defaults에 대한 직접 링크" title="defaults에 대한 직접 링크">​</a></h4><p>해당 속성은 어떤 폴더에서 명령어를 실행할 지 지정합니다. 지금의 저희 프로젝트에서는 한 repository에 backend, frontend 폴더를 나누었기 때문에 backend 폴더로 이동하여 명령어를 실행해야 합니다.</p><p>그래서 <strong>working-directory</strong>를 <code>./backend</code>라고 지정했습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="steps">steps<a href="#steps" class="hash-link" aria-label="steps에 대한 직접 링크" title="steps에 대한 직접 링크">​</a></h4><p>제일 중요한 <strong>steps</strong>입니다. 해당 속성은 어떤 명령어를 어떤 순서로 실행시킬지 정의합니다. 지금의 workflow에선</p><ol><li>Java 17 설치</li><li>gradlew 파일에 실행 권한 부여</li><li>gradle build 실행</li></ol><p>순으로 동작합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="다른-조건과-이벤트도-추가하고-싶어요">다른 조건과 이벤트도 추가하고 싶어요<a href="#다른-조건과-이벤트도-추가하고-싶어요" class="hash-link" aria-label="다른 조건과 이벤트도 추가하고 싶어요에 대한 직접 링크" title="다른 조건과 이벤트도 추가하고 싶어요에 대한 직접 링크">​</a></h3><p>저희 프로젝트는 하나의 repository에서 frontend, backend 코드를 같이 관리하는 상황입니다. 하지만 frontend 코드를 수정했다고 java 테스트를 돌리는 것은 오히려 생산성이 줄어들겠죠.</p><p>그리고 frontend도 테스트를 돌리고 싶지만 gradle을 사용하지 않습니다.</p><p>그럴 때 간단한 속성을 추가하면 <strong>파일의 변경에 따라 해당 job을 실행할 조건</strong>을 정의할 수 있습니다.</p><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">pull_request</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> develop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">paths</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> backend/</span><span class="token important">**</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> .github/</span><span class="token important">**</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>위와 달리 지금 <strong>pull request</strong>에는 속성이 하나가 더 있는데요. <strong>paths</strong>를 적용하면 <code>backend</code> 폴더 하위의 무언가 변경이 있는 <strong>pull request</strong>에만 작동을 하게 됩니다.</p><p>그럼 backend의 workflow 파일에 <strong>paths</strong> 속성을 하나 추가하고, 비슷한 frontend workflow를 만들어주면 되겠죠.</p><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> frontend test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">pull_request</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">branches</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> main</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> develop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">paths</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> frontend/</span><span class="token important">**</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">permissions</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">contents</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> read</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">test</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> jest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">runs-on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ubuntu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">environment</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> test</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">defaults</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">working-directory</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ./frontend</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/checkout@v3</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> NPM Install</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> npm i</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> Jest run</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">run</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> npm run test</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이런 식으로 yml 파일을 하나 추가하면 <strong>frontend의 수정이 일어날 때는 jest</strong>를 실행하고, <strong>backend 폴더의 수정이 일어나면 gradlew</strong>를 실행하게 할 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="test가-실패하는-pr은-merge-막기">Test가 실패하는 PR은 Merge 막기<a href="#test가-실패하는-pr은-merge-막기" class="hash-link" aria-label="Test가 실패하는 PR은 Merge 막기에 대한 직접 링크" title="Test가 실패하는 PR은 Merge 막기에 대한 직접 링크">​</a></h2><p>Test가 실패하는 Pull Request가 Merge 되는 일은 절대로 없어야 합니다. 그런 실수를 방지하려면 팀원 전부가 리뷰할 때 테스트를 돌려봐야하는 귀찮음이 생길 수 있습니다.</p><p>그리고 사람은 실수해도 기계는 거짓말을 하지 않습니다. 자동으로 막도록 동작하게 만들어놓으면 그럴 일을 미연에 방지할 수 있습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="environments-확인하기">Environments 확인하기<a href="#environments-확인하기" class="hash-link" aria-label="Environments 확인하기에 대한 직접 링크" title="Environments 확인하기에 대한 직접 링크">​</a></h3><p>먼저 해당 Repository의 Settings -&gt; Environments 탭으로 들어갑니다.
<img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/assets/106640954/4e3e867a-1037-46bc-865a-6d7d52527518" alt="environments" class="img_ev3q">
아까 <strong>environment</strong> 속성을 보면 <code>test</code>라고 설정해놓은 것을 볼 수 있습니다. 해당 환경이 여기에 적용됩니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="branch-rule-정의하기">Branch rule 정의하기<a href="#branch-rule-정의하기" class="hash-link" aria-label="Branch rule 정의하기에 대한 직접 링크" title="Branch rule 정의하기에 대한 직접 링크">​</a></h3><p>이번에는 해당 Repository의 Settings -&gt; Branches 탭으로 들어갑니다. 그리고 원하는 branch에 들어가 <code>edit</code> 버튼을 누릅니다.</p><p>그리고 사진과 같이 <strong>Require deployments to succeed before merging</strong> 속성을 클릭합니다. 그리고 아래와 같이 어떤 환경을 적용할 것인지 선택할 수 있습니다.</p><p>이 속성은 해당 배포가 성공해야 merge 할 수 있도록 브랜치를 보호하는 기능입니다.</p><p>그리고 저희는 frontend와 backend Job의 환경을 둘 다 test라는 이름으로 정의했기 때문에 하나의 environment만 선택해도 둘 다 적용되는 효과를 볼 수 있습니다.
<img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/assets/106640954/02be4679-56a2-4e47-ae01-b7025f8778a4" alt="branch rule" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="적용-후">적용 후<a href="#적용-후" class="hash-link" aria-label="적용 후에 대한 직접 링크" title="적용 후에 대한 직접 링크">​</a></h4><p>아래와 같이 merge가 안된다는 글과 빨간색으로 경고 표시를 해주고 있습니다.
<img loading="lazy" src="https://github.com/car-ffeine/car-ffeine.github.io/assets/106640954/7dfba566-c8c8-4a24-a0e3-42081f3af31c" alt="blocked" class="img_ev3q"></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="결론">결론<a href="#결론" class="hash-link" aria-label="결론에 대한 직접 링크" title="결론에 대한 직접 링크">​</a></h2><p>간단한 github action을 통해서 생산성을 많이 올릴 수 있는 좋은 기능인 것 같습니다. 다른 팀들도 이 기능을 도입하여 사용하는 것을 추천드립니다.</p>]]></content>
        <author>
            <name>박스터</name>
            <uri>https://github.com/drunkenhw</uri>
        </author>
        <category label="github" term="github"/>
        <category label="action" term="action"/>
        <category label="pr" term="pr"/>
        <category label="test" term="test"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[webpack으로 msw 설정하기]]></title>
        <id>https://car-ffeine.github.io/10</id>
        <link href="https://car-ffeine.github.io/10"/>
        <updated>2023-07-09T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[웹팩에서 msw 설정]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="웹팩에서-msw-설정">웹팩에서 msw 설정<a href="#웹팩에서-msw-설정" class="hash-link" aria-label="웹팩에서 msw 설정에 대한 직접 링크" title="웹팩에서 msw 설정에 대한 직접 링크">​</a></h2><p>이번 팀 프로젝트는 CRA와 같은 보일러 플레이트 코드를 사용하지 못하게 제한이 있다. 또한 요즘 많이 사용된다는 Vite의 사용도 제한이 있고, 웹팩으로 프로젝트를 시작하도록 강제하고 있다.</p><p>팀원 모두 한 번도 웹팩을 통해 프로젝트를 시작해본 경험이 없어 프론트엔드 팀원 각자 개인 레포에서 웹팩 공부를 진행한 후 어느정도 진척이 있을 때 팀 레포에 프로젝트를 시작하기로 했다.</p><p>다행히 웹팩으로 시작하는 프로젝트에 대한 많은 참고 자료들이 있어 첫 리액트 프로젝트 화면을 띄우는데 까지는 그리 오랜 시간이 걸리지 않았다. 그렇게 모든 팀원이 첫 웹팩 프로젝트를 성공시킨 후 모여 팀 프로젝트 초기 설정을 시작해보았다.</p><p>eslint, prettier, 웹팩 등등 여러 설정들을 하고 필요한 패키지를 설치하는데 문제가 발생했다. 큰 데이터를 다루는 백엔드의 개발 속도를 고려해 프론트엔드 개발을 진행하기 위해서 미션중에 배웠던 MSW 라이브러리를 사용하기로 결정했는데, 이 라이브러리가 우리 팀의 개발 환경에서 동작하지 않았다.</p><p>왜 동작하지 않는지 원인을 찾아보니 MSW service worker 파일을 찾을 수 없다는 오류 메세지가 나오는 것을 확인할 수 있었다. 원인을 더 자세히 알아보니 public 폴더에 있는 파일들은 웹팩이 번들링을 진행할 때 포함이 되지 않는다는 것을 알 수 있었고, 이를 어떻게 해결할 지 팀원들과 방법을 찾아보았다.</p><p>약 한시간쯤 지났을 무렵 copy-webpack-plugin 패키지를 통해 public 경로에 있는 파일들도 빌드 폴더에 포함시킬 수 있다는 것을 알게 되었다. 하지만 이 copy-webpack-plugin에 대한 사용법이 미숙해 public 폴더에 있는 mockServiceWorker.js 파일만 빌드 폴더로 옮겼어야 했는데 index.html과 같은 다른 파일들 까지 한꺼번에 빌드 폴더로 옮겨지게 되었다.</p><p>이런 저런 방법들을 시도해보다 webpack.config.js 파일의 plugins에 아래와 같은 설정을 추가 해주어 MSW를 프로젝트에 적용할 수 있게 되었다.</p><div class="language-jsx codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-jsx codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">CopyWebpackPlugin</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token literal-property property" style="color:#36acaa">patterns</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> </span><span class="token keyword module" style="color:#00009f">from</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'public/mockServiceWorker.js'</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token literal-property property" style="color:#36acaa">to</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">'.'</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// msw service worker</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>설정을 간단히 보면 public 경로에 있는 mockServiceWorker.js 파일을 빌드 후 폴더의 루트 디렉토리에 추가해준다는 설정이다.</p><p>문제 상황과 해결 방법을 간단하게 다시 정리해보면 다음과 같다.</p><ol><li>MSW를 적용해보려고 함.</li><li>웹팩에서 개발 서버를 열었을 때 MSW 실행을 위해 필요한 mockServiceWorker.js 파일을 찾을 수 없다는 오류가 발생함.</li><li>문제의 원인은 웹팩에서 번들링을 진행할 때 public 폴더 하위 경로에 있는 파일들을 무시하기 때문이었음.</li><li>문제를 해결하기 위해 public 경로에 있는 mockServiceWorker.js 파일을 번들링 후 폴더의 루트 디렉토리에 저장하도록 하는 설정을 추가해줌.</li></ol>]]></content>
        <author>
            <name>센트</name>
            <uri>https://github.com/kyw0716</uri>
        </author>
        <category label="msw" term="msw"/>
        <category label="webpack" term="webpack"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[스프링에서 발생한 에러 로그를 슬랙으로 모니터링하는 방법]]></title>
        <id>https://car-ffeine.github.io/8</id>
        <link href="https://car-ffeine.github.io/8"/>
        <updated>2023-07-07T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요 카페인팀 nunu입니다.]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요 카페인팀 nunu입니다.</p><p>오늘은 스프링에서 발생한 에러 로그를 슬랙으로 모니터링하는 방법에 대해서 알아보려고 합니다.</p><p>목차는 다음과 같습니다.</p><ol><li>스프링에서 로그를 남기는 방법</li><li>Slf4 j의 동작원리</li><li>Logback의 동작원리</li><li>Logback을 사용해서 슬랙으로 에러 로그를 모니터링하는 방법</li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="스프링에서-로그는-어떻게-찍을까">스프링에서 로그는 어떻게 찍을까?<a href="#스프링에서-로그는-어떻게-찍을까" class="hash-link" aria-label="스프링에서 로그는 어떻게 찍을까?에 대한 직접 링크" title="스프링에서 로그는 어떻게 찍을까?에 대한 직접 링크">​</a></h2><p>스프링에서 로그를 찍는 방법은 여러 가지가 있지만, 가장 간단한 방법은 <code>System.out.println()</code>을 사용하는 것입니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token annotation punctuation" style="color:#393A34">@RestController</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">TestController</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@GetMapping</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>당연하지만, 성능이 안 좋아서 실제 서비스에서는 사용하지 않습니다.</p><p>스프링에서는 Slf4 j를 통해서 로그를 남길 수 있습니다.</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token annotation punctuation" style="color:#393A34">@Slf4j</span><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic">// private final Logger log = LoggerFactory.getLogger(this.getClass()); 와 같다.</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token annotation punctuation" style="color:#393A34">@RestController</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">TestController</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@GetMapping</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"/test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">test</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        log</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">info</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"test"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이 코드를 통해서 로그를 남길 수 있는데, 자동으로 콘솔에 출력이 됩니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="스프링에서-로깅은-어떻게-작동하는-거지">스프링에서 로깅은 어떻게 작동하는 거지?<a href="#스프링에서-로깅은-어떻게-작동하는-거지" class="hash-link" aria-label="스프링에서 로깅은 어떻게 작동하는 거지?에 대한 직접 링크" title="스프링에서 로깅은 어떻게 작동하는 거지?에 대한 직접 링크">​</a></h2><p>스프링 4까지는 <code>Commons Logging</code>을 사용했었습니다.</p><p><code>Commons Logging</code>은 <code>JCL</code>이라고도 불리며, <code>JDK Logging</code>, <code>Log4 j,</code> <code>Logback</code> 등 다양한 로깅 프레임워크를 지원합니다.</p><p>JCL 은 런타임에 어떤 로깅 프레임워크를 사용할지 결정할 수 있습니다.</p><p>런타임에 어떤 로깅 프레임워크를 사용할지 결정하는 방식으로 클래스 로더에게 질의를 하는 방식으로 작동하게 되는데</p><p>클래스 로더에게 질의를 했을 경우에 몇 가지 문제점이 생깁니다</p><ol><li>클래스 로더에 명확한 표준이 없고, 부모 자식 모델이 있어서, 클래스 로더에 따라서 다른 결과가 나올 수 있습니다. <a href="http://articles.qos.ch/classloader.html" target="_blank" rel="noopener noreferrer">참고</a></li><li>클래스로더는 gc의 동작에 방해를 일으켜서 메모리 누수를 발생시킬 수 있습니다. <a href="https://cwiki.apache.org/confluence/display/COMMONS/Logging+UndeployMemoryLeak" target="_blank" rel="noopener noreferrer">참고</a></li></ol><p><code>@Slf4j</code> 어노테이션을 붙이면, 컴파일 시점에 <code>private final Logger log = LoggerFactory.getLogger(this.getClass());</code> 와 같은 코드로 변환됩니다.</p><p>스프링 5에서는 Slf4j 가 사용하는 것처럼, 컴파일 타임에 어떤 로깅 프레임워크를 사용할지 결정하는 기능을 작성했고, <code>Commons Logging</code>을 사용하지 않게 되었습니다.</p><p><a href="https://docs.spring.io/spring-framework/docs/5.0.0.RC3/spring-framework-reference/overview.html#overview-logging" target="_blank" rel="noopener noreferrer">spring 5에서 변경되었다는 링크</a></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="slf4-j에-대해서-알아보자">Slf4 j에 대해서 알아보자<a href="#slf4-j에-대해서-알아보자" class="hash-link" aria-label="Slf4 j에 대해서 알아보자에 대한 직접 링크" title="Slf4 j에 대해서 알아보자에 대한 직접 링크">​</a></h2><p>Slf4 j는 로깅을 위한 인터페이스를 제공하는 프레임워크입니다.(Simple Logging Facade for Java)</p><p>컴파일 타임에, 어떤 로그 라이브러리를 사용할지 결정하는 기능을 제공합니다.</p><p>로그 라이브러리를 바꾸려고 했을 때, 기존 코드는 하나도 건드리지 않고, 로그 라이브러리만 바꿔주면 되도록 해줍니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="조금-더-자세한-동작-원리를-알아보자">조금 더 자세한 동작 원리를 알아보자<a href="#조금-더-자세한-동작-원리를-알아보자" class="hash-link" aria-label="조금 더 자세한 동작 원리를 알아보자에 대한 직접 링크" title="조금 더 자세한 동작 원리를 알아보자에 대한 직접 링크">​</a></h3><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/lCcTc/btsmBw3OEJz/1njLV283KdUWc9qyppEdak/img.png" alt="only slf4j" class="img_ev3q"></p><p>Slf4 j 만을 사용했을 경우 위 사진 같은 형태로 요청이 처리가 됩니다.</p><p>Slf4 j 라는 인터페이스를 통해서 로그를 남기고, 어떤 로그 라이브러리를 사용할지는 <code>Slf4j binding</code>이라는 것을 통해서 결정합니다.</p><p><code>Slf4j binding</code> 은 <code>Slf4j</code>의 인터페이스를 구현하고 있지 않은 라이브러리의 구현체를 연결해 주는 역할을 합니다.</p><p>그 구현체로 <code>Slf4j-log4 j12-{version}. jar</code> 같은 것이 있다.</p><p>이와는 다르게 Logback 은 Slf4 j 를 구현하고 있기에, <code>Slf4j binding</code> 을 사용하지 않아도 됩니다.</p><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/IYC3k/btsmy0einLF/F0aiMnteJeGB00fkGdBjRK/img.png" alt="logback example" class="img_ev3q"></p><p>위 사진처럼 <code>Slf4j binding</code> 을 사용하지 않고, <code>Logback</code> 바로 사용하는 것도 가능합니다.</p><p>그렇다면 Slf4 j를 바로 사용하지 않은 코드에서 <code>Slf4j</code> 를 사용하려면 어떻게 해야 할까요?</p><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/msTPw/btsmziy04VE/sXSOKYvi9yXSoiRmg6mIGk/img.png" alt="slf4j working principle" class="img_ev3q"></p><p>위 사진처럼 <code>Slf4j bridge</code> 를 통해서 외부 라이브러리를 사용하는 것처럼 갈아 끼울 수 있습니다.</p><p><code>Log4j2</code> 를 사용하는 코드를 전혀 바꾸지 않아도, <code>Bridge</code> 가 <code>Slf4j</code> 를 통해 <code>Logback</code>으로 자연스럽게 로그를 남길 수 있도록 해줍니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="logback에-대해서-알아보자">Logback에 대해서 알아보자<a href="#logback에-대해서-알아보자" class="hash-link" aria-label="Logback에 대해서 알아보자에 대한 직접 링크" title="Logback에 대해서 알아보자에 대한 직접 링크">​</a></h2><p>Logback 은 스프링에서 기본으로 사용될 만큼 인기 있는 로그 라이브러리입니다.</p><p><img loading="lazy" src="https://logback.qos.ch/manual/images/chapters/architecture/underTheHoodSequence2_small.gif" alt="logback 동작 과정" class="img_ev3q"></p><p>공식문서에서 아주 핵심적인 동작원리를 설명해주고 있는 사진이라서 가져왔습니다.</p><p>너무 어려워 보여서, 조금 자세하게 각각의 구성요소에 대해서 알아보도록 하겠습니다</p><p>이에 대해 알아보도록 하겠습니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="로그백의-구성요소">로그백의 구성요소<a href="#로그백의-구성요소" class="hash-link" aria-label="로그백의 구성요소에 대한 직접 링크" title="로그백의 구성요소에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="appender">Appender<a href="#appender" class="hash-link" aria-label="Appender에 대한 직접 링크" title="Appender에 대한 직접 링크">​</a></h3><p>Appender는 로그를 어디에 출력할지를 결정하는 역할을 합니다.</p><p>외부로부터 어떤 데이터를 받아서, 어떤 방식으로 처리할지에 대해서 전체적으로 설정할 수 있습니다.</p><p>기본적으로 수많은 Appender 가 제공되고 있습니다.</p><ul><li>ConsoleAppender</li><li>FileAppender</li><li>RollingFileAppender</li><li>AsyncAppender</li><li>DBAppender</li><li>SMTPAppender</li><li>SocketAppender</li><li>SyslogAppender</li></ul><p>저희는 Slack에 알림을 주는 것이 목적이기 때문에, SlackAppender를 사용하면 될 것 같습니다.</p><p>하지만 SlackAppender는 제공되고 있지 않기에 직접 구현을 해야 하는데요</p><p>이를 구현했을 때, Slack API 가 끝날 때까지, 계속 기다리고 있을 필요가 없기에, AsyncAppender를 사용하는 것이 좋을 것 같습니다.</p><p>사용 방법은 다음과 같습니다. xml 기반으로 가능한데요</p><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">FILE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ch.qos.logback.core.FileAppender</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">file</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">myapp.log</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">file</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">encoder</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">pattern</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">%logger{35} -%kvp -%msg%n</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">pattern</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">encoder</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ASYNC</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ch.qos.logback.classic.AsyncAppender</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">FILE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">root</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">level</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">DEBUG</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ASYNC</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">root</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>만약 여기에 있는 기능들로 부족하다면, 직접 Appender 를 구현해서 사용할 수도 있습니다.</p><p>직접 구현하려면 AppenderBase를 상속받아서 구현하면 됩니다.</p><p>이 클래스는 필요한 부분이 대부분 구현되어 있고, appender 만 구현하면 바로 사용할 수 있습니다. 당연하지만 필요하다면 override 도 가능하죠</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="layout">Layout<a href="#layout" class="hash-link" aria-label="Layout에 대한 직접 링크" title="Layout에 대한 직접 링크">​</a></h3><p>Layout 은 로그를 어떤 형식으로 출력할지를 결정하는 역할을 합니다.</p><p>Appender는 로그를 어디에 출력할지를 결정하는 역할을 하고, Layout 은 로그를 어떤 형식으로 출력할지를 결정하는 역할을 하도록 하는 것이 이상적이지만</p><p>Logback 은 Appender에서 Layout 을 직접 지정할 수 있도록 해주고 있습니다.</p><p>따라서, 직접 Layout 을 만들지 않고, Appender 에서 기존에 이미 있는 패턴만 사용하려고 합니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="encoder">Encoder<a href="#encoder" class="hash-link" aria-label="Encoder에 대한 직접 링크" title="Encoder에 대한 직접 링크">​</a></h3><p>Encoder는 Layout 과 비슷한 역할을 합니다.</p><p>Layout 은 로그를 어떤 형식으로 출력할지를 결정하는 역할을 하고, Encoder 는 실제 byte 형태로 변환하는 역할을 합니다.</p><p>Slack의 webhook을 사용할 것이지만, AppenderBase를 사용하기에, 이번에는 사용할 수 없습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="filter">Filter<a href="#filter" class="hash-link" aria-label="Filter에 대한 직접 링크" title="Filter에 대한 직접 링크">​</a></h3><p>Filter는 로그를 어떤 조건에 따라서 출력할지를 결정하는 역할을 합니다.</p><p>Filter 는 Appender를 등록하며 같이 등록할 수 있는데요</p><p>이번 프로젝트에서는 Level 이 ERROR 이상인 것만 출력하도록 하고 싶기에, LevelFilter를 사용하면 좋을 것 같습니다.</p><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">CONSOLE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ch.qos.logback.core.ConsoleAppender</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">filter</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ch.qos.logback.classic.filter.LevelFilter</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">level</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">INFO</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">level</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">onMatch</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">ACCEPT</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">onMatch</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">onMismatch</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain">DENY</span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">onMismatch</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">filter</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">encoder</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">pattern</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        %-4relative [%thread] %-5level %logger{30} -%kvp -%msg%n</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">pattern</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">encoder</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">root</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">level</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">DEBUG</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">CONSOLE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">root</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>와 비슷하게 사용할 수 있어 보입니다.</p><p>그러면 실제로 프로젝트에서 error 발생 시 slack으로 알림을 주는 것을 구현해 보도록 하겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="슬랙에-추가하는-방법">슬랙에 추가하는 방법<a href="#슬랙에-추가하는-방법" class="hash-link" aria-label="슬랙에 추가하는 방법에 대한 직접 링크" title="슬랙에 추가하는 방법에 대한 직접 링크">​</a></h2><p><a href="https://velog.io/@king/slack-incoming-webhook" target="_blank" rel="noopener noreferrer">이 블로그</a>를 보고서 작성했습니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="실제-구현">실제 구현<a href="#실제-구현" class="hash-link" aria-label="실제 구현에 대한 직접 링크" title="실제 구현에 대한 직접 링크">​</a></h2><p>구현된 결과물은 아래와 같습니다</p><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/d3z7QG/btsmQCCV69f/NwiyNhQGZOBnKBP2hT8kf0/img.png" alt="slack appender" class="img_ev3q"></p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="slackappender-구현하기">SlackAppender 구현하기<a href="#slackappender-구현하기" class="hash-link" aria-label="SlackAppender 구현하기에 대한 직접 링크" title="SlackAppender 구현하기에 대한 직접 링크">​</a></h3><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">SlackAppender</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">extends</span><span class="token plain"> </span><span class="token class-name">AppenderBase</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">ILoggingEvent</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Override</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">protected</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">append</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">ILoggingEvent</span><span class="token plain"> eventObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> restTemplate </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">RestTemplate</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">var</span><span class="token plain"> url </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"https://hooks.slack.com/services/"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">Map</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">String</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics class-name">Object</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> body </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createSlackErrorBody</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eventObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        restTemplate</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">postForEntity</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">url</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> body</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">class</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">Map</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">String</span><span class="token generics punctuation" style="color:#393A34">,</span><span class="token generics"> </span><span class="token generics class-name">Object</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createSlackErrorBody</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">ILoggingEvent</span><span class="token plain"> eventObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> message </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createMessage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eventObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">Map</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token string" style="color:#e3116c">"attachments"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">List</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token class-name">Map</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"fallback"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"요청을 실패했어요 :cry:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"color"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"#2eb886"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"pretext"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"에러가 발생했어요 확인해주세요 :cry:"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"author_name"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"car-ffeine"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"text"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> message</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"fields"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">List</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                        </span><span class="token class-name">Map</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"title"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"우선순위"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"value"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"High"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"short"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                        </span><span class="token class-name">Map</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"title"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"서버 환경"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"value"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"local"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                                </span><span class="token string" style="color:#e3116c">"short"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token boolean" style="color:#36acaa">false</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                </span><span class="token string" style="color:#e3116c">"ts"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getTimeStamp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">private</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">createMessage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">ILoggingEvent</span><span class="token plain"> eventObject</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> baseMessage </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"에러가 발생했습니다.\n"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> pattern </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> baseMessage </span><span class="token operator" style="color:#393A34">+</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"```%s %s %s [%s] - %s```"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">final</span><span class="token plain"> </span><span class="token class-name">SimpleDateFormat</span><span class="token plain"> simpleDateFormat </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"yyyy-MM-dd HH:mm:ss.SSS"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">return</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">pattern</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                simpleDateFormat</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getTimeStamp</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getLevel</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getThreadName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getLoggerName</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                eventObject</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getFormattedMessage</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이 과정에서 url을 직접 입력하시면 됩니다.</p><p>그리고, 이렇게 만든 SlackAppender를 logback-spring.xml 에 등록하면 됩니다.</p><div class="language-xml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-xml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token prolog" style="color:#999988;font-style:italic">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">scan</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">true</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">scanPeriod</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">60 seconds</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">include</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">resource</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">org/springframework/boot/logging/logback/defaults.xml</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">property</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">LOG_FILE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">value</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">${LOG_FILE:-${LOG_PATH:-${LOG_TEMP:-${java.io.tmpdir:-/tmp}}}/spring.log}</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">include</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">resource</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">org/springframework/boot/logging/logback/console-appender.xml</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">include</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">resource</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">org/springframework/boot/logging/logback/file-appender.xml</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">root</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">level</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">INFO</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">FILE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">CONSOLE</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">root</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">SLACK_APPENDER</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">racingcar.SlackAppender</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ASYNC_SLACK_APPENDER</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">class</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ch.qos.logback.classic.AsyncAppender</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">SLACK_APPENDER</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">appender</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">logger</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">name</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">racingcar</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">level</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ERROR</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">additivity</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">true</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token tag punctuation" style="color:#393A34">&lt;</span><span class="token tag" style="color:#00009f">appender-ref</span><span class="token tag" style="color:#00009f"> </span><span class="token tag attr-name" style="color:#00a4db">ref</span><span class="token tag attr-value punctuation attr-equals" style="color:#393A34">=</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag attr-value" style="color:#e3116c">ASYNC_SLACK_APPENDER</span><span class="token tag attr-value punctuation" style="color:#393A34">"</span><span class="token tag punctuation" style="color:#393A34">/&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">logger</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token tag punctuation" style="color:#393A34">&lt;/</span><span class="token tag" style="color:#00009f">configuration</span><span class="token tag punctuation" style="color:#393A34">&gt;</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이렇게 하면, racingcar 패키지에서 에러가 발생할 때만 slack으로 알림을 받을 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="결론">결론<a href="#결론" class="hash-link" aria-label="결론에 대한 직접 링크" title="결론에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/d3z7QG/btsmQCCV69f/NwiyNhQGZOBnKBP2hT8kf0/img.png" alt="slack appender" class="img_ev3q"></p><p>이번 글에서는 log 레벨에 따라 slack 으로 알림을 받는 방법을 알아보았습니다.</p><p>긴 글을 읽어주셔서 감사합니다</p>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="spring" term="spring"/>
        <category label="slack" term="slack"/>
        <category label="error" term="error"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[깃 커밋 메시지에 이슈 번호를 자동으로 입력할 순 없을까?]]></title>
        <id>https://car-ffeine.github.io/7</id>
        <link href="https://car-ffeine.github.io/7"/>
        <updated>2023-07-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[프로젝트 브랜치명 컨벤션이 feat/이슈번호여서, 브랜치명에서 이슈번호만 가져온 다음 커밋할 때마다 커밋 메시지 아래단(footer)에 이슈 번호를 자동으로 입력해주고 싶었다. 자동으로 입력된다면 깜빡하고 이슈 번호를 안 적는 일도 없고, 시간도 단축할 수 있기 때문이다.]]></summary>
        <content type="html"><![CDATA[<p>프로젝트 브랜치명 컨벤션이 feat/이슈번호여서, 브랜치명에서 이슈번호만 가져온 다음 커밋할 때마다 커밋 메시지 아래단(footer)에 이슈 번호를 자동으로 입력해주고 싶었다. 자동으로 입력된다면 깜빡하고 이슈 번호를 안 적는 일도 없고, 시간도 단축할 수 있기 때문이다.</p><p>아래 순서대로 진행한다면 이슈 번호 POSTFIX 자동화를 할 수 있다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="1-프로젝트-폴더에-githooks-폴더-생성">1) 프로젝트 폴더에 .githooks 폴더 생성<a href="#1-프로젝트-폴더에-githooks-폴더-생성" class="hash-link" aria-label="1) 프로젝트 폴더에 .githooks 폴더 생성에 대한 직접 링크" title="1) 프로젝트 폴더에 .githooks 폴더 생성에 대한 직접 링크">​</a></h3><h3 class="anchor anchorWithStickyNavbar_LWe7" id="2-githooks-폴더에-commit-msg-파일-생성">2) .githooks 폴더에 commit-msg 파일 생성<a href="#2-githooks-폴더에-commit-msg-파일-생성" class="hash-link" aria-label="2) .githooks 폴더에 commit-msg 파일 생성에 대한 직접 링크" title="2) .githooks 폴더에 commit-msg 파일 생성에 대한 직접 링크">​</a></h3><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token shebang important">#!/bin/bash</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">COMMIT_MESSAGE_FILE_PATH</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$1</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">MESSAGE</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">cat</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable string" style="color:#e3116c">"</span><span class="token variable string variable" style="color:#36acaa">$COMMIT_MESSAGE_FILE_PATH</span><span class="token variable string" style="color:#e3116c">"</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 커밋 메시지가 없을 때, 커밋 방지</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">head</span><span class="token variable" style="color:#36acaa"> -1 </span><span class="token variable string" style="color:#e3116c">"</span><span class="token variable string variable" style="color:#36acaa">$COMMIT_MESSAGE_FILE_PATH</span><span class="token variable string" style="color:#e3116c">"</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">==</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">''</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token builtin class-name">exit</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fi</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># 브랜치명에서 이슈 번호만 추출 ('/' 뒤에 있는 문자만 추출)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">POSTFIX</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">git</span><span class="token variable" style="color:#36acaa"> branch </span><span class="token variable operator" style="color:#393A34">|</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable function" style="color:#d73a49">grep</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable string" style="color:#e3116c">'\*'</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable operator" style="color:#393A34">|</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable function" style="color:#d73a49">sed</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable string" style="color:#e3116c">'s/* //'</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable operator" style="color:#393A34">|</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable function" style="color:#d73a49">sed</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable string" style="color:#e3116c">'s/^.*\///'</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable operator" style="color:#393A34">|</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable function" style="color:#d73a49">sed</span><span class="token variable" style="color:#36acaa"> </span><span class="token variable string" style="color:#e3116c">'s/^\([^-]*-[^-]*\).*/\1/'</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">COMMIT_SOURCE</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$2</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token assign-left variable" style="color:#36acaa">CURRENT_BRANCH</span><span class="token operator" style="color:#393A34">=</span><span class="token variable" style="color:#36acaa">$(</span><span class="token variable function" style="color:#d73a49">git</span><span class="token variable" style="color:#36acaa"> branch --show-current</span><span class="token variable" style="color:#36acaa">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># [[ "$CURRENT_BRANCH" != "$POSTFIX" ]] 👉🏻 현재 브랜치명과 POSTFIX가 똑같으면 POSTFIX 입력 방지</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># [ "$COMMIT_SOURCE" != "merge" ] 👉🏻 merge할 때, POSTFIX 입력 방지</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token comment" style="color:#999988;font-style:italic"># [[ "$MESSAGE" != *"[#$POSTFIX]"* ]] 👉🏻 이미 POSTFIX가 존재할 때, POSTFIX 중복 입력 방지</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$CURRENT_BRANCH</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$POSTFIX</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$COMMIT_SOURCE</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"merge"</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&amp;&amp;</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$MESSAGE</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">!=</span><span class="token plain"> *</span><span class="token string" style="color:#e3116c">"[#</span><span class="token string variable" style="color:#36acaa">$POSTFIX</span><span class="token string" style="color:#e3116c">]"</span><span class="token plain">* </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token builtin class-name">printf</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"%s</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string entity" style="color:#36acaa">\n</span><span class="token string" style="color:#e3116c">[#%s]"</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$MESSAGE</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$POSTFIX</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"</span><span class="token string variable" style="color:#36acaa">$COMMIT_MESSAGE_FILE_PATH</span><span class="token string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token keyword" style="color:#00009f">fi</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>🧐 이슈 번호 추출에 사용된 명령어 설명</p><ul><li>grep '<!-- -->*<!-- -->' 👉 <code>*</code> 표시된 브랜치(현재 위치의 브랜치)를 가져온다.</li><li>sed 's/_ //' 👉 <code>*</code> 제거</li><li>sed 's/<!-- -->(<sup id="fnref-/-33a37a"><a href="#fn-/-33a37a" class="footnote-ref">/</a></sup><em>)<!-- -->.</em>/\1/' 👉 <code>/</code> 이후의 문자만 추출</li><li>sed 's/^<!-- -->(<sup id="fnref---33a37a"><a href="#fn---33a37a" class="footnote-ref">-</a></sup><em>-<sup id="fnref---33a37a"><a href="#fn---33a37a" class="footnote-ref">-</a></sup></em>)<!-- -->.<!-- -->_<!-- -->/\1/' 👉 하나의 이슈에 여러 브랜치를 만들면서 feat/10-1 이런 형태로 브랜치를 만들 경우, 첫 번째 '-' 앞 뒤만 추출 (ex. 10-1)</li></ul><h3 class="anchor anchorWithStickyNavbar_LWe7" id="3-프로젝트-폴더에-makefile-파일-생성">3) 프로젝트 폴더에 Makefile 파일 생성<a href="#3-프로젝트-폴더에-makefile-파일-생성" class="hash-link" aria-label="3) 프로젝트 폴더에 Makefile 파일 생성에 대한 직접 링크" title="3) 프로젝트 폴더에 Makefile 파일 생성에 대한 직접 링크">​</a></h3><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">init:</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config core.hooksPath .githooks</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">chmod</span><span class="token plain"> +x .githooks/commit-msg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token function" style="color:#d73a49">git</span><span class="token plain"> update-index --chmod</span><span class="token operator" style="color:#393A34">=</span><span class="token plain">+x .githooks/commit-msg</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># chmod +x .githooks/commit-msg 👉🏻 macOS, 리눅스에서 스크립트 권한 부여</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># git update-index --chmod=+x .githooks/commit-msg</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> </span><span class="token comment" style="color:#999988;font-style:italic"># 👉 macOS, 리눅스에서 브랜치가 바뀔 때마다 스크립트 실행시켜줘야 하는 문제 해결</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="4-아래-코드-실행">4) 아래 코드 실행<a href="#4-아래-코드-실행" class="hash-link" aria-label="4) 아래 코드 실행에 대한 직접 링크" title="4) 아래 코드 실행에 대한 직접 링크">​</a></h3><p>새로 git clone을 할 때마다 아래 코드를 실행시켜줘야 한다. 한 번만 실행시키면 계속 적용된다. (window 기준)</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">git</span><span class="token plain"> config core.hooksPath .githooks</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>❗macOS는 git clone 할 때마다 아래 코드를 실행시켜줘야 한다.</p><div class="language-shell codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-shell codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token function" style="color:#d73a49">make</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><hr><p>참고 블로그
<a href="https://blog.deering.co/commit-convention/" target="_blank" rel="noopener noreferrer">https://blog.deering.co/commit-convention/</a></p>]]></content>
        <author>
            <name>야미</name>
            <uri>https://github.com/feb-dain</uri>
        </author>
        <category label="git" term="git"/>
        <category label="commit" term="commit"/>
        <category label="message" term="message"/>
        <category label="issue" term="issue"/>
        <category label="auto" term="auto"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[[DB] 대량의 데이터를 DB에 넣는 과정을 최적화해보자]]></title>
        <id>https://car-ffeine.github.io/6</id>
        <link href="https://car-ffeine.github.io/6"/>
        <updated>2023-07-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요 카페인팀 누누입니다]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요 카페인팀 <code>누누</code>입니다</p><p>이번에는 대량의 데이터를 DB에 넣는 과정을 최적화하는 과정에서 알게 된 내용을 공유하려고 합니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="이번-최적화의-목표">이번 최적화의 목표<a href="#이번-최적화의-목표" class="hash-link" aria-label="이번 최적화의 목표에 대한 직접 링크" title="이번 최적화의 목표에 대한 직접 링크">​</a></h2><p>전기차 충전소에 대한 공공 데이터를 가져오고, 그 데이터를 DB 에 넣는 과정을 최적화해보자</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="대량의-데이터를-삽입하는-과정">대량의 데이터를 삽입하는 과정<a href="#대량의-데이터를-삽입하는-과정" class="hash-link" aria-label="대량의 데이터를 삽입하는 과정에 대한 직접 링크" title="대량의 데이터를 삽입하는 과정에 대한 직접 링크">​</a></h2><p>저희 팀의 요구사항을 간단하게 정리하면 다음과 같습니다</p><ol><li>대량의 데이터를 공공 데이터에서 전기차 충전소와 전기차 충전기에 대한 데이터를 가져온다<ul><li>충전소는 6만 개, 충전기는 23만 개의 데이터가 존재한다.</li><li>한 번에 가져올 수 있는 양은 9999개 까지다.</li></ul></li><li>이 데이터를 DB에 넣는다<ul><li>충전소와 충전기는 1:N 관계이다</li></ul></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="최적화-전은-어떤-상황이었는데">최적화 전은 어떤 상황이었는데?<a href="#최적화-전은-어떤-상황이었는데" class="hash-link" aria-label="최적화 전은 어떤 상황이었는데?에 대한 직접 링크" title="최적화 전은 어떤 상황이었는데?에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="https://veiled-starfish-4c7.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Ffb934c88-4589-4096-90bc-36b4bc88f6a2%2FUntitled.png?id=f7f7c2af-7b95-42e8-8d95-ddd952e53005&amp;table=block&amp;spaceId=9db11c89-12d2-4910-8822-5ffecbdb8ccd&amp;width=2000&amp;userId=&amp;cache=v2" alt="before_optimize" class="img_ev3q"></p><p>위 사진을 잘 보시면 아실 수 있으시겠지만, 2000개를 저장하는데, 231.762 초가 사용되었습니다.</p><p>물론 출력을 위한 시간도 포함되었기에, 230초 정도라고 생각하셔도 좋습니다</p><p>1만 개라면? 231.762초 <!-- -->*<!-- --> 5 = 1,158.81초</p><p>23만 개라면? 1158.81 <!-- -->*<!-- --> 23 = 26,652.63초</p><p>시간으로 바꿔보면 7.4 시간이 걸린다는 것을 볼 수 있습니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점" class="hash-link" aria-label="이 과정에서 볼 수 있는 문제점에 대한 직접 링크" title="이 과정에서 볼 수 있는 문제점에 대한 직접 링크">​</a></h3><ol><li>데이터를 저장할 때마다, 새로운 Transaction 이 생성된다.</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-개선할-수-있을까">어떻게 개선할 수 있을까?<a href="#어떻게-개선할-수-있을까" class="hash-link" aria-label="어떻게 개선할 수 있을까?에 대한 직접 링크" title="어떻게 개선할 수 있을까?에 대한 직접 링크">​</a></h3><p>데이터를 저장할 때마다, 새로운 Transaction 이 생성되는 것을 방지하기 위해, 전체를 하나의 트랜잭션으로 묶는다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="전체를-한-트랜잭션으로-묶은-버전">전체를 한 트랜잭션으로 묶은 버전<a href="#전체를-한-트랜잭션으로-묶은-버전" class="hash-link" aria-label="전체를 한 트랜잭션으로 묶은 버전에 대한 직접 링크" title="전체를 한 트랜잭션으로 묶은 버전에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="https://veiled-starfish-4c7.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F9ff34622-4a26-4acd-980c-ae175c83143d%2FUntitled.png?id=979aa2c5-e972-4c52-a44a-1669c497c84e&amp;table=block&amp;spaceId=9db11c89-12d2-4910-8822-5ffecbdb8ccd&amp;width=2000&amp;userId=&amp;cache=v2" alt="all_in_transaction" class="img_ev3q"></p><p>이 과정에서 2000개를 저장하는데 65초 가 사용되었습니다.</p><p>1만 개라면? 65초 <!-- -->*<!-- --> 5 = 325초</p><p>23만 개라면? 325초 <!-- -->*<!-- --> 23 = 7,475초</p><p>시간으로 바꿔보면 2시간이 걸린다는 것을 볼 수 있습니다</p><p>전체적으로 3배 정도 빨라졌습니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점-1">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점-1" class="hash-link" aria-label="이 과정에서 볼 수 있는 문제점에 대한 직접 링크" title="이 과정에서 볼 수 있는 문제점에 대한 직접 링크">​</a></h3><ol><li>23만 개의 저장이 모두 한 트랜잭션이 되어서, 하나가 실패하면 23만개를 새로 저장해야 하는 상황에 처한다</li></ol><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-개선할-수-있을까-1">어떻게 개선할 수 있을까?<a href="#어떻게-개선할-수-있을까-1" class="hash-link" aria-label="어떻게 개선할 수 있을까?에 대한 직접 링크" title="어떻게 개선할 수 있을까?에 대한 직접 링크">​</a></h3><p>23만개의 저장이 모두 한 트랜잭션이 되는 것을 방지하기 위해, 1만 개씩 영속화시킨다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1만-개가-한-트랜잭션으로-묶인-버전">1만 개가 한 트랜잭션으로 묶인 버전<a href="#1만-개가-한-트랜잭션으로-묶인-버전" class="hash-link" aria-label="1만 개가 한 트랜잭션으로 묶인 버전에 대한 직접 링크" title="1만 개가 한 트랜잭션으로 묶인 버전에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/c2mgfd/btsmrWCfnKy/9Y6Dv8vYzcftsket61tub1/img.png" alt="separateTransaction" class="img_ev3q"></p><p>성능상으로 개선한 부분은 그렇게 크지 않지만, 실패했을 때, 1만 개만 다시 저장하면 되기에, 훨씬 빠르게 복구가 가능합니다.</p><p>여기서 PageNo라는 클래스는, i를 바로 참조했을 경우, effectively final을 보장할 수 없어서 만들었습니다.</p><p>성능은 전체를 한 트랜잭션으로 묶은 버전과 큰 차이가 나지 않습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점-2">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점-2" class="hash-link" aria-label="이 과정에서 볼 수 있는 문제점에 대한 직접 링크" title="이 과정에서 볼 수 있는 문제점에 대한 직접 링크">​</a></h3><ol><li>id 생성 전략이 <code>GenerationType.IDENTITY</code> 이기에, 데이터를 저장할 때마다, DB에서 id를 생성해야 한다.</li></ol><p>JPA에 있는 쓰기 지연을 전혀 활용할 수 없고, DB에서 id를 생성하기 위해, DB와 매번 통신을 해야 한다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-개선할-수-있을까-2">어떻게 개선할 수 있을까?<a href="#어떻게-개선할-수-있을까-2" class="hash-link" aria-label="어떻게 개선할 수 있을까?에 대한 직접 링크" title="어떻게 개선할 수 있을까?에 대한 직접 링크">​</a></h3><p>id를 미리 생성해서, DB 에서 id 를 생성하는 과정을 생략한다</p><p>ID 생성 전략을 <code>GenerationType.Table의</code> 형태로 바꿔서, DB에서 id를 생성하는 과정을 줄여서, 성능을 개선한다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1만-개가-한-트랜잭션으로-묶이고-id를-미리-생성한-버전">1만 개가 한 트랜잭션으로 묶이고, id를 미리 생성한 버전<a href="#1만-개가-한-트랜잭션으로-묶이고-id를-미리-생성한-버전" class="hash-link" aria-label="1만 개가 한 트랜잭션으로 묶이고, id를 미리 생성한 버전에 대한 직접 링크" title="1만 개가 한 트랜잭션으로 묶이고, id를 미리 생성한 버전에 대한 직접 링크">​</a></h2><p>이때 batch size를 1000 단위로 설정해서 1000개씩 id 가 늘어나도록 설정했다</p><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/bFjNWb/btsmuoLmzVh/GddHebu2V43fpk2t3IUmz0/img.png" alt="charger_generator" class="img_ev3q"><img loading="lazy" src="https://blog.kakaocdn.net/dn/pae8w/btsmrANjAGi/gjUhD6sMvBLpmsPl9c1tAk/img.png" alt="station_generator" class="img_ev3q"></p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spring.jdbc.template.fetch-size=10000</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/mtBFp/btsmtEt48jp/3mFOfrIBWbjJhHHuyP4zPk/img.png" alt="10000batch_size" class="img_ev3q"></p><p>1자리 숫자는 앞에서부터 n(만개)를 의미하고, 2번째 숫자는 1만 개를 저장하는 데 걸린 시간(ms)을 의미합니다.</p><p>처음 1만 개는 142초가 걸리고, 2만 개는 285초가 걸렸습니다.</p><p>23만 개라면? 142 <!-- -->*<!-- --> 26 = 3,266초</p><p>처음과 비교하자면 7.4시간이 걸리는 것에서 54분 정도 걸리는 것으로 개선되었습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점-3">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점-3" class="hash-link" aria-label="이 과정에서 볼 수 있는 문제점에 대한 직접 링크" title="이 과정에서 볼 수 있는 문제점에 대한 직접 링크">​</a></h3><p>하나의 스레드에서만 동작하기에, 성능이 개선되었지만, 여전히 느립니다.</p><p>하나의 스레드에서만 동작하기에, 하나의 커넥션을 사용하게 됩니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-개선할-수-있을까-3">어떻게 개선할 수 있을까?<a href="#어떻게-개선할-수-있을까-3" class="hash-link" aria-label="어떻게 개선할 수 있을까?에 대한 직접 링크" title="어떻게 개선할 수 있을까?에 대한 직접 링크">​</a></h3><p>여러 스레드에서 동작하게 하고, 여러 커넥션을 사용하게 합니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="여러-스레드에서-동작하고-여러-커넥션을-사용하는-버전">여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전<a href="#여러-스레드에서-동작하고-여러-커넥션을-사용하는-버전" class="hash-link" aria-label="여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전에 대한 직접 링크" title="여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/bPV2aa/btsmrSfU2D4/phDwk77XiKvwiXa5geX0PK/img.png" alt="multi_thread" class="img_ev3q"></p><p>이 버전에서 89991 개를 저장하는데 총 157초가 걸렸습니다.</p><p>23만 개라면? 157 <!-- -->*<!-- --> 3 = 471초</p><p>시간으로 바꿔보면 5분도 채 걸리지 않는 시간이죠</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점-4">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점-4" class="hash-link" aria-label="이 과정에서 볼 수 있는 문제점에 대한 직접 링크" title="이 과정에서 볼 수 있는 문제점에 대한 직접 링크">​</a></h3><p>hikari connection pool 사이즈를 10으로 설정했는데, 10개의 커넥션을 사용하면서 저장을 하다 보니, 10개의 커넥션을 모두 사용하고 나서, 11번째부터는 커넥션을 가져오기 위해, 기다려야 하는 상황이 발생합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="어떻게-개선할-수-있을까-4">어떻게 개선할 수 있을까?<a href="#어떻게-개선할-수-있을까-4" class="hash-link" aria-label="어떻게 개선할 수 있을까?에 대한 직접 링크" title="어떻게 개선할 수 있을까?에 대한 직접 링크">​</a></h3><p>hikari connection pool 사이즈를 25로 설정해서, 25개의 커넥션을 사용하도록 합니다.</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">spring.datasource.hikari.maximum-pool-size=25</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="여러-스레드에서-동작하고-여러-커넥션을-사용하는-버전-2">여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전 2<a href="#여러-스레드에서-동작하고-여러-커넥션을-사용하는-버전-2" class="hash-link" aria-label="여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전 2에 대한 직접 링크" title="여러 스레드에서 동작하고, 여러 커넥션을 사용하는 버전 2에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="https://blog.kakaocdn.net/dn/vJEoD/btsmsfau8Mv/j0CT8fVrAp3LKGRMmyMVeK/img.png" alt="multi_thread2" class="img_ev3q"></p><p>총 13만 개의 데이터를 저장하는데, 147초가 걸리고, db 인스턴스의 cpu 사용률이 100%에 가까워져서 ec2 가 다운되었습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="이-과정에서-볼-수-있는-문제점-5">이 과정에서 볼 수 있는 문제점<a href="#이-과정에서-볼-수-있는-문제점-5" class="hash-link" aria-label="이 과정에서 볼 수 있는 문제점에 대한 직접 링크" title="이 과정에서 볼 수 있는 문제점에 대한 직접 링크">​</a></h3><p>db의 cpu 사용량을 고려하지 않고, 23만 개가 조금 넘는 데이터를 25개의 커넥션을 활용해 저장하려고 했습니다</p><h1>결론</h1><ol><li>데이터를 저장할 때마다, transaction을 사용하지 말자</li><li>데이터를 저장할 때마다, id를 생성하지 말자</li><li>여러 스레드에서 동작하고, 여러 커넥션을 사용하자</li><li>db의 cpu 사용량을 고려하자</li></ol><p>긴 글 읽어주셔서 감사합니다</p>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <author>
            <name>박스터</name>
            <uri>https://github.com/drunkenhw</uri>
        </author>
        <category label="DB" term="DB"/>
        <category label="JPA" term="JPA"/>
        <category label="Hibernate" term="Hibernate"/>
        <category label="Spring" term="Spring"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[pr 본문에 이슈 번호를 달아주는 기능을 만들었습니다]]></title>
        <id>https://car-ffeine.github.io/5</id>
        <link href="https://car-ffeine.github.io/5"/>
        <updated>2023-07-04T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요 우테코 카페인팀 누누입니다]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요 우테코 카페인팀 누누입니다</p><p>빠르게 결과부터 보고 가시죠.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="어떤-결과가-나왔나요">어떤 결과가 나왔나요?<a href="#어떤-결과가-나왔나요" class="hash-link" aria-label="어떤 결과가 나왔나요?에 대한 직접 링크" title="어떤 결과가 나왔나요?에 대한 직접 링크">​</a></h2><p>pr의 본문 끝에, 연관된 이슈 번호를 달아주는 기능을 만들었습니다.</p><p>밑에 사진을 보시면 쉽게 이해하실 수 있을 것 같습니다.</p><p><img loading="lazy" src="https://user-images.githubusercontent.com/80899085/250614527-e2672cf2-786a-434c-a8b6-8b374de4d689.png" alt="img" class="img_ev3q"><img loading="lazy" src="https://user-images.githubusercontent.com/80899085/250614882-d99aa570-51e2-4565-ab4c-ccdbd4d36e57.png" alt="img" class="img_ev3q"></p><p>github에서 issue 번호가 pr에 담겨있다면 2가지 장점이 생기는데요.</p><ol><li>issue를 클릭했을 때, 자동으로 그 issue로 넘어갈 수 있습니다. (호버만으로 이슈에 대한 간단한 정보를 볼 수 있습니다)</li><li>pr 이 merge 되었을 때, 자동으로 issue 가 close 됩니다.</li></ol><p>이 과정을 손으로 진행하는 것보다, 자동으로 진행하게 되면 실수도 줄어들고, 개발 과정이 편해질 것 같아서 이 기능을 제작하게 되었는데요</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="중요한-점">중요한 점<a href="#중요한-점" class="hash-link" aria-label="중요한 점에 대한 직접 링크" title="중요한 점에 대한 직접 링크">​</a></h2><p><strong>이 과정을 진행하려면 밑에서 소개해드릴 브랜치 네이밍 규칙이 필요합니다.</strong></p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="브랜치-이름-규칙">브랜치 이름 규칙<a href="#브랜치-이름-규칙" class="hash-link" aria-label="브랜치 이름 규칙에 대한 직접 링크" title="브랜치 이름 규칙에 대한 직접 링크">​</a></h2><ul><li>브랜치 이름은 <code>타입/이슈번호</code> 으로 구성합니다. ex) <code>feat/1</code></li><li>타입은 <code>feat</code>, <code>fix</code>, <code>docs</code>, <code>refactor</code>, <code>test</code> 등 여러 가지가 있을 수 있습니다.</li></ul><p>이렇게 했을 때, 이슈 번호를 브랜치 명에서부터 가져올 수 있기에, 자동화를 할 수 있습니다.</p><p>이런 규칙이 아닌, feat/action 같은 형태가 된다면 issue 번호를 찾기 어렵겠죠?</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="사용-방법">사용 방법<a href="#사용-방법" class="hash-link" aria-label="사용 방법에 대한 직접 링크" title="사용 방법에 대한 직접 링크">​</a></h2><p>작성된 코드부터 보시고, 설명을 드리겠습니다.</p><p>아래에 작성된 코드를. github/workflows/assign<!-- -->_<!-- -->issue<!-- -->_<!-- -->number<!-- -->_<!-- -->to<!-- -->_<!-- -->pr<!-- -->_<!-- -->body.yml로 저장하시면 끝입니다.</p><div class="language-yml codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-yml codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> assign_issue_number_to_pr_body</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">pull_request</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">types</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"> opened </span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">branches-ignore</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> develop</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token key atrule" style="color:#00a4db">jobs</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token key atrule" style="color:#00a4db">append_issue_number_to_pr_body</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">runs-on</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> ubuntu</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">latest</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token key atrule" style="color:#00a4db">steps</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain"> </span><span class="token key atrule" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> append feature number to pr body pr branch = feat/(issueNumber)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">uses</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> actions/github</span><span class="token punctuation" style="color:#393A34">-</span><span class="token plain">script@v4</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token key atrule" style="color:#00a4db">with</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">github-token</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> $</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"> secrets.GITHUB_TOKEN </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">          </span><span class="token key atrule" style="color:#00a4db">script</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">|</span><span class="token scalar string" style="color:#e3116c"></span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            const pr = await github.pulls.get({</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">                owner: context.repo.owner,</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">                repo: context.repo.repo,</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">                pull_number: context.issue.number</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            });</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            const body = pr.data.body;</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            const issueNumber= pr.data.head.ref.split('/')[1];</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            const newBody = body + "\n\n" + "close #" + issueNumber;</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">            await github.pulls.update({</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">                  owner: context.repo.owner,</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">                  repo: context.repo.repo,</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">                  pull_number: context.issue.number,</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">                  body: newBody</span><br></span><span class="token-line" style="color:#393A34"><span class="token scalar string" style="color:#e3116c">              });</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h2 class="anchor anchorWithStickyNavbar_LWe7" id="진행-과정">진행 과정<a href="#진행-과정" class="hash-link" aria-label="진행 과정에 대한 직접 링크" title="진행 과정에 대한 직접 링크">​</a></h2><ol><li>pr 이 생성되면, pr에 대한 정보를 가져옵니다.</li><li>pr의 본문을 가져옵니다.</li><li>pr의 브랜치 이름에서 이슈 번호를 가져옵니다.</li><li>pr의 본문에 이슈 번호를 추가합니다.</li><li>pr의 본문을 업데이트합니다.</li></ol><p>이 과정을 통해서, 직접 pr의 본문을 수정하지 않아도, 자동으로 이슈 번호가 추가되기에, 실수를 줄일 수 있으니, 한 번 시도해 보세요</p>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="github" term="github"/>
        <category label="action" term="action"/>
        <category label="pr" term="pr"/>
        <category label="issue" term="issue"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[큰 틀에서 바라보는 서버 아키텍처 계획]]></title>
        <id>https://car-ffeine.github.io/4</id>
        <link href="https://car-ffeine.github.io/4"/>
        <updated>2023-07-03T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[서론]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="서론">서론<a href="#서론" class="hash-link" aria-label="서론에 대한 직접 링크" title="서론에 대한 직접 링크">​</a></h2><p>안녕하세요👋👋 <code>카페인</code> 팀의 제이입니다.</p><p>회의를 하면서 이번 주 제가 맡은 파트는 서버 인프라입니다.</p><p>아직은 EC2 스펙과 데이터들이 정확히 나오진 않았지만,
우테코에서 적은 EC2 스펙을 제공한다는 기준으로 계획도를 적어볼 생각입니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="상황-인식">상황 인식<a href="#상황-인식" class="hash-link" aria-label="상황 인식에 대한 직접 링크" title="상황 인식에 대한 직접 링크">​</a></h2><strong>예상하는 상황은 다음과 같습니다.</strong><ul><li>API의 데이터를 다루는 상황에서 최소 약 150만 건에서 최악 약 3700만 건의 데이터를 다룹니다.</li><li>이전 기수를 봤을 때 EC2의 개수는 많이 나눠주는 것으로 파악 됐습니다. (이 부분은 달라질 수 있습니다.)</li><li>상황에 따라서 공공 API를 업데이트 해주는 서버와, 제공 서버를 나눌 수 있습니다.</li><li>Conflict가 나지 않기 위해서 안정적인 검증을 거친 후 Merge를 해야합니다.</li><li>프로젝트의 버전이 갱신된다면 EC2 서버에서 자동으로 스크립트를 작동시켜 Pull 및 서버 재배포를 해야합니다.</li><li>서버의 버전이 바뀌는 경우 기존 서버를 끄고 새로운 서버를 키면 사용자가 이용할 수 없는 텀이 생기기 때문에 무중단 배포를 해야합니다.</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제점">문제점<a href="#문제점" class="hash-link" aria-label="문제점에 대한 직접 링크" title="문제점에 대한 직접 링크">​</a></h2><p>위에 상황에서 파악되는 문제점들은 먼저 적은 성능의 EC2 서버로 인해 데이터를 받아오는 과정 혹은 업데이트 과정에서 서버가 터질 수도 있습니다.
성능이 좋다면 하나로 모든 것을 할 수 있지만, 그렇지 않기 때문에 현재 여러 개의 EC2를 기준으로 아키텍처를 구성할 예정입니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="문제-해결을-위한-현재-생각">문제 해결을 위한 현재 생각<a href="#문제-해결을-위한-현재-생각" class="hash-link" aria-label="문제 해결을 위한 현재 생각에 대한 직접 링크" title="문제 해결을 위한 현재 생각에 대한 직접 링크">​</a></h2><h3 class="anchor anchorWithStickyNavbar_LWe7" id="서버의-기능-분산">서버의 기능 분산<a href="#서버의-기능-분산" class="hash-link" aria-label="서버의 기능 분산에 대한 직접 링크" title="서버의 기능 분산에 대한 직접 링크">​</a></h3><p>위에서 언급한 것처럼 서버의 성능이 받쳐주지 못할 가능성이 있습니다. 성능을 생각해서 이를 나누기 위해서는 먼저 다음과 같이 서버를 분산할 필요가 있다고 생각합니다.
(물론 서버가 못 버틸 경우이고, 어떻게 나뉘는 지는 회의 후 결정하겠지만!)</p><ul><li><code>공공 API 데이터 적재 및 주기적인 업데이트</code></li><li><code>실시간 혼잡도를 위한 실시간 데이터 업데이트</code></li><li><code>요청 처리</code></li></ul><p>적은 성능으로 업데이트와 요청 처리를 동시에 한다면, 서버가 그 부하를 견디지 못할 수도 있겠죠?
따라서 서버의 역할을 분담하고, 각 역할에 충실하도록 구현한다면 보다 효율적인 처리를 할 수 있을 것이라고 예상됩니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="안정적인-merge">안정적인 Merge<a href="#안정적인-merge" class="hash-link" aria-label="안정적인 Merge에 대한 직접 링크" title="안정적인 Merge에 대한 직접 링크">​</a></h3><p>잘못된 PR을 Merge 시켜버리면 어떨까요? Conflict도 날 수 있고.. 생각만해도 끔찍합니다.</p><p>코드리뷰를 통해서 이를 어느정도 해소한다고 해도, 사람이다보니 실수할 수 있습니다.
이를 해결하기 위해서 <code>Github Actions</code>를 이용하여 미리 지정해둔 Task를 시키고, 이게 통과한다면 Merge할 수 있도록 할 예정입니다.</p><p>이렇게 한다면 협업할 때에도 안전한 Merge가 가능하다고 생각합니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="cicd">CI/CD<a href="#cicd" class="hash-link" aria-label="CI/CD에 대한 직접 링크" title="CI/CD에 대한 직접 링크">​</a></h3><p>지금까지 우테코 미션에서는 배포를 다음과 같은 과정으로 진행했습니다.</p><ol><li>배포</li><li>리팩토링 및 커밋</li><li>EC2 서버에서 스크립트 실행하여 재배포</li></ol><p>이렇게 배포를 해도 상관없지만, 매번 리팩토링과 기능 추가를 할 때마다 EC2 서버로 들어가서 빌드 스크립트를 사용해서 서버를 재시작 해야할까요?
이렇게 된다면 불필요한 시간이 소모되고, 불편한 점이 많을 것이라고 생각됩니다.</p><p>따라서 CI/CD 개념을 적용해서 이 과정을 자동으로 진행하고자 합니다.</p><p>이 부분은 더 알아봐야겠지만, Github Actions를 이용해서 이를 적용하면, 외부에서 SSH 접근이 불가능하기 때문에 Jenkins를 이용할 예정입니다.
깃허브의 변동 사항을 Webhook을 이용해서 Jenkins로 넘기고, 이를 통해 CI를 적용하면 될 것 같다고 판단했습니다.
물론 이는 계획이고 공부하지 않은 다른 내용이 있을 수 있기 때문에 언제든 바뀔 수 있습니다.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="무중단-배포-아키텍처-적용">무중단 배포 아키텍처 적용<a href="#무중단-배포-아키텍처-적용" class="hash-link" aria-label="무중단 배포 아키텍처 적용에 대한 직접 링크" title="무중단 배포 아키텍처 적용에 대한 직접 링크">​</a></h3><p>이 또한 아직은 먼 이야기지만, 고려해 볼 상황이라서 적어봤습니다.</p><p>사용자가 이용하고 있는 서비스가 갑자기 중단된다면 어떨까요?
저는 화가 많이 날 것 같습니다.</p><p>피치 못할 사정으로 서버가 터져도, 사용자가 서비스를 계속 이용할 방법이 없을까요?</p><p>이런 고민을 해결하기 위해서 나온 개념이 무중단 배포입니다.</p><p><code>카나리아 배포</code>, <code>Blue/Green 배포</code>, <code>롤링</code>등 무중단 배포를 위한 여러가지 전략은 이미 존재합니다.
이 부분은 아직은 서버의 명세가 정확하지 않아서 어떤 방식으로 어떻게 처리할 것인지에 대해서는 아직 정할 수는 없습니다.</p><p>이는 명세가 확실하게 정해진 후 팀원과 장단점을 상의하며 결정할 일이기 때문에 현재까지는 "이 정도를 고려하고 있다." 정도만 알면 될 것 같습니다.</p>]]></content>
        <author>
            <name>제이</name>
            <uri>https://github.com/sosow0212</uri>
        </author>
        <category label="java17" term="java17"/>
        <category label="infra" term="infra"/>
        <category label="ec2" term="ec2"/>
        <category label="ci" term="ci"/>
        <category label="cd" term="cd"/>
        <category label="aws" term="aws"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Java 17 을 도입한 이유]]></title>
        <id>https://car-ffeine.github.io/3</id>
        <link href="https://car-ffeine.github.io/3"/>
        <updated>2023-07-02T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[우아한테크코스에서 자바 11을 사용하는 것이 너무 익숙해진 상황이어서, java 11 대신 java 17을 쓰려면 쓰는 대신, 왜 java 17을 쓰면 좋은지에 대해서 설득을 하는 시간이 있어야 하는데요]]></summary>
        <content type="html"><![CDATA[<p>우아한테크코스에서 자바 11을 사용하는 것이 너무 익숙해진 상황이어서, java 11 대신 java 17을 쓰려면 쓰는 대신, 왜 java 17을 쓰면 좋은지에 대해서 설득을 하는 시간이 있어야 하는데요</p><p>처음에는 단순히 record 클래스가 좋아요, collect(Collectors.toList()); 대신 toList() 만으로 해결할 수 있어서 좋아요</p><p>까지밖에 설명할 수 없었습니다.</p><p>이것만으로 동의를 해줘서 일단 java 17 을 사용하기로 했지만, 이번 기회에 조금 더 자세하게 알아보려고 합니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-과-java-11의-중요한-차이들">Java 17 과 Java 11의 중요한 차이들<a href="#java-17-과-java-11의-중요한-차이들" class="hash-link" aria-label="Java 17 과 Java 11의 중요한 차이들에 대한 직접 링크" title="Java 17 과 Java 11의 중요한 차이들에 대한 직접 링크">​</a></h2><p>기능적인 부분과, 숨겨진 부분을 나누어볼 수 있을 것 같습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="기능적인-차이점">기능적인 차이점<a href="#기능적인-차이점" class="hash-link" aria-label="기능적인 차이점에 대한 직접 링크" title="기능적인 차이점에 대한 직접 링크">​</a></h2><p>언제나 직접 차이를 보면 더 직관적이기 때문에, 직접 코드를 보면서 설명을 해보려고 합니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="record-클래스">record 클래스<a href="#record-클래스" class="hash-link" aria-label="record 클래스에 대한 직접 링크" title="record 클래스에 대한 직접 링크">​</a></h3><p>간단한 dto 클래스를 만들었을 때 코드가 정말 간단해지는 것을 확인할 수 있습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11">Java 11<a href="#java-11" class="hash-link" aria-label="Java 11에 대한 직접 링크" title="Java 11에 대한 직접 링크">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public class Dto {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private final int data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public Dto(int data) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        this.data = data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    public int getData() {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        return data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    }</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>lombok 을 사용했을 때</p><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@Getter</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">@AllArgsConstructor</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">public class Dto {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    private final int data;</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java17">Java17<a href="#java17" class="hash-link" aria-label="Java17에 대한 직접 링크" title="Java17에 대한 직접 링크">​</a></h4><div class="codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-text codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token plain">public record Record(int data) {</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이렇게 보면 훨씬 간단해진 것을 볼 수 있습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="예상되는-문제점">예상되는 문제점<a href="#예상되는-문제점" class="hash-link" aria-label="예상되는 문제점에 대한 직접 링크" title="예상되는 문제점에 대한 직접 링크">​</a></h4><p>objectMapper를 사용하면 어떻게 되나요? noArgsConstructor 가 필요하지 않나요?</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">RecordTest</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> objectMapper_로_변환</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">JsonProcessingException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// given</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">ObjectMapper</span><span class="token plain"> objectMapper </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">ObjectMapper</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Record</span><span class="token plain"> record </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">Record</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// when</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">String</span><span class="token plain"> json </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> objectMapper</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">writeValueAsString</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">record</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assertEquals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"{\"data\":1}"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> json</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token annotation punctuation" style="color:#393A34">@Test</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> string_에서_객체로_변환</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">throws</span><span class="token plain"> </span><span class="token class-name">JsonProcessingException</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// given</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">String</span><span class="token plain"> json </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"{\"data\":1}"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">ObjectMapper</span><span class="token plain"> objectMapper </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">new</span><span class="token plain"> </span><span class="token class-name">ObjectMapper</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// when</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Record</span><span class="token plain"> record </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> objectMapper</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">readValue</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">json</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">Record</span><span class="token punctuation" style="color:#393A34">.</span><span class="token keyword" style="color:#00009f">class</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token comment" style="color:#999988;font-style:italic">// then</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token function" style="color:#d73a49">assertEquals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> record</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">data</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>이 테스트에서 볼 수 있는 것처럼 성공적으로 deserialize, serialize 가 가능합니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="tolist-method">toList() method<a href="#tolist-method" class="hash-link" aria-label="toList() method에 대한 직접 링크" title="toList() method에 대한 직접 링크">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11-1">Java 11<a href="#java-11-1" class="hash-link" aria-label="Java 11에 대한 직접 링크" title="Java 11에 대한 직접 링크">​</a></h4><p>이 부분도 정말 편의성이 높다고 생각하는 부분 중 하나인데요</p><p>Collectors.toList() 대신 toList() 만으로도 사용이 가능합니다</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ToListWith11</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Integer</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> list </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">List</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Integer</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">stream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">collect</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Collectors</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toList</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17">Java 17<a href="#java-17" class="hash-link" aria-label="Java 17에 대한 직접 링크" title="Java 17에 대한 직접 링크">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">ToListWith17</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Integer</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> list </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">List</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">of</span><span class="token punctuation" style="color:#393A34">(</span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">List</span><span class="token generics punctuation" style="color:#393A34">&lt;</span><span class="token generics class-name">Integer</span><span class="token generics punctuation" style="color:#393A34">&gt;</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> list</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">stream</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">filter</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">i </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> i </span><span class="token operator" style="color:#393A34">&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toList</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="switch-expression">switch expression<a href="#switch-expression" class="hash-link" aria-label="switch expression에 대한 직접 링크" title="switch expression에 대한 직접 링크">​</a></h3><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11-2">Java 11<a href="#java-11-2" class="hash-link" aria-label="Java 11에 대한 직접 링크" title="Java 11에 대한 직접 링크">​</a></h4><p>우테코에서는 switch, case 를 싫어하기에 볼 수는 없겠지만</p><p>switch 문에도 정말 편하게 바뀌었는데요</p><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">SwitchWith11</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">String</span><span class="token plain"> day </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Sunday"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">day</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Monday"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Tuesday"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Wednesday"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Thursday"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Friday"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Saturday"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Sunday"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                </span><span class="token keyword" style="color:#00009f">break</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-1">Java 17<a href="#java-17-1" class="hash-link" aria-label="Java 17에 대한 직접 링크" title="Java 17에 대한 직접 링크">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">SwitchWith17</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">String</span><span class="token plain"> day </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Sunday"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">switch</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">day</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Monday"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Tuesday"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">2</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Wednesday"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">3</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Thursday"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">4</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Friday"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">5</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Saturday"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">6</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">case</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Sunday"</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">7</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token keyword" style="color:#00009f">default</span><span class="token plain"> </span><span class="token operator" style="color:#393A34">-&gt;</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">0</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>코드 량이 엄청 줄어든 것을 확인하실 수 있습니다</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="instanceof-pattern-matching">instanceof pattern matching<a href="#instanceof-pattern-matching" class="hash-link" aria-label="instanceof pattern matching에 대한 직접 링크" title="instanceof pattern matching에 대한 직접 링크">​</a></h3><p>물론 instanceof 를 사용할 경우가 많은가? 하면 많지는 않겠지만</p><p>아래와 같이 변경되었습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-11-3">Java 11<a href="#java-11-3" class="hash-link" aria-label="Java 11에 대한 직접 링크" title="Java 11에 대한 직접 링크">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">InstanceOfWith11</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Object</span><span class="token plain"> obj </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Hello"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj </span><span class="token keyword" style="color:#00009f">instanceof</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">String</span><span class="token plain"> str </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> obj</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">str</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toUpperCase</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-2">Java 17<a href="#java-17-2" class="hash-link" aria-label="Java 17에 대한 직접 링크" title="Java 17에 대한 직접 링크">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">InstanceOfWith17</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">Object</span><span class="token plain"> obj </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Hello"</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">if</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">obj </span><span class="token keyword" style="color:#00009f">instanceof</span><span class="token plain"> </span><span class="token class-name">String</span><span class="token plain"> str</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">            </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">str</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">toUpperCase</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="number-format">number format<a href="#number-format" class="hash-link" aria-label="number format에 대한 직접 링크" title="number format에 대한 직접 링크">​</a></h3><p>이 기능은 12에 나왔는데요</p><p>언어별로 숫자를 표현하는 방식이 다르지만, 쉽게 표현할 수 있도록 도와주는 기능입니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="java-17-3">Java 17<a href="#java-17-3" class="hash-link" aria-label="Java 17에 대한 직접 링크" title="Java 17에 대한 직접 링크">​</a></h4><div class="language-java codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-java codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">class</span><span class="token plain"> </span><span class="token class-name">NumberFormatterWith11</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token keyword" style="color:#00009f">public</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">static</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">void</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">main</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">String</span><span class="token punctuation" style="color:#393A34">[</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"> args</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token keyword" style="color:#00009f">int</span><span class="token plain"> number </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token number" style="color:#36acaa">1_000_000</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">String</span><span class="token plain"> result </span><span class="token operator" style="color:#393A34">=</span><span class="token plain"> </span><span class="token class-name">NumberFormat</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">getCompactNumberInstance</span><span class="token punctuation" style="color:#393A34">(</span><span class="token class-name">Locale</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">KOREA</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"> </span><span class="token class-name">NumberFormat</span><span class="token class-name punctuation" style="color:#393A34">.</span><span class="token class-name">Style</span><span class="token punctuation" style="color:#393A34">.</span><span class="token constant" style="color:#36acaa">LONG</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">format</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">number</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">        </span><span class="token class-name">System</span><span class="token punctuation" style="color:#393A34">.</span><span class="token plain">out</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">println</span><span class="token punctuation" style="color:#393A34">(</span><span class="token plain">result</span><span class="token punctuation" style="color:#393A34">.</span><span class="token function" style="color:#d73a49">equals</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">"100만"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">;</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="클립보드에 코드 복사" title="복사" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>나머지 부분은 사실 그렇게 큰 역할을 할 것 같지는 않아서 생략하겠습니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="숨겨진-부분들">숨겨진 부분들<a href="#숨겨진-부분들" class="hash-link" aria-label="숨겨진 부분들에 대한 직접 링크" title="숨겨진 부분들에 대한 직접 링크">​</a></h2><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FXhFJg%2Fbtsl9uZOa5R%2FrzrlotCERUqAWM2pknDwq0%2Fimg.png" alt="gc throughput" class="img_ev3q"></p><p>위의 사진은 gc 의 버전별 처리량입니다.</p><p>G1 GC 를 기준으로 본다면 Java8 과의 차이는 15% 정도 향상되었고, java 11과는 10% 정도 향상되었습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FZusmb%2Fbtsl5jYN68u%2FWCKRCFnYjQK4AjkcHRNAt0%2Fimg.png" alt="gc latency" class="img_ev3q"></p><p>위의 사진은 gc의 버전별 지연시간입니다.</p><p>G1 GC 를 기준으로 본다면 Java8 과의 차이는 30% 정도 향상되었고, java 11과는 25% 정도 향상되었습니다.</p><p>이와 같이, 단순하게 새로운 기능만 추가되는 것이 아니라 꾸준히 성능도 향상되고 있습니다.</p><p>이런 부분을 고려했을 때, Java 17을 사용하는 것이 좋을 것 같습니다.</p><p>참고</p><ul><li><a href="https://kstefanj.github.io/2021/11/24/gc-progress-8-17.html" target="_blank" rel="noopener noreferrer">https://kstefanj.github.io/2021/11/24/gc-progress-8-17.html</a></li></ul>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="java17" term="java17"/>
        <category label="java11" term="java11"/>
        <category label="record" term="record"/>
        <category label="toList" term="toList"/>
        <category label="gc" term="gc"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[git branch 전략 작성해보기]]></title>
        <id>https://car-ffeine.github.io/2</id>
        <link href="https://car-ffeine.github.io/2"/>
        <updated>2023-07-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[현재 상황은 어떤데?]]></summary>
        <content type="html"><![CDATA[<h2 class="anchor anchorWithStickyNavbar_LWe7" id="현재-상황은-어떤데">현재 상황은 어떤데?<a href="#현재-상황은-어떤데" class="hash-link" aria-label="현재 상황은 어떤데?에 대한 직접 링크" title="현재 상황은 어떤데?에 대한 직접 링크">​</a></h2><p>현재 우아한테크코스에서는 프론트 코드와 백엔드 코드가 같은 레포지토리를 사용하고 있습니다.</p><p>프론트와 백엔드가 같이 작업하기에, 의도치 않은 충돌이 자주 생길 수 있는 구조이기에, 이를 git branch 전략으로 충돌을 줄이고자 합니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-branch-전략이란">Git Branch 전략이란?<a href="#git-branch-전략이란" class="hash-link" aria-label="Git Branch 전략이란?에 대한 직접 링크" title="Git Branch 전략이란?에 대한 직접 링크">​</a></h2><p>git을 사용해서 소프트웨어 개발을 관리하는 방법입니다.</p><p>여러 개발자가 동시에 작업하고 코드를 통합할 때 생기는 충돌을 효율적으로 조정하기 위한 방법입니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="왜-git-branch-전략이-중요한데">왜 git branch 전략이 중요한데?<a href="#왜-git-branch-전략이-중요한데" class="hash-link" aria-label="왜 git branch 전략이 중요한데?에 대한 직접 링크" title="왜 git branch 전략이 중요한데?에 대한 직접 링크">​</a></h2><p>아래에 있는 4가지를 제외하고도 훨씬 많은 장점이 있을 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-동시-작업이-편하다">1<!-- -->.<!-- --> 동시 작업이 편하다<a href="#1-동시-작업이-편하다" class="hash-link" aria-label="1-동시-작업이-편하다에 대한 직접 링크" title="1-동시-작업이-편하다에 대한 직접 링크">​</a></h4><p>여러 사람이 독립적으로 작업하고, 커밋을 할 때, 자신의 브랜치에서 변경 사항을 커밋하게 됩니다.</p><p>브랜치가 병합될 때만 충돌을 해결하면 되니, 아무 규칙이 없는 것보다 충돌 시점이 명확해지기에 생산성을 높일 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-목적이-명확한-브랜치">2<!-- -->.<!-- --> 목적이 명확한 브랜치<a href="#2-목적이-명확한-브랜치" class="hash-link" aria-label="2-목적이-명확한-브랜치에 대한 직접 링크" title="2-목적이-명확한-브랜치에 대한 직접 링크">​</a></h4><p>애플리케이션의 상태에 몇 가지가 있는데, 안정된 프로덕션, 테스트 환경, 기능 추가 환경... 등이 있습니다</p><p>여러 기능별 브랜치(안정된 버전의 코드만이 관리되는 브랜치, 테스트 환경을 위한 브랜치, 기능 추가를 위한 브랜치)를</p><p>네이밍을 통해 구분하면 각각의 브랜치에 대해서 추가적인 설명을 할 필요 없이 명확하게 관리할 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="3-배포-파이프라인-관리가-편함">3<!-- -->.<!-- --> 배포 파이프라인 관리가 편함<a href="#3-배포-파이프라인-관리가-편함" class="hash-link" aria-label="3-배포-파이프라인-관리가-편함에 대한 직접 링크" title="3-배포-파이프라인-관리가-편함에 대한 직접 링크">​</a></h4><p>브랜치가 네이밍으로 명확하게 구분이 되어있다면, 조건을 설정하기 쉽습니다.</p><p>특정 타입의 브랜치에 push 되었을 때, pull request를 만들었을 때 같은 조건에 따른 스크립트를 만들어둔다면 CI/CD를 구축하기 쉽습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="4-버전-관리가-편리하다">4<!-- -->.<!-- --> 버전 관리가 편리하다<a href="#4-버전-관리가-편리하다" class="hash-link" aria-label="4-버전-관리가-편리하다에 대한 직접 링크" title="4-버전-관리가-편리하다에 대한 직접 링크">​</a></h4><p>서버에 문제가 생겼을 때, 어떤 브랜치로 돌아가서 롤백을 해야 하는지에 대한 것들이 명확합니다.</p><p>안정된 브랜치가 어떤 것인지 명확하기에, 롤백 과정에 대한 의사결정을 줄일 수 있습니다.</p><p>그러면 어떤 종류가 있는지 더 자세하게 알아보도록 하겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="git-branch-전략의-종류는">Git Branch 전략의 종류는?<a href="#git-branch-전략의-종류는" class="hash-link" aria-label="Git Branch 전략의 종류는?에 대한 직접 링크" title="Git Branch 전략의 종류는?에 대한 직접 링크">​</a></h2><p>총 3가지의 전략이 있습니다.</p><p>1<!-- -->.<!-- --> Github Flow</p><p>2<!-- -->.<!-- --> Gitlab Flow</p><p>3<!-- -->.<!-- --> Git Flow</p><p>git을 사용하기에, Git Flow라는 네이밍이 가장 직관적이고 유명한데요.&nbsp;</p><p>3가지 전략 중에서 가장 복잡하기에, 쉬운 순서대로 진행해 보도록 하겠습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="1-github-flow">1<!-- -->.<!-- --> Github Flow<a href="#1-github-flow" class="hash-link" aria-label="1-github-flow에 대한 직접 링크" title="1-github-flow에 대한 직접 링크">​</a></h2><p>그림으로 flow 간단하게 보고 가도록 하겠습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FblgfI6%2FbtslEWRFdaJ%2F3KmwR2yqlfgKk0msnufYNk%2Fimg.png" alt="img" class="img_ev3q"></p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FbtUzxm%2FbtslJ1xWHzy%2FMP0s11FoCTKpqwQnUJUm30%2Fimg.png" alt="img2" class="img_ev3q"></p><p>브랜치는 총 2가지 종류가 존재합니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="1-master-브랜치">1<!-- -->.<!-- --> master 브랜치<a href="#1-master-브랜치" class="hash-link" aria-label="1-master-브랜치에 대한 직접 링크" title="1-master-브랜치에 대한 직접 링크">​</a></h4><p>여기에 머지가 되면 배포가 되도록 CD를 연결해 놓은 경우가 많습니다.</p><p>안정된 버전의 코드가 관리되는 브랜치입니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="2-feature-브랜치">2<!-- -->.<!-- --> feature 브랜치<a href="#2-feature-브랜치" class="hash-link" aria-label="2-feature-브랜치에 대한 직접 링크" title="2-feature-브랜치에 대한 직접 링크">​</a></h4><p>기능 추가, 버그 수정 등 모든 작업은 feature 브랜치에서 일어납니다.</p><p>master 브랜치에서 새로운 브랜치를 만들어서, 마스터로 머지되는 단순한 사이클을 가지고 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="장점">장점<a href="#장점" class="hash-link" aria-label="장점에 대한 직접 링크" title="장점에 대한 직접 링크">​</a></h4><p>위에서 볼 수 있는 것처럼 2종류의 브랜치만 있기에, 정말 간단합니다.</p><p>학습 과정까지의 러닝 커브가 거의 없다시피 하기에, 간단한 프로젝트에 적용하기 정말 좋습니다.</p><p>릴리즈 되지 않은 코드가 최소화됩니다. 최신 버전의 코드와 최대한 빠르게 동기화를 계속해서 시킬 수 있습니다</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="단점">단점<a href="#단점" class="hash-link" aria-label="단점에 대한 직접 링크" title="단점에 대한 직접 링크">​</a></h4><p>모든 코드는 다 master 브랜치에 머지가 되어야 한다는 점이 개발 서버와, 운영서버를 나누기 애매할 수 있습니다.</p><p>개발 서버에 배포를 하고 싶은 상황이라면, master에 머지가 되어야 합니다.</p><p>머지가 된 이후에 cd 파이프라인을 통해서 개발 서버와 운영 서버 모두에 배포가 됩니다.</p><p>여러 환경을 나누고 관리를 하고 싶으시다면 다음에 소개해드릴 전략을 사용해 보셔도 좋을 것 같습니다</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="2-gitlab-flow">2<!-- -->.<!-- --> Gitlab Flow<a href="#2-gitlab-flow" class="hash-link" aria-label="2-gitlab-flow에 대한 직접 링크" title="2-gitlab-flow에 대한 직접 링크">​</a></h2><p>그림으로 flow 간단하게 보고 가도록 하겠습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fdlarwn%2FbtslKkYqqTR%2FXi8NnZIEXahoVFusk0xV31%2Fimg.png" alt="img2" class="img_ev3q"></p><p>밑에 환경은 총 2개의 서버가 존재할 때를 가정하고 있습니다.</p><p>1<!-- -->.<!-- --> pre-production 서버</p><p>2<!-- -->.<!-- --> production 서버</p><p>편의를 위해 main에 머지되는 과정은 간단하게 표현했습니다.</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2FdbkNc9%2FbtslJ0MBrWb%2F0CT7DVQoCDFOpbqyAko9mk%2Fimg.png" alt="img3" class="img_ev3q"></p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="브랜치-종류">브랜치 종류<a href="#브랜치-종류" class="hash-link" aria-label="브랜치 종류에 대한 직접 링크" title="브랜치 종류에 대한 직접 링크">​</a></h4><p>총 3가지 브랜치가 필요하고, 추가에 따라서 더 추가할 수 있습니다.</p><p>1<!-- -->.<!-- --> main(or develop) 브랜치</p><p>기능에 대한 개발이 완료되었지만, 여기에 머지되어도 바로 배포되지는 않습니다.</p><p>2<!-- -->.<!-- --> feature브랜치</p><p>기능을 개발하는 브랜치입니다. Github Flow 와도 유사합니다.</p><p>3<!-- -->.<!-- --> production 브랜치</p><p>실제 배포가 일어나는 브랜치입니다.&nbsp;</p><p>여기에 머지가 되는 순간 배포가 일어납니다.</p><p>위 사진에 있는 것처럼, 필요에 따라서 pre-production이나, staging 같은 환경에 따른 브랜치를 추가할 수 있습니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="특징">특징<a href="#특징" class="hash-link" aria-label="특징에 대한 직접 링크" title="특징에 대한 직접 링크">​</a></h4><p>1<!-- -->.<!-- --> 무조건 단방향으로 머지가 일어납니다.</p><p>긴급하게 라이브 서버에 수정을 해야 할 때, production 부터 시작하는 것이 아닌, main 부터 차근차근 올라가야 합니다</p><p>2<!-- -->.<!-- --> 환경에 따라 브랜치 종류가 늘어날 수 있습니다.</p><p>위 사진에서는 pre-production 이 그 예시가 되겠네요.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="장점-1">장점<a href="#장점-1" class="hash-link" aria-label="장점에 대한 직접 링크" title="장점에 대한 직접 링크">​</a></h4><p>1<!-- -->.<!-- --> Github Flow에서 환경별 브랜치를 통해서 개발 서버나 pre-production 서버에 버전을 깔끔하게 관리할 수 있습니다.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="3-git-flow">3<!-- -->.<!-- --> Git Flow<a href="#3-git-flow" class="hash-link" aria-label="3-git-flow에 대한 직접 링크" title="3-git-flow에 대한 직접 링크">​</a></h2><p>브랜치 전략 중 가장 처음으로 유명해진 브랜치 전략입니다.</p><p>배포가 특정 주기를 가지고 있는 애플리케이션일 때, 가장 적합합니다.</p><p>가장 복잡한 전략을 가지고 있어서, 모두가 브랜치 전략에 대해서 이해하고 있다면 역할에 따른 깔끔한 분리가 가능합니다</p><p>그림으로 보고 가도록 하겠습니다</p><p><img loading="lazy" src="https://img1.daumcdn.net/thumb/R1280x0/?scode=mtistory2&amp;fname=https%3A%2F%2Fblog.kakaocdn.net%2Fdn%2Fd9WzKn%2FbtslKdkAHNP%2F2fCAqKSVxtPVWqYnBS8juk%2Fimg.png" alt="img4" class="img_ev3q"></p><p>가장 유명한 브랜치 전략이지만, 가장 어려운 전략이기도 합니다.</p><h4 class="anchor anchorWithStickyNavbar_LWe7" id="특징-1">특징<a href="#특징-1" class="hash-link" aria-label="특징에 대한 직접 링크" title="특징에 대한 직접 링크">​</a></h4><p>1<!-- -->.<!-- --> 브랜치에 대해서 양방향으로 머지가 일어납니다</p><p>release 브랜치에서 버그 수정이 일어나면, develop 브랜치에도 머지해줘야 합니다.</p><p>hotfix 브랜치를 main 브랜치뿐만 아니라, develop 브랜치에도 머지해줘야 합니다</p><p>브랜치의 종류가 5가지나 됩니다</p><p>1<!-- -->.<!-- --> main</p><p>production 이 배포되었을 때, 이 브랜치에 머지되는 것이 기준이 됩니다.</p><p>2<!-- -->.<!-- --> develop&nbsp;</p><p>위에서 설명드렸던 브랜치들과 큰 차이가 없이 배포 전 브랜치입니다.</p><p>3<!-- -->.<!-- --> feature</p><p>기능을 개발할 때 사용하는 브랜치입니다. 이것도 위와 큰 차이가 없습니다</p><p>4<!-- -->.<!-- --> release</p><p>Gitlab Flow에서 pre-production에 해당한다고 봐도 무방합니다.</p><p>여기서 버그 수정이 일어났을 경우에,&nbsp; develop에 머지하는 것을 까먹으면 안 됩니다.</p><p>5<!-- -->.<!-- --> hotfix</p><p>main 브랜치에서 생성된 브랜치로, 긴급한 변경사항을 처리합니다.</p><p>이때, develop에 머지하는 것을 깜빡하면 안 됩니다.</p><p>더 자세하게 알아보실 분은 아래 링크들을 확인해 보세요</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="우리-프로젝트에는-어떤-것이-적절할까">우리 프로젝트에는 어떤 것이 적절할까?<a href="#우리-프로젝트에는-어떤-것이-적절할까" class="hash-link" aria-label="우리 프로젝트에는 어떤 것이 적절할까?에 대한 직접 링크" title="우리 프로젝트에는 어떤 것이 적절할까?에 대한 직접 링크">​</a></h2><p>나중에 개발 서버 혹은 스테이징 서버를 두고 싶기에, 이 부분에 대한 처리가 부족한 Github Flow는 적절하지 않습니다.</p><p>Git Flow는 깔끔하게 처리할 수 있지만, 러닝 커브가 Gitlab Flow 보다 약간 더 있어서, 빠르게 개발하는 취지에 맞지 않아 보였습니다.</p><p>이런 과정을 통해서 Gitlab Flow를 사용하려고 합니다&nbsp;</p><p>참고</p><p><a href="https://techblog.woowahan.com/2553/" target="_blank" rel="noopener noreferrer">https://techblog.woowahan.com/2553/</a></p><p><a href="https://docs.gitlab.com/ee/topics/gitlab_flow.html" target="_blank" rel="noopener noreferrer">https://docs.gitlab.com/ee/topics/gitlab<!-- -->_<!-- -->flow.html</a></p>]]></content>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <category label="git" term="git"/>
        <category label="branch" term="branch"/>
        <category label="git branch" term="git branch"/>
        <category label="github flow" term="github flow"/>
        <category label="gitlab flow" term="gitlab flow"/>
        <category label="git flow" term="git flow"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello World]]></title>
        <id>https://car-ffeine.github.io/1</id>
        <link href="https://car-ffeine.github.io/1"/>
        <updated>2023-06-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[안녕하세요]]></summary>
        <content type="html"><![CDATA[<p>안녕하세요</p>]]></content>
        <author>
            <name>박스터</name>
            <uri>https://github.com/drunkenhw</uri>
        </author>
        <author>
            <name>누누</name>
            <uri>https://github.com/be-student</uri>
        </author>
        <author>
            <name>제이</name>
            <uri>https://github.com/sosow0212</uri>
        </author>
        <author>
            <name>키아라</name>
            <uri>https://github.com/kiarakim</uri>
        </author>
        <author>
            <name>야미</name>
            <uri>https://github.com/feb-dain</uri>
        </author>
        <author>
            <name>센트</name>
            <uri>https://github.com/kyw0716</uri>
        </author>
        <author>
            <name>가브리엘</name>
            <uri>https://github.com/gabrielyoon7</uri>
        </author>
        <category label="hello" term="hello"/>
        <category label="world" term="world"/>
    </entry>
</feed>